# Function to convert numbers to letters (1->A, 2->B, ... 26->Z, 27->AA, 28->AB...)


def numberToLetters(q):
    q = q - 1
    result = ''
    while q >= 0:
        remain = q % 26
        result = chr(remain+65) + result;
        q = q//26 - 1
    return result



def load_credentials():
    import boto3
    from cryptography.fernet import Fernet
    import pickle
    import os

    def open_pickle_name(file_name):
        s3 = boto3.client('s3')
        with open('FILE_NAME', 'wb') as f:
            s3.download_fileobj('armsecure', file_name, f)
        results = pickle.load(open('FILE_NAME','rb'))
        os.remove('FILE_NAME')
        return results


    #AWS access key for database user.
    acc = open_pickle_name('acc.p')
    #Fernet decryption key
    ko = open_pickle_name('testing.p')
    #AWS Secret Key for database user
    sh = open_pickle_name('sh.p')
    #Password for the Process eamil
    em = open_pickle_name('em.p')
    #connection string for sqlalchemy, which contains all odbc connection items to connect to redshift
    post = open_pickle_name('post.p')
    #host name for SBMS proper
    ho = open_pickle_name('ho.p')
    #The dictionary used for connecting to the google API
    go = open_pickle_name('go.p')
    #the username for connecting to SBMS.
    use = open_pickle_name('use.p')
    #password for connecting to SBMS.
    wo = open_pickle_name('wo.p')
    look = open_pickle_name('look.p')
    look_sec = open_pickle_name('look_sec.p')
    f = Fernet(ko)

    #Need to change file anytime an employee leaves
    #look = f.decrypt(look).decode()
    #look_sec = f.decrypt(look_sec).decode()
    look = 'Q844fd3cTp37dcWkYtkh'
    look_sec = 'cMPm8V74MshPzjHTyhvTy8Jz'
    acc = f.decrypt(acc).decode()
    sh = f.decrypt(sh).decode()
    em = f.decrypt(em).decode()
    post = f.decrypt(post).decode()
    ho = f.decrypt(ho).decode()
    use = f.decrypt(use).decode()
    wo = f.decrypt(wo).decode()
    host = ho
    username = use
    password = wo
    database = "master"
    host_armor = 'armorprod.cqz9ioxkodch.us-west-2.rds.amazonaws.com'
    username_armor = 'admin'
    password_armor = 'arm0r#123$PROD'
    database_armor = 'Armor'

    print('credentials loaded')
    return acc,sh,em,post,ho,use,wo,database,go,look,look_sec

def convert_to_int(x):

    if  (type(x) == float):

        #return int(x)
        return x
    else:

        return x




def format_strings(string,remove_podcast = False,remove_space = False,drop_live = False):
    import pandas as pd
    import string as strings
    import re
    if pd.isna(string):
        string = ""

    punctuation = [x for x in strings.punctuation]
    stop_words = ['The ', 'A ',' The ', ' A ',]
    punctuation.remove("'")
    string = string.replace('DNU',"")
    string = string.replace(".","")
    string = string.replace("'","")
    string = string.title()
    #     for words in stop_words:
    #         string = string.replace(words,"  ")
    string = string.replace("%",'percent')
    string = string.replace("#","hashtag")
    string = string.replace("1","one")
    string = string.replace("@","at")
    string = string.replace("2","two")
    string = string.replace("3","three")
    string = string.replace("4","four")
    string = string.replace("5","five")
    string = string.replace("6","six")
    string = string.replace("7","seven")
    string = string.replace("8","8")
    string = string.replace("9","nine")
    string = string.replace("0","zero")
    string = string.replace("&","and")
    string = string.replace("%","percent")
    string = re.sub("[\(\[].*?[\)\]]","",string)
    string = string.lower()
    string = string.replace(" shit ", " sht ")
    string = re.sub("[^0-9a-zA-Z ]", '', string)
    if remove_podcast:
        string = string.replace('podcast',"podcast")
    for punct in punctuation:
        string = string.replace(punct,"  ")
    string = string.replace("  "," ").replace("  "," ").replace("  "," ").replace("  "," ").replace(" ","")
    if drop_live:
        string = string.replace('live',"")
    if remove_space == True:
        string = string.replace(" ","").replace(" ","")
        return string.strip()
    else:
        return string.strip()



def format_strings_name(string,remove_podcast = False,remove_space = False,drop_live = False):
    import pandas as pd
    import string as strings
    import re
    if pd.isna(string):
        string = ""

    punctuation = [x for x in strings.punctuation]
    stop_words = ['The ', 'A ',' The ', ' A ',]
    punctuation.remove("'")
    string = string.replace('DNU',"")
    string = string.replace(".","")
    string = string.replace("'","")
    string = string.title()
    #     for words in stop_words:
    #         string = string.replace(words,"  ")
    string = string.replace("%",'percent')
    string = string.replace("#","hashtag")
    string = string.replace("1","one")
    string = string.replace("@","at")
    string = string.replace("2","two")
    string = string.replace("3","three")
    string = string.replace("4","four")
    string = string.replace("5","five")
    string = string.replace("6","six")
    string = string.replace("7","seven")
    string = string.replace("8","8")
    string = string.replace("9","nine")
    string = string.replace("0","zero")
    string = string.replace("&","and")
    string = string.replace("%","percent")
    string = re.sub("[\(\[].*?[\)\]]","",string)
    string = string.lower()
    string = string.replace(" shit ", " sht ")
    string = re.sub("[^0-9a-zA-Z ]", '', string)
    if remove_podcast:
        string = string.replace('podcast',"podcast")
    for punct in punctuation:
        string = string.replace(punct,"  ")
    string = string.replace("  "," ").replace("  "," ").replace("  "," ").replace("  "," ").replace(" ","")
    if drop_live:
        string = string.replace('live',"")
    if remove_space == True:
        string = string.replace(" ","").replace(" ","")
        return string.strip()
    else:
        return string.strip()

def upload_credentials_to_s3(secret_password,name_of_file):
    s3 = boto3.client('s3')
    with open('FILE_NAME', 'wb') as f:
        s3.download_fileobj('armsecure', "testing.p", f)
    ko = pickle.load(open('FILE_NAME','rb'))
    os.remove('FILE_NAME')
    f = Fernet(ko)
    encryption = f.encrypt(str.encode(secret_password))
    with open(name_of_file + '.p','wb') as file:
        pickle.dump(encryption,file)
    s3 = boto3.Session().resource("s3")
    s3.meta.client.upload_file(name_of_file + '.p','armsecure',name_of_file + '.p')




def create_sleep_number_budget():


    query = """
DROP TABLE IF EXISTS public.broadcast_calendar_sleep_number;


--UGLY ASS CODE
--SET INITIALLY TO STANDARD BROADCAST CALENDAR
CREATE TABLE public.broadcast_calendar_sleep_number AS
(broadcast_date, broadcast_year, broadcast_week_number, broadcast_week, broadcast_month, adjusted_client_id)
INSERT INTO production.public.broadcast_calendar_sleep_number
(broadcast_date, broadcast_year, broadcast_week_number, broadcast_week, broadcast_month, adjusted_client_id)
VALUES
('12/30/2018',2019,1,'12/30/2018','Jan',100),
('12/31/2018',2019,1,'12/30/2018','Jan',100),
('1/1/2019',2019,1,'12/30/2018','Jan',100),
('1/2/2019',2019,1,'12/30/2018','Jan',100),
('1/3/2019',2019,1,'12/30/2018','Jan',100),
('1/4/2019',2019,1,'12/30/2018','Jan',100),
('1/5/2019',2019,1,'12/30/2018','Jan',100),
('1/6/2019',2019,2,'1/6/2019','Jan',100),
('1/7/2019',2019,2,'1/6/2019','Jan',100),
('1/8/2019',2019,2,'1/6/2019','Jan',100),
('1/9/2019',2019,2,'1/6/2019','Jan',100),
('1/10/2019',2019,2,'1/6/2019','Jan',100),
('1/11/2019',2019,2,'1/6/2019','Jan',100),
('1/12/2019',2019,2,'1/6/2019','Jan',100),
('1/13/2019',2019,3,'1/13/2019','Jan',100),
('1/14/2019',2019,3,'1/13/2019','Jan',100),
('1/15/2019',2019,3,'1/13/2019','Jan',100),
('1/16/2019',2019,3,'1/13/2019','Jan',100),
('1/17/2019',2019,3,'1/13/2019','Jan',100),
('1/18/2019',2019,3,'1/13/2019','Jan',100),
('1/19/2019',2019,3,'1/13/2019','Jan',100),
('1/20/2019',2019,4,'1/20/2019','Jan',100),
('1/21/2019',2019,4,'1/20/2019','Jan',100),
('1/22/2019',2019,4,'1/20/2019','Jan',100),
('1/23/2019',2019,4,'1/20/2019','Jan',100),
('1/24/2019',2019,4,'1/20/2019','Jan',100),
('1/25/2019',2019,4,'1/20/2019','Jan',100),
('1/26/2019',2019,4,'1/20/2019','Jan',100),
('1/27/2019',2019,5,'1/27/2019','Feb',100),
('1/28/2019',2019,5,'1/27/2019','Feb',100),
('1/29/2019',2019,5,'1/27/2019','Feb',100),
('1/30/2019',2019,5,'1/27/2019','Feb',100),
('1/31/2019',2019,5,'1/27/2019','Feb',100),
('2/1/2019',2019,5,'1/27/2019','Feb',100),
('2/2/2019',2019,5,'1/27/2019','Feb',100),
('2/3/2019',2019,6,'2/3/2019','Feb',100),
('2/4/2019',2019,6,'2/3/2019','Feb',100),
('2/5/2019',2019,6,'2/3/2019','Feb',100),
('2/6/2019',2019,6,'2/3/2019','Feb',100),
('2/7/2019',2019,6,'2/3/2019','Feb',100),
('2/8/2019',2019,6,'2/3/2019','Feb',100),
('2/9/2019',2019,6,'2/3/2019','Feb',100),
('2/10/2019',2019,7,'2/10/2019','Feb',100),
('2/11/2019',2019,7,'2/10/2019','Feb',100),
('2/12/2019',2019,7,'2/10/2019','Feb',100),
('2/13/2019',2019,7,'2/10/2019','Feb',100),
('2/14/2019',2019,7,'2/10/2019','Feb',100),
('2/15/2019',2019,7,'2/10/2019','Feb',100),
('2/16/2019',2019,7,'2/10/2019','Feb',100),
('2/17/2019',2019,8,'2/17/2019','Feb',100),
('2/18/2019',2019,8,'2/17/2019','Feb',100),
('2/19/2019',2019,8,'2/17/2019','Feb',100),
('2/20/2019',2019,8,'2/17/2019','Feb',100),
('2/21/2019',2019,8,'2/17/2019','Feb',100),
('2/22/2019',2019,8,'2/17/2019','Feb',100),
('2/23/2019',2019,8,'2/17/2019','Feb',100),
('2/24/2019',2019,9,'2/24/2019','Mar',100),
('2/25/2019',2019,9,'2/24/2019','Mar',100),
('2/26/2019',2019,9,'2/24/2019','Mar',100),
('2/27/2019',2019,9,'2/24/2019','Mar',100),
('2/28/2019',2019,9,'2/24/2019','Mar',100),
('3/1/2019',2019,9,'2/24/2019','Mar',100),
('3/2/2019',2019,9,'2/24/2019','Mar',100),
('3/3/2019',2019,10,'3/3/2019','Mar',100),
('3/4/2019',2019,10,'3/3/2019','Mar',100),
('3/5/2019',2019,10,'3/3/2019','Mar',100),
('3/6/2019',2019,10,'3/3/2019','Mar',100),
('3/7/2019',2019,10,'3/3/2019','Mar',100),
('3/8/2019',2019,10,'3/3/2019','Mar',100),
('3/9/2019',2019,10,'3/3/2019','Mar',100),
('3/10/2019',2019,11,'3/10/2019','Mar',100),
('3/11/2019',2019,11,'3/10/2019','Mar',100),
('3/12/2019',2019,11,'3/10/2019','Mar',100),
('3/13/2019',2019,11,'3/10/2019','Mar',100),
('3/14/2019',2019,11,'3/10/2019','Mar',100),
('3/15/2019',2019,11,'3/10/2019','Mar',100),
('3/16/2019',2019,11,'3/10/2019','Mar',100),
('3/17/2019',2019,12,'3/17/2019','Mar',100),
('3/18/2019',2019,12,'3/17/2019','Mar',100),
('3/19/2019',2019,12,'3/17/2019','Mar',100),
('3/20/2019',2019,12,'3/17/2019','Mar',100),
('3/21/2019',2019,12,'3/17/2019','Mar',100),
('3/22/2019',2019,12,'3/17/2019','Mar',100),
('3/23/2019',2019,12,'3/17/2019','Mar',100),
('3/24/2019',2019,13,'3/24/2019','Mar',100),
('3/25/2019',2019,13,'3/24/2019','Mar',100),
('3/26/2019',2019,13,'3/24/2019','Mar',100),
('3/27/2019',2019,13,'3/24/2019','Mar',100),
('3/28/2019',2019,13,'3/24/2019','Mar',100),
('3/29/2019',2019,13,'3/24/2019','Mar',100),
('3/30/2019',2019,13,'3/24/2019','Mar',100),
('3/31/2019',2019,14,'3/31/2019','Apr',100),
('4/1/2019',2019,14,'3/31/2019','Apr',100),
('4/2/2019',2019,14,'3/31/2019','Apr',100),
('4/3/2019',2019,14,'3/31/2019','Apr',100),
('4/4/2019',2019,14,'3/31/2019','Apr',100),
('4/5/2019',2019,14,'3/31/2019','Apr',100),
('4/6/2019',2019,14,'3/31/2019','Apr',100),
('4/7/2019',2019,15,'4/7/2019','Apr',100),
('4/8/2019',2019,15,'4/7/2019','Apr',100),
('4/9/2019',2019,15,'4/7/2019','Apr',100),
('4/10/2019',2019,15,'4/7/2019','Apr',100),
('4/11/2019',2019,15,'4/7/2019','Apr',100),
('4/12/2019',2019,15,'4/7/2019','Apr',100),
('4/13/2019',2019,15,'4/7/2019','Apr',100),
('4/14/2019',2019,16,'4/14/2019','Apr',100),
('4/15/2019',2019,16,'4/14/2019','Apr',100),
('4/16/2019',2019,16,'4/14/2019','Apr',100),
('4/17/2019',2019,16,'4/14/2019','Apr',100),
('4/18/2019',2019,16,'4/14/2019','Apr',100),
('4/19/2019',2019,16,'4/14/2019','Apr',100),
('4/20/2019',2019,16,'4/14/2019','Apr',100),
('4/21/2019',2019,17,'4/21/2019','Apr',100),
('4/22/2019',2019,17,'4/21/2019','Apr',100),
('4/23/2019',2019,17,'4/21/2019','Apr',100),
('4/24/2019',2019,17,'4/21/2019','Apr',100),
('4/25/2019',2019,17,'4/21/2019','Apr',100),
('4/26/2019',2019,17,'4/21/2019','Apr',100),
('4/27/2019',2019,17,'4/21/2019','Apr',100),
('4/28/2019',2019,18,'4/28/2019','May',100),
('4/29/2019',2019,18,'4/28/2019','May',100),
('4/30/2019',2019,18,'4/28/2019','May',100),
('5/1/2019',2019,18,'4/28/2019','May',100),
('5/2/2019',2019,18,'4/28/2019','May',100),
('5/3/2019',2019,18,'4/28/2019','May',100),
('5/4/2019',2019,18,'4/28/2019','May',100),
('5/5/2019',2019,19,'5/5/2019','May',100),
('5/6/2019',2019,19,'5/5/2019','May',100),
('5/7/2019',2019,19,'5/5/2019','May',100),
('5/8/2019',2019,19,'5/5/2019','May',100),
('5/9/2019',2019,19,'5/5/2019','May',100),
('5/10/2019',2019,19,'5/5/2019','May',100),
('5/11/2019',2019,19,'5/5/2019','May',100),
('5/12/2019',2019,20,'5/12/2019','May',100),
('5/13/2019',2019,20,'5/12/2019','May',100),
('5/14/2019',2019,20,'5/12/2019','May',100),
('5/15/2019',2019,20,'5/12/2019','May',100),
('5/16/2019',2019,20,'5/12/2019','May',100),
('5/17/2019',2019,20,'5/12/2019','May',100),
('5/18/2019',2019,20,'5/12/2019','May',100),
('5/19/2019',2019,21,'5/19/2019','May',100),
('5/20/2019',2019,21,'5/19/2019','May',100),
('5/21/2019',2019,21,'5/19/2019','May',100),
('5/22/2019',2019,21,'5/19/2019','May',100),
('5/23/2019',2019,21,'5/19/2019','May',100),
('5/24/2019',2019,21,'5/19/2019','May',100),
('5/25/2019',2019,21,'5/19/2019','May',100),
('5/26/2019',2019,22,'5/26/2019','Jun',100),
('5/27/2019',2019,22,'5/26/2019','Jun',100),
('5/28/2019',2019,22,'5/26/2019','Jun',100),
('5/29/2019',2019,22,'5/26/2019','Jun',100),
('5/30/2019',2019,22,'5/26/2019','Jun',100),
('5/31/2019',2019,22,'5/26/2019','Jun',100),
('6/1/2019',2019,22,'5/26/2019','Jun',100),
('6/2/2019',2019,23,'6/2/2019','Jun',100),
('6/3/2019',2019,23,'6/2/2019','Jun',100),
('6/4/2019',2019,23,'6/2/2019','Jun',100),
('6/5/2019',2019,23,'6/2/2019','Jun',100),
('6/6/2019',2019,23,'6/2/2019','Jun',100),
('6/7/2019',2019,23,'6/2/2019','Jun',100),
('6/8/2019',2019,23,'6/2/2019','Jun',100),
('6/9/2019',2019,24,'6/9/2019','Jun',100),
('6/10/2019',2019,24,'6/9/2019','Jun',100),
('6/11/2019',2019,24,'6/9/2019','Jun',100),
('6/12/2019',2019,24,'6/9/2019','Jun',100),
('6/13/2019',2019,24,'6/9/2019','Jun',100),
('6/14/2019',2019,24,'6/9/2019','Jun',100),
('6/15/2019',2019,24,'6/9/2019','Jun',100),
('6/16/2019',2019,25,'6/16/2019','Jun',100),
('6/17/2019',2019,25,'6/16/2019','Jun',100),
('6/18/2019',2019,25,'6/16/2019','Jun',100),
('6/19/2019',2019,25,'6/16/2019','Jun',100),
('6/20/2019',2019,25,'6/16/2019','Jun',100),
('6/21/2019',2019,25,'6/16/2019','Jun',100),
('6/22/2019',2019,25,'6/16/2019','Jun',100),
('6/23/2019',2019,26,'6/23/2019','Jun',100),
('6/24/2019',2019,26,'6/23/2019','Jun',100),
('6/25/2019',2019,26,'6/23/2019','Jun',100),
('6/26/2019',2019,26,'6/23/2019','Jun',100),
('6/27/2019',2019,26,'6/23/2019','Jun',100),
('6/28/2019',2019,26,'6/23/2019','Jun',100),
('6/29/2019',2019,26,'6/23/2019','Jun',100),
('6/30/2019',2019,27,'6/30/2019','Jul',100),
('7/1/2019',2019,27,'6/30/2019','Jul',100),
('7/2/2019',2019,27,'6/30/2019','Jul',100),
('7/3/2019',2019,27,'6/30/2019','Jul',100),
('7/4/2019',2019,27,'6/30/2019','Jul',100),
('7/5/2019',2019,27,'6/30/2019','Jul',100),
('7/6/2019',2019,27,'6/30/2019','Jul',100),
('7/7/2019',2019,28,'7/7/2019','Jul',100),
('7/8/2019',2019,28,'7/7/2019','Jul',100),
('7/9/2019',2019,28,'7/7/2019','Jul',100),
('7/10/2019',2019,28,'7/7/2019','Jul',100),
('7/11/2019',2019,28,'7/7/2019','Jul',100),
('7/12/2019',2019,28,'7/7/2019','Jul',100),
('7/13/2019',2019,28,'7/7/2019','Jul',100),
('7/14/2019',2019,29,'7/14/2019','Jul',100),
('7/15/2019',2019,29,'7/14/2019','Jul',100),
('7/16/2019',2019,29,'7/14/2019','Jul',100),
('7/17/2019',2019,29,'7/14/2019','Jul',100),
('7/18/2019',2019,29,'7/14/2019','Jul',100),
('7/19/2019',2019,29,'7/14/2019','Jul',100),
('7/20/2019',2019,29,'7/14/2019','Jul',100),
('7/21/2019',2019,30,'7/21/2019','Jul',100),
('7/22/2019',2019,30,'7/21/2019','Jul',100),
('7/23/2019',2019,30,'7/21/2019','Jul',100),
('7/24/2019',2019,30,'7/21/2019','Jul',100),
('7/25/2019',2019,30,'7/21/2019','Jul',100),
('7/26/2019',2019,30,'7/21/2019','Jul',100),
('7/27/2019',2019,30,'7/21/2019','Jul',100),
('7/28/2019',2019,31,'7/28/2019','Aug',100),
('7/29/2019',2019,31,'7/28/2019','Aug',100),
('7/30/2019',2019,31,'7/28/2019','Aug',100),
('7/31/2019',2019,31,'7/28/2019','Aug',100),
('8/1/2019',2019,31,'7/28/2019','Aug',100),
('8/2/2019',2019,31,'7/28/2019','Aug',100),
('8/3/2019',2019,31,'7/28/2019','Aug',100),
('8/4/2019',2019,32,'8/4/2019','Aug',100),
('8/5/2019',2019,32,'8/4/2019','Aug',100),
('8/6/2019',2019,32,'8/4/2019','Aug',100),
('8/7/2019',2019,32,'8/4/2019','Aug',100),
('8/8/2019',2019,32,'8/4/2019','Aug',100),
('8/9/2019',2019,32,'8/4/2019','Aug',100),
('8/10/2019',2019,32,'8/4/2019','Aug',100),
('8/11/2019',2019,33,'8/11/2019','Aug',100),
('8/12/2019',2019,33,'8/11/2019','Aug',100),
('8/13/2019',2019,33,'8/11/2019','Aug',100),
('8/14/2019',2019,33,'8/11/2019','Aug',100),
('8/15/2019',2019,33,'8/11/2019','Aug',100),
('8/16/2019',2019,33,'8/11/2019','Aug',100),
('8/17/2019',2019,33,'8/11/2019','Aug',100),
('8/18/2019',2019,34,'8/18/2019','Aug',100),
('8/19/2019',2019,34,'8/18/2019','Aug',100),
('8/20/2019',2019,34,'8/18/2019','Aug',100),
('8/21/2019',2019,34,'8/18/2019','Aug',100),
('8/22/2019',2019,34,'8/18/2019','Aug',100),
('8/23/2019',2019,34,'8/18/2019','Aug',100),
('8/24/2019',2019,34,'8/18/2019','Aug',100),
('8/25/2019',2019,35,'8/25/2019','Sep',100),
('8/26/2019',2019,35,'8/25/2019','Sep',100),
('8/27/2019',2019,35,'8/25/2019','Sep',100),
('8/28/2019',2019,35,'8/25/2019','Sep',100),
('8/29/2019',2019,35,'8/25/2019','Sep',100),
('8/30/2019',2019,35,'8/25/2019','Sep',100),
('8/31/2019',2019,35,'8/25/2019','Sep',100),
('9/1/2019',2019,36,'9/1/2019','Sep',100),
('9/2/2019',2019,36,'9/1/2019','Sep',100),
('9/3/2019',2019,36,'9/1/2019','Sep',100),
('9/4/2019',2019,36,'9/1/2019','Sep',100),
('9/5/2019',2019,36,'9/1/2019','Sep',100),
('9/6/2019',2019,36,'9/1/2019','Sep',100),
('9/7/2019',2019,36,'9/1/2019','Sep',100),
('9/8/2019',2019,37,'9/8/2019','Sep',100),
('9/9/2019',2019,37,'9/8/2019','Sep',100),
('9/10/2019',2019,37,'9/8/2019','Sep',100),
('9/11/2019',2019,37,'9/8/2019','Sep',100),
('9/12/2019',2019,37,'9/8/2019','Sep',100),
('9/13/2019',2019,37,'9/8/2019','Sep',100),
('9/14/2019',2019,37,'9/8/2019','Sep',100),
('9/15/2019',2019,38,'9/15/2019','Sep',100),
('9/16/2019',2019,38,'9/15/2019','Sep',100),
('9/17/2019',2019,38,'9/15/2019','Sep',100),
('9/18/2019',2019,38,'9/15/2019','Sep',100),
('9/19/2019',2019,38,'9/15/2019','Sep',100),
('9/20/2019',2019,38,'9/15/2019','Sep',100),
('9/21/2019',2019,38,'9/15/2019','Sep',100),
('9/22/2019',2019,39,'9/22/2019','Sep',100),
('9/23/2019',2019,39,'9/22/2019','Sep',100),
('9/24/2019',2019,39,'9/22/2019','Sep',100),
('9/25/2019',2019,39,'9/22/2019','Sep',100),
('9/26/2019',2019,39,'9/22/2019','Sep',100),
('9/27/2019',2019,39,'9/22/2019','Sep',100),
('9/28/2019',2019,39,'9/22/2019','Sep',100),
('9/29/2019',2019,40,'9/29/2019','Oct',100),
('9/30/2019',2019,40,'9/29/2019','Oct',100),
('10/1/2019',2019,40,'9/29/2019','Oct',100),
('10/2/2019',2019,40,'9/29/2019','Oct',100),
('10/3/2019',2019,40,'9/29/2019','Oct',100),
('10/4/2019',2019,40,'9/29/2019','Oct',100),
('10/5/2019',2019,40,'9/29/2019','Oct',100),
('10/6/2019',2019,41,'10/6/2019','Oct',100),
('10/7/2019',2019,41,'10/6/2019','Oct',100),
('10/8/2019',2019,41,'10/6/2019','Oct',100),
('10/9/2019',2019,41,'10/6/2019','Oct',100),
('10/10/2019',2019,41,'10/6/2019','Oct',100),
('10/11/2019',2019,41,'10/6/2019','Oct',100),
('10/12/2019',2019,41,'10/6/2019','Oct',100),
('10/13/2019',2019,42,'10/13/2019','Oct',100),
('10/14/2019',2019,42,'10/13/2019','Oct',100),
('10/15/2019',2019,42,'10/13/2019','Oct',100),
('10/16/2019',2019,42,'10/13/2019','Oct',100),
('10/17/2019',2019,42,'10/13/2019','Oct',100),
('10/18/2019',2019,42,'10/13/2019','Oct',100),
('10/19/2019',2019,42,'10/13/2019','Oct',100),
('10/20/2019',2019,43,'10/20/2019','Oct',100),
('10/21/2019',2019,43,'10/20/2019','Oct',100),
('10/22/2019',2019,43,'10/20/2019','Oct',100),
('10/23/2019',2019,43,'10/20/2019','Oct',100),
('10/24/2019',2019,43,'10/20/2019','Oct',100),
('10/25/2019',2019,43,'10/20/2019','Oct',100),
('10/26/2019',2019,43,'10/20/2019','Oct',100),
('10/27/2019',2019,44,'10/27/2019','Nov',100),
('10/28/2019',2019,44,'10/27/2019','Nov',100),
('10/29/2019',2019,44,'10/27/2019','Nov',100),
('10/30/2019',2019,44,'10/27/2019','Nov',100),
('10/31/2019',2019,44,'10/27/2019','Nov',100),
('11/1/2019',2019,44,'10/27/2019','Nov',100),
('11/2/2019',2019,44,'10/27/2019','Nov',100),
('11/3/2019',2019,45,'11/3/2019','Nov',100),
('11/4/2019',2019,45,'11/3/2019','Nov',100),
('11/5/2019',2019,45,'11/3/2019','Nov',100),
('11/6/2019',2019,45,'11/3/2019','Nov',100),
('11/7/2019',2019,45,'11/3/2019','Nov',100),
('11/8/2019',2019,45,'11/3/2019','Nov',100),
('11/9/2019',2019,45,'11/3/2019','Nov',100),
('11/10/2019',2019,46,'11/10/2019','Nov',100),
('11/11/2019',2019,46,'11/10/2019','Nov',100),
('11/12/2019',2019,46,'11/10/2019','Nov',100),
('11/13/2019',2019,46,'11/10/2019','Nov',100),
('11/14/2019',2019,46,'11/10/2019','Nov',100),
('11/15/2019',2019,46,'11/10/2019','Nov',100),
('11/16/2019',2019,46,'11/10/2019','Nov',100),
('11/17/2019',2019,47,'11/17/2019','Nov',100),
('11/18/2019',2019,47,'11/17/2019','Nov',100),
('11/19/2019',2019,47,'11/17/2019','Nov',100),
('11/20/2019',2019,47,'11/17/2019','Nov',100),
('11/21/2019',2019,47,'11/17/2019','Nov',100),
('11/22/2019',2019,47,'11/17/2019','Nov',100),
('11/23/2019',2019,47,'11/17/2019','Nov',100),
('11/24/2019',2019,48,'11/24/2019','Dec',100),
('11/25/2019',2019,48,'11/24/2019','Dec',100),
('11/26/2019',2019,48,'11/24/2019','Dec',100),
('11/27/2019',2019,48,'11/24/2019','Dec',100),
('11/28/2019',2019,48,'11/24/2019','Dec',100),
('11/29/2019',2019,48,'11/24/2019','Dec',100),
('11/30/2019',2019,48,'11/24/2019','Dec',100),
('12/1/2019',2019,49,'12/1/2019','Dec',100),
('12/2/2019',2019,49,'12/1/2019','Dec',100),
('12/3/2019',2019,49,'12/1/2019','Dec',100),
('12/4/2019',2019,49,'12/1/2019','Dec',100),
('12/5/2019',2019,49,'12/1/2019','Dec',100),
('12/6/2019',2019,49,'12/1/2019','Dec',100),
('12/7/2019',2019,49,'12/1/2019','Dec',100),
('12/8/2019',2019,50,'12/8/2019','Dec',100),
('12/9/2019',2019,50,'12/8/2019','Dec',100),
('12/10/2019',2019,50,'12/8/2019','Dec',100),
('12/11/2019',2019,50,'12/8/2019','Dec',100),
('12/12/2019',2019,50,'12/8/2019','Dec',100),
('12/13/2019',2019,50,'12/8/2019','Dec',100),
('12/14/2019',2019,50,'12/8/2019','Dec',100),
('12/15/2019',2019,51,'12/15/2019','Dec',100),
('12/16/2019',2019,51,'12/15/2019','Dec',100),
('12/17/2019',2019,51,'12/15/2019','Dec',100),
('12/18/2019',2019,51,'12/15/2019','Dec',100),
('12/19/2019',2019,51,'12/15/2019','Dec',100),
('12/20/2019',2019,51,'12/15/2019','Dec',100),
('12/21/2019',2019,51,'12/15/2019','Dec',100),
('12/22/2019',2019,52,'12/22/2019','Dec',100),
('12/23/2019',2019,52,'12/22/2019','Dec',100),
('12/24/2019',2019,52,'12/22/2019','Dec',100),
('12/25/2019',2019,52,'12/22/2019','Dec',100),
('12/26/2019',2019,52,'12/22/2019','Dec',100),
('12/27/2019',2019,52,'12/22/2019','Dec',100),
('12/28/2019',2019,52,'12/22/2019','Dec',100),
('12/29/2019',2020,1,'12/29/2019','Jan',100),
('12/30/2019',2020,1,'12/29/2019','Jan',100),
('12/31/2019',2020,1,'12/29/2019','Jan',100),
('1/1/2020',2020,1,'12/29/2019','Jan',100),
('1/2/2020',2020,1,'12/29/2019','Jan',100),
('1/3/2020',2020,1,'12/29/2019','Jan',100),
('1/4/2020',2020,1,'12/29/2019','Jan',100),
('1/5/2020',2020,2,'1/5/2020','Jan',100),
('1/6/2020',2020,2,'1/5/2020','Jan',100),
('1/7/2020',2020,2,'1/5/2020','Jan',100),
('1/8/2020',2020,2,'1/5/2020','Jan',100),
('1/9/2020',2020,2,'1/5/2020','Jan',100),
('1/10/2020',2020,2,'1/5/2020','Jan',100),
('1/11/2020',2020,2,'1/5/2020','Jan',100),
('1/12/2020',2020,3,'1/12/2020','Jan',100),
('1/13/2020',2020,3,'1/12/2020','Jan',100),
('1/14/2020',2020,3,'1/12/2020','Jan',100),
('1/15/2020',2020,3,'1/12/2020','Jan',100),
('1/16/2020',2020,3,'1/12/2020','Jan',100),
('1/17/2020',2020,3,'1/12/2020','Jan',100),
('1/18/2020',2020,3,'1/12/2020','Jan',100),
('1/19/2020',2020,4,'1/19/2020','Jan',100),
('1/20/2020',2020,4,'1/19/2020','Jan',100),
('1/21/2020',2020,4,'1/19/2020','Jan',100),
('1/22/2020',2020,4,'1/19/2020','Jan',100),
('1/23/2020',2020,4,'1/19/2020','Jan',100),
('1/24/2020',2020,4,'1/19/2020','Jan',100),
('1/25/2020',2020,4,'1/19/2020','Jan',100),
('1/26/2020',2020,5,'1/26/2020','Feb',100),
('1/27/2020',2020,5,'1/26/2020','Feb',100),
('1/28/2020',2020,5,'1/26/2020','Feb',100),
('1/29/2020',2020,5,'1/26/2020','Feb',100),
('1/30/2020',2020,5,'1/26/2020','Feb',100),
('1/31/2020',2020,5,'1/26/2020','Feb',100),
('2/1/2020',2020,5,'1/26/2020','Feb',100),
('2/2/2020',2020,6,'2/2/2020','Feb',100),
('2/3/2020',2020,6,'2/3/2014','Feb',100),
('2/4/2020',2020,6,'2/3/2014','Feb',100),
('2/5/2020',2020,6,'2/3/2014','Feb',100),
('2/6/2020',2020,6,'2/3/2014','Feb',100),
('2/7/2020',2020,6,'2/3/2014','Feb',100),
('2/8/2020',2020,6,'2/3/2014','Feb',100),
('2/9/2020',2020,7,'2/9/2020','Feb',100),
('2/10/2020',2020,7,'2/10/2014','Feb',100),
('2/11/2020',2020,7,'2/10/2014','Feb',100),
('2/12/2020',2020,7,'2/10/2014','Feb',100),
('2/13/2020',2020,7,'2/10/2014','Feb',100),
('2/14/2020',2020,7,'2/10/2014','Feb',100),
('2/15/2020',2020,7,'2/10/2014','Feb',100),
('2/16/2020',2020,8,'2/16/2020','Feb',100),
('2/17/2020',2020,8,'2/16/2020','Feb',100),
('2/18/2020',2020,8,'2/16/2020','Feb',100),
('2/19/2020',2020,8,'2/16/2020','Feb',100),
('2/20/2020',2020,8,'2/16/2020','Feb',100),
('2/21/2020',2020,8,'2/16/2020','Feb',100),
('2/22/2020',2020,8,'2/16/2020','Feb',100),
('2/23/2020',2020,9,'2/23/2020','Mar',100),
('2/24/2020',2020,9,'2/23/2020','Mar',100),
('2/25/2020',2020,9,'2/23/2020','Mar',100),
('2/26/2020',2020,9,'2/23/2020','Mar',100),
('2/27/2020',2020,9,'2/23/2020','Mar',100),
('2/28/2020',2020,9,'2/23/2020','Mar',100),
('2/29/2020',2020,9,'2/23/2020','Mar',100),
('3/1/2020',2020,10,'3/1/2020','Mar',100),
('3/2/2020',2020,10,'3/1/2020','Mar',100),
('3/3/2020',2020,10,'3/1/2020','Mar',100),
('3/4/2020',2020,10,'3/1/2020','Mar',100),
('3/5/2020',2020,10,'3/1/2020','Mar',100),
('3/6/2020',2020,10,'3/1/2020','Mar',100),
('3/7/2020',2020,10,'3/1/2020','Mar',100),
('3/8/2020',2020,11,'3/8/2020','Mar',100),
('3/9/2020',2020,11,'3/8/2020','Mar',100),
('3/10/2020',2020,11,'3/8/2020','Mar',100),
('3/11/2020',2020,11,'3/8/2020','Mar',100),
('3/12/2020',2020,11,'3/8/2020','Mar',100),
('3/13/2020',2020,11,'3/8/2020','Mar',100),
('3/14/2020',2020,11,'3/8/2020','Mar',100),
('3/15/2020',2020,12,'3/15/2020','Mar',100),
('3/16/2020',2020,12,'3/15/2020','Mar',100),
('3/17/2020',2020,12,'3/15/2020','Mar',100),
('3/18/2020',2020,12,'3/15/2020','Mar',100),
('3/19/2020',2020,12,'3/15/2020','Mar',100),
('3/20/2020',2020,12,'3/15/2020','Mar',100),
('3/21/2020',2020,12,'3/15/2020','Mar',100),
('3/22/2020',2020,13,'3/22/2020','Mar',100),
('3/23/2020',2020,13,'3/22/2020','Mar',100),
('3/24/2020',2020,13,'3/22/2020','Mar',100),
('3/25/2020',2020,13,'3/22/2020','Mar',100),
('3/26/2020',2020,13,'3/22/2020','Mar',100),
('3/27/2020',2020,13,'3/22/2020','Mar',100),
('3/28/2020',2020,13,'3/22/2020','Mar',100),
('3/29/2020',2020,14,'3/29/2020','Apr',100),
('3/30/2020',2020,14,'3/29/2020','Apr',100),
('3/31/2020',2020,14,'3/29/2020','Apr',100),
('4/1/2020',2020,14,'3/29/2020','Apr',100),
('4/2/2020',2020,14,'3/29/2020','Apr',100),
('4/3/2020',2020,14,'3/29/2020','Apr',100),
('4/4/2020',2020,14,'3/29/2020','Apr',100),
('4/5/2020',2020,15,'4/5/2020','Apr',100),
('4/6/2020',2020,15,'4/5/2020','Apr',100),
('4/7/2020',2020,15,'4/5/2020','Apr',100),
('4/8/2020',2020,15,'4/5/2020','Apr',100),
('4/9/2020',2020,15,'4/5/2020','Apr',100),
('4/10/2020',2020,15,'4/5/2020','Apr',100),
('4/11/2020',2020,15,'4/5/2020','Apr',100),
('4/12/2020',2020,16,'4/12/2020','Apr',100),
('4/13/2020',2020,16,'4/12/2020','Apr',100),
('4/14/2020',2020,16,'4/12/2020','Apr',100),
('4/15/2020',2020,16,'4/12/2020','Apr',100),
('4/16/2020',2020,16,'4/12/2020','Apr',100),
('4/17/2020',2020,16,'4/12/2020','Apr',100),
('4/18/2020',2020,16,'4/12/2020','Apr',100),
('4/19/2020',2020,17,'4/19/2020','Apr',100),
('4/20/2020',2020,17,'4/19/2020','Apr',100),
('4/21/2020',2020,17,'4/19/2020','Apr',100),
('4/22/2020',2020,17,'4/19/2020','Apr',100),
('4/23/2020',2020,17,'4/19/2020','Apr',100),
('4/24/2020',2020,17,'4/19/2020','Apr',100),
('4/25/2020',2020,17,'4/19/2020','Apr',100),
('4/26/2020',2020,18,'4/26/2020','May',100),
('4/27/2020',2020,18,'4/26/2020','May',100),
('4/28/2020',2020,18,'4/26/2020','May',100),
('4/29/2020',2020,18,'4/26/2020','May',100),
('4/30/2020',2020,18,'4/26/2020','May',100),
('5/1/2020',2020,18,'4/26/2020','May',100),
('5/2/2020',2020,18,'4/26/2020','May',100),
('5/3/2020',2020,19,'5/3/2020','May',100),
('5/4/2020',2020,19,'5/3/2020','May',100),
('5/5/2020',2020,19,'5/3/2020','May',100),
('5/6/2020',2020,19,'5/3/2020','May',100),
('5/7/2020',2020,19,'5/3/2020','May',100),
('5/8/2020',2020,19,'5/3/2020','May',100),
('5/9/2020',2020,19,'5/3/2020','May',100),
('5/10/2020',2020,20,'5/10/2020','May',100),
('5/11/2020',2020,20,'5/10/2020','May',100),
('5/12/2020',2020,20,'5/10/2020','May',100),
('5/13/2020',2020,20,'5/10/2020','May',100),
('5/14/2020',2020,20,'5/10/2020','May',100),
('5/15/2020',2020,20,'5/10/2020','May',100),
('5/16/2020',2020,20,'5/10/2020','May',100),
('5/17/2020',2020,21,'5/17/2020','May',100),
('5/18/2020',2020,21,'5/17/2020','May',100),
('5/19/2020',2020,21,'5/17/2020','May',100),
('5/20/2020',2020,21,'5/17/2020','May',100),
('5/21/2020',2020,21,'5/17/2020','May',100),
('5/22/2020',2020,21,'5/17/2020','May',100),
('5/23/2020',2020,21,'5/17/2020','May',100),
('5/24/2020',2020,22,'5/24/2020','Jun',100),
('5/25/2020',2020,22,'5/24/2020','Jun',100),
('5/26/2020',2020,22,'5/24/2020','Jun',100),
('5/27/2020',2020,22,'5/24/2020','Jun',100),
('5/28/2020',2020,22,'5/24/2020','Jun',100),
('5/29/2020',2020,22,'5/24/2020','Jun',100),
('5/30/2020',2020,22,'5/24/2020','Jun',100),
('5/31/2020',2020,23,'5/31/2020','Jun',100),
('6/1/2020',2020,23,'5/31/2020','Jun',100),
('6/2/2020',2020,23,'5/31/2020','Jun',100),
('6/3/2020',2020,23,'5/31/2020','Jun',100),
('6/4/2020',2020,23,'5/31/2020','Jun',100),
('6/5/2020',2020,23,'5/31/2020','Jun',100),
('6/6/2020',2020,23,'5/31/2020','Jun',100),
('6/7/2020',2020,24,'6/7/2020','Jun',100),
('6/8/2020',2020,24,'6/7/2020','Jun',100),
('6/9/2020',2020,24,'6/7/2020','Jun',100),
('6/10/2020',2020,24,'6/7/2020','Jun',100),
('6/11/2020',2020,24,'6/7/2020','Jun',100),
('6/12/2020',2020,24,'6/7/2020','Jun',100),
('6/13/2020',2020,24,'6/7/2020','Jun',100),
('6/14/2020',2020,25,'6/14/2020','Jun',100),
('6/15/2020',2020,25,'6/14/2020','Jun',100),
('6/16/2020',2020,25,'6/14/2020','Jun',100),
('6/17/2020',2020,25,'6/14/2020','Jun',100),
('6/18/2020',2020,25,'6/14/2020','Jun',100),
('6/19/2020',2020,25,'6/14/2020','Jun',100),
('6/20/2020',2020,25,'6/14/2020','Jun',100),
('6/21/2020',2020,26,'6/21/2020','Jun',100),
('6/22/2020',2020,26,'6/21/2020','Jun',100),
('6/23/2020',2020,26,'6/21/2020','Jun',100),
('6/24/2020',2020,26,'6/21/2020','Jun',100),
('6/25/2020',2020,26,'6/21/2020','Jun',100),
('6/26/2020',2020,26,'6/21/2020','Jun',100),
('6/27/2020',2020,26,'6/21/2020','Jun',100),
('6/28/2020',2020,27,'6/28/2020','Jul',100),
('6/29/2020',2020,27,'6/28/2020','Jul',100),
('6/30/2020',2020,27,'6/28/2020','Jul',100),
('7/1/2020',2020,27,'6/28/2020','Jul',100),
('7/2/2020',2020,27,'6/28/2020','Jul',100),
('7/3/2020',2020,27,'6/28/2020','Jul',100),
('7/4/2020',2020,27,'6/28/2020','Jul',100),
('7/5/2020',2020,28,'7/5/2020','Jul',100),
('7/6/2020',2020,28,'7/5/2020','Jul',100),
('7/7/2020',2020,28,'7/5/2020','Jul',100),
('7/8/2020',2020,28,'7/5/2020','Jul',100),
('7/9/2020',2020,28,'7/5/2020','Jul',100),
('7/10/2020',2020,28,'7/5/2020','Jul',100),
('7/11/2020',2020,28,'7/5/2020','Jul',100),
('7/12/2020',2020,29,'7/12/2020','Jul',100),
('7/13/2020',2020,29,'7/12/2020','Jul',100),
('7/14/2020',2020,29,'7/12/2020','Jul',100),
('7/15/2020',2020,29,'7/12/2020','Jul',100),
('7/16/2020',2020,29,'7/12/2020','Jul',100),
('7/17/2020',2020,29,'7/12/2020','Jul',100),
('7/18/2020',2020,29,'7/12/2020','Jul',100),
('7/19/2020',2020,30,'7/19/2020','Jul',100),
('7/20/2020',2020,30,'7/19/2020','Jul',100),
('7/21/2020',2020,30,'7/19/2020','Jul',100),
('7/22/2020',2020,30,'7/19/2020','Jul',100),
('7/23/2020',2020,30,'7/19/2020','Jul',100),
('7/24/2020',2020,30,'7/19/2020','Jul',100),
('7/25/2020',2020,30,'7/19/2020','Jul',100),
('7/26/2020',2020,31,'7/26/2020','Aug',100),
('7/27/2020',2020,31,'7/26/2020','Aug',100),
('7/28/2020',2020,31,'7/26/2020','Aug',100),
('7/29/2020',2020,31,'7/26/2020','Aug',100),
('7/30/2020',2020,31,'7/26/2020','Aug',100),
('7/31/2020',2020,31,'7/26/2020','Aug',100),
('8/1/2020',2020,31,'7/26/2020','Aug',100),
('8/2/2020',2020,32,'8/2/2020','Aug',100),
('8/3/2020',2020,32,'8/2/2020','Aug',100),
('8/4/2020',2020,32,'8/2/2020','Aug',100),
('8/5/2020',2020,32,'8/2/2020','Aug',100),
('8/6/2020',2020,32,'8/2/2020','Aug',100),
('8/7/2020',2020,32,'8/2/2020','Aug',100),
('8/8/2020',2020,32,'8/2/2020','Aug',100),
('8/9/2020',2020,33,'8/9/2020','Aug',100),
('8/10/2020',2020,33,'8/9/2020','Aug',100),
('8/11/2020',2020,33,'8/9/2020','Aug',100),
('8/12/2020',2020,33,'8/9/2020','Aug',100),
('8/13/2020',2020,33,'8/9/2020','Aug',100),
('8/14/2020',2020,33,'8/9/2020','Aug',100),
('8/15/2020',2020,33,'8/9/2020','Aug',100),
('8/16/2020',2020,34,'8/16/2020','Aug',100),
('8/17/2020',2020,34,'8/16/2020','Aug',100),
('8/18/2020',2020,34,'8/16/2020','Aug',100),
('8/19/2020',2020,34,'8/16/2020','Aug',100),
('8/20/2020',2020,34,'8/16/2020','Aug',100),
('8/21/2020',2020,34,'8/16/2020','Aug',100),
('8/22/2020',2020,34,'8/16/2020','Aug',100),
('8/23/2020',2020,35,'8/23/2020','Sep',100),
('8/24/2020',2020,35,'8/23/2020','Sep',100),
('8/25/2020',2020,35,'8/23/2020','Sep',100),
('8/26/2020',2020,35,'8/23/2020','Sep',100),
('8/27/2020',2020,35,'8/23/2020','Sep',100),
('8/28/2020',2020,35,'8/23/2020','Sep',100),
('8/29/2020',2020,35,'8/23/2020','Sep',100),
('8/30/2020',2020,36,'8/30/2020','Sep',100),
('8/31/2020',2020,36,'8/30/2020','Sep',100),
('9/1/2020',2020,36,'8/30/2020','Sep',100),
('9/2/2020',2020,36,'8/30/2020','Sep',100),
('9/3/2020',2020,36,'8/30/2020','Sep',100),
('9/4/2020',2020,36,'8/30/2020','Sep',100),
('9/5/2020',2020,36,'8/30/2020','Sep',100),
('9/6/2020',2020,37,'9/6/2020','Sep',100),
('9/7/2020',2020,37,'9/6/2020','Sep',100),
('9/8/2020',2020,37,'9/6/2020','Sep',100),
('9/9/2020',2020,37,'9/6/2020','Sep',100),
('9/10/2020',2020,37,'9/6/2020','Sep',100),
('9/11/2020',2020,37,'9/6/2020','Sep',100),
('9/12/2020',2020,37,'9/6/2020','Sep',100),
('9/13/2020',2020,38,'9/13/2020','Sep',100),
('9/14/2020',2020,38,'9/13/2020','Sep',100),
('9/15/2020',2020,38,'9/13/2020','Sep',100),
('9/16/2020',2020,38,'9/13/2020','Sep',100),
('9/17/2020',2020,38,'9/13/2020','Sep',100),
('9/18/2020',2020,38,'9/13/2020','Sep',100),
('9/19/2020',2020,38,'9/13/2020','Sep',100),
('9/20/2020',2020,39,'9/20/2020','Sep',100),
('9/21/2020',2020,39,'9/20/2020','Sep',100),
('9/22/2020',2020,39,'9/20/2020','Sep',100),
('9/23/2020',2020,39,'9/20/2020','Sep',100),
('9/24/2020',2020,39,'9/20/2020','Sep',100),
('9/25/2020',2020,39,'9/20/2020','Sep',100),
('9/26/2020',2020,39,'9/20/2020','Sep',100),
('9/27/2020',2020,40,'9/27/2020','Oct',100),
('9/28/2020',2020,40,'9/27/2020','Oct',100),
('9/29/2020',2020,40,'9/27/2020','Oct',100),
('9/30/2020',2020,40,'9/27/2020','Oct',100),
('10/1/2020',2020,40,'9/27/2020','Oct',100),
('10/2/2020',2020,40,'9/27/2020','Oct',100),
('10/3/2020',2020,40,'9/27/2020','Oct',100),
('10/4/2020',2020,41,'10/4/2020','Oct',100),
('10/5/2020',2020,41,'10/4/2020','Oct',100),
('10/6/2020',2020,41,'10/4/2020','Oct',100),
('10/7/2020',2020,41,'10/4/2020','Oct',100),
('10/8/2020',2020,41,'10/4/2020','Oct',100),
('10/9/2020',2020,41,'10/4/2020','Oct',100),
('10/10/2020',2020,41,'10/4/2020','Oct',100),
('10/11/2020',2020,42,'10/11/2020','Oct',100),
('10/12/2020',2020,42,'10/11/2020','Oct',100),
('10/13/2020',2020,42,'10/11/2020','Oct',100),
('10/14/2020',2020,42,'10/11/2020','Oct',100),
('10/15/2020',2020,42,'10/11/2020','Oct',100),
('10/16/2020',2020,42,'10/11/2020','Oct',100),
('10/17/2020',2020,42,'10/11/2020','Oct',100),
('10/18/2020',2020,43,'10/18/2020','Oct',100),
('10/19/2020',2020,43,'10/18/2020','Oct',100),
('10/20/2020',2020,43,'10/18/2020','Oct',100),
('10/21/2020',2020,43,'10/18/2020','Oct',100),
('10/22/2020',2020,43,'10/18/2020','Oct',100),
('10/23/2020',2020,43,'10/18/2020','Oct',100),
('10/24/2020',2020,43,'10/18/2020','Oct',100),
('10/25/2020',2020,44,'10/25/2020','Nov',100),
('10/26/2020',2020,44,'10/25/2020','Nov',100),
('10/27/2020',2020,44,'10/25/2020','Nov',100),
('10/28/2020',2020,44,'10/25/2020','Nov',100),
('10/29/2020',2020,44,'10/25/2020','Nov',100),
('10/30/2020',2020,44,'10/25/2020','Nov',100),
('10/31/2020',2020,44,'10/25/2020','Nov',100),
('11/1/2020',2020,45,'11/1/2020','Nov',100),
('11/2/2020',2020,45,'11/1/2020','Nov',100),
('11/3/2020',2020,45,'11/1/2020','Nov',100),
('11/4/2020',2020,45,'11/1/2020','Nov',100),
('11/5/2020',2020,45,'11/1/2020','Nov',100),
('11/6/2020',2020,45,'11/1/2020','Nov',100),
('11/7/2020',2020,45,'11/1/2020','Nov',100),
('11/8/2020',2020,46,'11/8/2020','Nov',100),
('11/9/2020',2020,46,'11/8/2020','Nov',100),
('11/10/2020',2020,46,'11/8/2020','Nov',100),
('11/11/2020',2020,46,'11/8/2020','Nov',100),
('11/12/2020',2020,46,'11/8/2020','Nov',100),
('11/13/2020',2020,46,'11/8/2020','Nov',100),
('11/14/2020',2020,46,'11/8/2020','Nov',100),
('11/15/2020',2020,47,'11/15/2020','Nov',100),
('11/16/2020',2020,47,'11/15/2020','Nov',100),
('11/17/2020',2020,47,'11/15/2020','Nov',100),
('11/18/2020',2020,47,'11/15/2020','Nov',100),
('11/19/2020',2020,47,'11/15/2020','Nov',100),
('11/20/2020',2020,47,'11/15/2020','Nov',100),
('11/21/2020',2020,47,'11/15/2020','Nov',100),
('11/22/2020',2020,48,'11/22/2020','Nov',100),
('11/23/2020',2020,48,'11/22/2020','Nov',100),
('11/24/2020',2020,48,'11/22/2020','Nov',100),
('11/25/2020',2020,48,'11/22/2020','Nov',100),
('11/26/2020',2020,48,'11/22/2020','Nov',100),
('11/27/2020',2020,48,'11/22/2020','Nov',100),
('11/28/2020',2020,48,'11/22/2020','Nov',100),
('11/29/2020',2020,49,'11/29/2020','Dec',100),
('11/30/2020',2020,49,'11/29/2020','Dec',100),
('12/1/2020',2020,49,'11/29/2020','Dec',100),
('12/2/2020',2020,49,'11/29/2020','Dec',100),
('12/3/2020',2020,49,'11/29/2020','Dec',100),
('12/4/2020',2020,49,'11/29/2020','Dec',100),
('12/5/2020',2020,49,'11/29/2020','Dec',100),
('12/6/2020',2020,50,'12/6/2020','Dec',100),
('12/7/2020',2020,50,'12/6/2020','Dec',100),
('12/8/2020',2020,50,'12/6/2020','Dec',100),
('12/9/2020',2020,50,'12/6/2020','Dec',100),
('12/10/2020',2020,50,'12/6/2020','Dec',100),
('12/11/2020',2020,50,'12/6/2020','Dec',100),
('12/12/2020',2020,50,'12/6/2020','Dec',100),
('12/13/2020',2020,51,'12/13/2020','Dec',100),
('12/14/2020',2020,51,'12/13/2020','Dec',100),
('12/15/2020',2020,51,'12/13/2020','Dec',100),
('12/16/2020',2020,51,'12/13/2020','Dec',100),
('12/17/2020',2020,51,'12/13/2020','Dec',100),
('12/18/2020',2020,51,'12/13/2020','Dec',100),
('12/19/2020',2020,51,'12/13/2020','Dec',100),
('12/20/2020',2020,52,'12/20/2020','Dec',100),
('12/21/2020',2020,52,'12/20/2020','Dec',100),
('12/22/2020',2020,52,'12/20/2020','Dec',100),
('12/23/2020',2020,52,'12/20/2020','Dec',100),
('12/24/2020',2020,52,'12/20/2020','Dec',100),
('12/25/2020',2020,52,'12/20/2020','Dec',100),
('12/26/2020',2020,52,'12/20/2020','Dec',100),
('12/27/2020',2020,53,'12/27/2020','Dec',100),
('12/28/2020',2020,53,'12/27/2020','Dec',100),
('12/29/2020',2020,53,'12/27/2020','Dec',100),
('12/30/2020',2020,53,'12/27/2020','Dec',100),
('12/31/2020',2020,53,'12/27/2020','Dec',100),
('1/1/2021',2020,53,'12/27/2020','Dec',100),
('1/2/2021',2020,53,'12/27/2020','Dec',100);



    """


    engine = create_engine(post)
    conn = engine.connect()
    conn.execute(text(query).execution_options(autocommit=True))
    conn.close()

    print('created budget combined spot table: ')



def gsheet_budget_update(active_client):
    #This is the function that updates the 2019 gsheet budgets, there is internal threading in this, so please do not run this
    #in parrallel with any other functions, as that would likely lead to a memory error
    try:
        df_list = []
        engine = create_engine(post)
        if active_client == 1:
            urls = pd.read_sql("""SELECT url_of_budget, cast(adjusted_client_id as int), client_name, synced_at FROM gsheet_budgets.client_urls where active_client = 1""",engine)
        else:
            urls = pd.read_sql("""SELECT url_of_budget, cast(adjusted_client_id as int), client_name, synced_at FROM gsheet_budgets.client_urls""",engine)


        year = '2019'
        print('getting names')
        names_df = pd.read_sql("""SELECT vendor_name,adjusted_show_name,estimate_id,estimate_name,cast(adjusted_client_id as int),vendor_id FROM (
                WITH



                  new_clients AS

                (select
                temp.adjusted_client_name,
                temp.new_client_flag,
                temp.top_client_flag,
                temp.cli_list,
                temp.year,
                temp.over_5M_flag,
                temp.over_1M_flag,
                temp.over_500K_flag,
                temp.under_500K_flag,
                temp.rev_flag
                --cli.adjusted_client_name,
                --cli.sbms_client_id as client_id
                from
                (
                      SELECT
                      --client_id,
                      adjusted_client_name,
                      year,
                      CASE WHEN row_num = 1 THEN TRUE ELSE FALSE END AS new_client_flag,


                      row_num_gross as cli_list,
                      case
                      when row_num_gross = 1 Then 'Top 1'
                      when row_num_gross <= 5 Then 'Top 2-5'
                      when row_num_gross <= 10 Then 'Top 6-10'
                      when row_num_gross <= 20 Then 'Top 11-20'
                      when row_num_gross > 20 Then 'Outside 20'
                      else 'Other'
                      end as top_client_flag ,



                      CASE WHEN total_gross_cost > 5000000 THEN TRUE ELSE FALSE END AS over_5M_flag,
                      CASE WHEN total_gross_cost > 1000000 THEN TRUE ELSE FALSE END AS over_1M_flag,
                      CASE WHEN total_gross_cost > 500000 THEN TRUE ELSE FALSE END AS over_500K_flag,
                      CASE WHEN total_gross_cost < 500000 THEN TRUE ELSE FALSE END AS under_500K_flag,
                      case
                      when total_gross_cost < 500000 Then 'UNDER_500K'
                      when total_gross_cost >= 500000 and total_gross_cost < 1000000 then '500K-1M'
                      when total_gross_cost >= 1000000 and total_gross_cost < 5000000 then '1M-5M'
                      when total_gross_cost >= 5000000 and total_gross_cost < 10000000 then '5M-10M'
                      when total_gross_cost >= 10000000  then '>10M'
                      else 'Other'
                      end as rev_flag


                      FROM
                (
                select
                cliYear.adjusted_client_name,
                cliYear.year,
                cliYear.total_gross_cost,
                --cliYear.client_id,
                ROW_NUMBER() OVER(PARTITION BY cliYear.adjusted_client_name ORDER BY cliYear.year ASC) AS row_num,
                ROW_NUMBER() OVER(PARTITION BY cliYear.year ORDER BY cliYear.total_gross_cost DESC) AS row_num_gross
                from (
                SELECT

                cli.adjusted_client_name as adjusted_client_name,
                TO_CHAR(rd.broadcast_date, 'YYYY') AS year,
                --rd.client_id,
                SUM(rd.total_gross_cost) AS total_gross_cost,
                ROW_NUMBER() OVER(PARTITION BY isnull(cli.adjusted_client_name) ORDER BY TO_CHAR(rd.broadcast_date, 'YYYY') ASC) AS row_num

                FROM public.rawdata_non_invoice_2014to2018 rd

                left join (

                select
                sbms_client_id,
                sbms_product_id,
                adjusted_client_name

                from production.gsheet.client_lkp
                group by
                sbms_client_id,
                sbms_product_id,
                adjusted_client_name


                ) cli

                on cli.sbms_client_id = rd.client_id
                and cli.sbms_product_id = rd.product_id



                group by
                cli.adjusted_client_name,
                TO_CHAR(rd.broadcast_date, 'YYYY')


                ) cliYear

                GROUP BY 1, 2, 3

                )

                ) temp

                group by
                temp.adjusted_client_name,
                temp.new_client_flag,
                temp.top_client_flag,
                temp.cli_list,
                temp.year,
                temp.over_5M_flag,
                temp.over_1M_flag,
                temp.over_500K_flag,
                temp.under_500K_flag,
                temp.rev_flag


                )


                  SELECT
                        rd.week_number,
                    rd.number_of_spots,
                    rd.station_id,
                    rd.vendor_id,
                    rd.CALL_LETTERS,
                    rd.station_name,


                    isnull(us.station_name, us1.station_name) AS gsheet_station_name,
                    CASE WHEN snm.adjusted_show_name IS NOT NULL THEN snm.adjusted_show_name ELSE rd.station_name END AS adjusted_station_name,
                    rd.ESTIMATE_ID,
                    rd.estimate_name,
                    rd.FLIGHT_START_DATE,
                    rd.FLIGHT_END_DATE,
                    rd.alternate_billing_code,
                    rd.billing_code,
                    rd.product_id,
                    rd.product_name,
                    rd.client_id,
                    rd.free_spot,
                    rd.paid_spot,
                    rd.talent_fee,
                    cl.sbms_client_id AS client_id_duplicate_check,
                    rd.client_name AS SBMS_client_name,
                    cl.latitude,
                    cl.longitude,
                    cl.adjusted_client_name AS gsheet_client_name,
                    ushow.master_vendor_id as master_vendor_id,
                    cl.state as client_state,
                    CASE WHEN cl.adjusted_client_name IS NOT NULL AND cl.adjusted_client_name <> '' THEN cl.adjusted_client_name ELSE rd.client_name END AS client_name,
                    rd.spot_cost,
                    rd.total_gross_cost,
                    rd.total_net_cost,
                    rd.ace_cost AS total_ace_cost,
                    vendor.direct_bill_code,
                    CASE WHEN adjace.estimate_id IS NULL THEN rd.ace_cost ELSE rd.spot_cost * rd.number_of_spots * adjace.adjusted_ace END AS adjusted_ACE_cost,
                    adjace.estimate_id||'-'||adjace.estimate_date AS estimate_date_adjusted_ace,
                    snm.vendor_id||'-'||snm.station_id AS show_list_unique_id,
                    rd.week_beginning_date,
                    max(rd.week_beginning_date) over (partition by cl.adjusted_client_name) as max_client_date,



                    start_date.first_year,
                    start_date.first_month,
                    start_date.first_quarter,
                    start_date.first_broadcast_date,
                    start_date.last_broadcast_date,

                    start_date_cli.first_year as first_year_cli,
                    start_date_cli.first_month as first_month_cli,
                    start_date_cli.first_quarter as first_quarter_cli,
                    start_date_cli.first_air_date as first_air_date_cli,
                    start_date_cli.last_air_date as last_air_date_cli,
                    start_date_cli.first_broadcast_date as first_broadcast_date_cli,
                    start_date_cli.last_broadcast_date as last_broadcast_date_cli,

                    case when date_part('year', rd.broadcast_date) <= start_date.first_year then 1 else 0 end
                    as new_show_ind,
                    case when date_part('year', rd.broadcast_date) <= start_date.first_year then 'New Show' else 'Existing Show' end
                    as new_show,
                    rd.broadcast_date,
                    date_part('month', rd.broadcast_date) as broadcast_month_sbms,

                    case
                    when date_part('month', rd.broadcast_date) = 1 then 'Jan'
                    when date_part('month', rd.broadcast_date) = 2 then 'Feb'
                    when date_part('month', rd.broadcast_date) = 3 then 'Mar'
                    when date_part('month', rd.broadcast_date) = 4 then 'Apr'
                    when date_part('month', rd.broadcast_date) = 5 then 'May'
                    when date_part('month', rd.broadcast_date) = 6 then 'Jun'
                    when date_part('month', rd.broadcast_date) = 7 then 'Jul'
                    when date_part('month', rd.broadcast_date) = 8 then 'Aug'

                    when date_part('month', rd.broadcast_date) = 9 then 'Sep'
                    when date_part('month', rd.broadcast_date) = 10 then 'Oct'
                    when date_part('month', rd.broadcast_date) = 11 then 'Nov'
                    when date_part('month', rd.broadcast_date) = 12 then 'Dec'
                    else 'Unclassified' end as broadcast_month_string
                    ,

                    case
                    when date_part('month', rd.broadcast_date) in (1,2,3) then 1
                    when date_part('month', rd.broadcast_date) in (4,5,6) then 2
                    when date_part('month', rd.broadcast_date) in (7,8,9) then 3
                    when date_part('month', rd.broadcast_date) in (10,11,12) then 4
                    else 99 end

                    as broadcast_quarter_sbms,

                    rd.market_name,
                    cattr.client_logo,
                    cattr.churn_classification,
                    isnull(cattr.business_type, 'Unclassified') as business_type,
                    isnull(cattr.gender_skew, 'Unclassified') as gender_skew,
                    isnull(cattr.start_year, -999) as start_year,

                    lmn.market_name AS most_recent_market_name,
                    amn.market_name AS market_name_duplicate_check,
                    CASE WHEN ls.media_type IS NULL THEN
                    CASE WHEN snm.adjusted_market_name IS NOT NULL THEN snm.adjusted_market_name ELSE amn.adjusted_market_name END
                    ELSE ls.market_name END AS adjusted_market_name,

                    case when rd.vendor_id > 250000 and rd.vendor_id < 300000 then 'Local Radio'
                    else

                    CASE WHEN ls.media_type IS NOT NULL THEN ls.media_type ELSE
                        CASE WHEN snm.media_type IS NULL THEN amn.media_type ELSE snm.media_type END
                    END
                    end

                    AS media_type,
                    --snm.genre AS genre,
                    CASE WHEN ls.market_name IS NOT NULL THEN 'local' ELSE
                    CASE WHEN snm.market_name IS NOT NULL THEN 'non-local' ELSE 'missing' END
                    END AS local_non_local_flag,
                    isnull(vend.vendor_name, rd.station_name) as vendor_name,
                    isnull(us2.adjusted_show_name, rd.station_name) as adjusted_show_name,
                    nc.new_client_flag,
                    isnull(nc.top_client_flag, 'Outside 20') as top_client_flag,
                    isnull(nc.cli_list, 99) as top_cli_list,
                    nc.over_5M_flag,
                    nc.over_1M_flag,
                    nc.over_500K_flag,
                    nc.under_500K_flag,
                    adjCli.adjusted_client_id,
                    nc.adjusted_client_name as nc_adjusted_client_name,
                    isnull(nc.rev_flag, 'Other') as rev_flag,
                    --nc.rev_flag,
                    sbms_cli.client_city,
                    sbms_cli.client_state as client_state_sbms,
                    sbms_cli.client_zip,
                    --isnull(isnull(isnull(allGenre.genre_arm, strat2.genre_arm, us1.genre_arm), strat.format), us.genre_arm) AS genre_arm,
                    --isnull(isnull(isnull(allGenre.genre_itunes, strat2.genre_arm, us1.genre_iTunes), strat.format), us.genre_iTunes) AS gsheet_genre_iTunes,


                    isnull(isnull(isnull(strat2.genre_arm, us1.genre_arm), strat.format), us.genre_arm) AS genre_arm,

                    isnull(us1.subgenre_arm, us.subgenre_arm) AS subgenre_arm,
                    isnull(us1.itunes_url, us.itunes_url) AS itunes_url,
                    isnull(isnull(isnull(strat2.genre_arm, us1.genre_iTunes), strat.format), us.genre_iTunes) AS gsheet_genre_iTunes,


                    mark.market_name as sbms_market_vendor,

                    --bact.active_inactive,

                    case
                    when
                    bact.master_vendor_id is null
                    and bact.client_id is null
                    and bact.active_inactive is null then 'Mismatch or Missing From Budget'
                    when
                    bact.master_vendor_id is not null
                    and bact.client_id is not null
                    and bact.active_inactive is null then 'Blank Budget'

                    when
                    bact.master_vendor_id is not null
                    and bact.client_id is not null
                    and bact.active_inactive is not null then bact.active_inactive
                    else 'Other' end
                    as active_inactive,

                    --bhost.host_name,
                    case
                    when
                    bhost.master_vendor_id is null
                    and bhost.client_id is null
                    and bhost.host_name is null then 'Mismatch or Missing From Budget'
                    when
                    bhost.master_vendor_id is not null
                    and bhost.client_id is not null
                    and bhost.host_name is null then 'Blank Budget'

                    when
                    bhost.master_vendor_id is not null
                    and bhost.client_id is not null
                    and bhost.host_name is not null then bhost.host_name
                    else 'Other' end
                    as host_name,

                   -- bcode.code,

                    case
                    when
                    bcode.master_vendor_id is null
                    and bcode.client_id is null
                    and bcode.code is null then 'Mismatch or Missing From Budget'
                    when
                    bcode.master_vendor_id is not null
                    and bcode.client_id is not null
                    and bcode.code is null then 'Blank Budget'

                    when
                    bcode.master_vendor_id is not null
                    and bcode.client_id is not null
                    and bcode.code is not null then bcode.code
                    else 'Other' end
                    as code,

                    --bcpm.cpm,
                    case
                    when
                    bcpm.master_vendor_id is null
                    and bcpm.client_id is null
                    and bcpm.cpm is null then -99
                    when
                    bcpm.master_vendor_id is not null
                    and bcpm.client_id is not null
                    and bcpm.cpm is null then -99

                    when
                    bcpm.master_vendor_id is not null
                    and bcpm.client_id is not null
                    and bcpm.cpm is not null then bcpm.cpm
                    else -99 end
                    as cpm,

                    --bdown.downloads,


                    case
                    when
                    bdown.master_vendor_id is null
                    and bdown.client_id is null
                    and bdown.downloads is null then -99
                    when
                    bdown.master_vendor_id is not null
                    and bdown.client_id is not null
                    and bdown.downloads is null then -99

                    when
                    bdown.master_vendor_id is not null
                    and bdown.client_id is not null
                    and bdown.downloads is not null then bdown.downloads
                    else -99 end
                    as downloads,

                    case
                    when
                    bplace.master_vendor_id is null
                    and bplace.client_id is null
                    and bplace.spot_placement is null then 'Mismatch or Missing From Budget'
                    when
                    bplace.master_vendor_id is not null
                    and bplace.client_id is not null
                    and bplace.spot_placement is null then 'Blank Budget'

                    when
                    bplace.master_vendor_id is not null
                    and bplace.client_id is not null
                    and bplace.spot_placement is not null then bplace.spot_placement
                    else 'Other' end
                    as spot_placement,


                    --case
                    --when position('05' in bslen.spot_length) > 0 then ':05'
                    --when position('15' in bslen.spot_length) > 0 then ':15'
                    --when position('30' in bslen.spot_length) > 0 then ':30'
                    --when position('45' in bslen.spot_length) > 0 then ':45'
                    --when position('60' in bslen.spot_length) > 0 then ':60'
                    --when position('90' in bslen.spot_length) > 0 then ':90'
                    --when position('120' in bslen.spot_length) > 0 then ':120'
                    --when position('VARIOUS' in upper(bslen.spot_length)) > 0 then 'Various'
                    --else 'Null' end as spot_length,
                   -- bslen.spot_length,
                    case
                    when
                    bslen.master_vendor_id is null
                    and bslen.client_id is null
                    and bslen.spot_length is null then 'Mismatch or Missing From Budget'
                    when
                    bslen.master_vendor_id is not null
                    and bslen.client_id is not null
                    and bslen.spot_length is null then 'Blank Budget'

                    when
                    bslen.master_vendor_id is not null
                    and bslen.client_id is not null
                    and bslen.spot_length is not null then bslen.spot_length
                    else 'Other' end
                    as spot_length,



                  --  bslen.spot_length,
                    --bstyp.spot_type,

                    --case
                    --when position('BAKED' in upper(bstyp.spot_type)) > 0 then 'Baked In'
                    --when position('DI ' in upper(bstyp.spot_type)) > 0 then 'DI'
                    --when position('EMBE' in upper(bstyp.spot_type)) > 0 then 'Embedded'
                    --when position('LIVE' in upper(bstyp.spot_type)) > 0 then 'Live'
                    --when position('DI ' in upper(bstyp.spot_type)) > 0 then 'DI'
                    --when position('ROS' in upper(bstyp.spot_type)) > 0 then 'ROS'
                    --when position('RECO' in upper(bstyp.spot_type)) > 0 then 'Recorded'
                    --when position('VARIOU' in upper(bstyp.spot_type)) > 0 then 'Various'

                    --else 'Null' end as spot_type,

                    case
                    when
                    bstyp.master_vendor_id is null
                    and bstyp.client_id is null
                    and bstyp.spot_type is null then 'Mismatch or Missing From Budget'
                    when
                    bstyp.master_vendor_id is not null
                    and bstyp.client_id is not null
                    and bstyp.spot_type is null then 'Blank Budget'

                    when
                    bstyp.master_vendor_id is not null
                    and bstyp.client_id is not null
                    and bstyp.spot_type is not null then bstyp.spot_type
                    else 'Other' end
                    as spot_type,

                   -- bstyp.spot_type,
                  case
                    when
                    bstat.master_vendor_id is null
                    and bstat.client_id is null
                    and bstat.status is null then 'Mismatch or Missing From Budget'
                    when
                    bstat.master_vendor_id is not null
                    and bstat.client_id is not null
                    and bstat.status is null then 'Blank Budget'

                    when
                    bstat.master_vendor_id is not null
                    and bstat.client_id is not null
                    and bstat.status is not null then bstat.status
                    else 'Other' end
                    as status,



                      case
                    when
                    bgrate.master_vendor_id is null
                    and bgrate.client_id is null
                    and bgrate.gross_rate is null then -99
                    when
                    bgrate.master_vendor_id is not null
                    and bgrate.client_id is not null
                    and bgrate.gross_rate is null then -99

                    when
                    bgrate.master_vendor_id is not null
                    and bgrate.client_id is not null
                    and bgrate.gross_rate is not null then bgrate.gross_rate
                    else -99 end
                    as gross_rate
                    --,
                    --isnull(own.owner_name, vend.ownership) as owner

                    --bstat.status



                    FROM matt_testing.rawdata_non_invoice_2014to2018_cond rd

        						left join (

        					select
        					spot_id, vendor_id from production.public.rawdata_non_invoice_2014to2018
        					group by spot_id, vendor_id
        					) rd_init

        					on rd_init.spot_id = rd.spot_id


                left join gsheet.client_lkp adjCli
                on adjCli.sbms_client_id = rd.client_id
                and adjCli.sbms_product_id = rd.product_id


                LEFT JOIN new_clients nc
                on nc.adjusted_client_name = adjCli.adjusted_client_name AND nc.year = TO_CHAR(rd.broadcast_date, 'YYYY')


                --ON nc.client_id = rd.client_id AND nc.year = TO_CHAR(rd.broadcast_date, 'YYYY')
                LEFT JOIN gsheet.market_info__show_list snm ON rd.station_id = snm.station_id
                LEFT JOIN public.local_stations ls ON rd.station_id = ls.station_id

                left join production.sbms.vendor vendor
                on vendor.vendor_id = rd_init.vendor_id

        				LEFT JOIN gsheet.client_lkp cl
                ON cl.SBMS_product_id = rd.product_id
                and cl.sbms_client_id = rd.client_id

                LEFT JOIN public.most_recent_market_name lmn ON lmn.vendor_id = rd_init.vendor_id
                LEFT JOIN public.adjusted_market_name amn ON amn.market_name = lmn.market_name
                LEFT JOIN gsheet.ace_adjustment adjace ON adjace.estimate_id = rd.estimate_id AND adjace.estimate_date = rd.broadcast_date
                left join production.sbms.vendor vend on vend.vendor_id = rd_init.vendor_id
                --left join production.sbms.owner own on vend.owner_id = own.owner_id
                left join production.sbms.market mark on vend.market_id = mark.market_id

                left join production.sbms.client sbms_cli on sbms_cli.client_id = rd.client_id
                left join production.sbms.station stat on stat.station_id = rd.station_id
                left join production.sbms.strata_stations strat on strat.station_name = rd.call_letters ||'-'|| stat.band_code
                left join production.gsheet.small_radio_format strat2 on strat2.station_band = rd.call_letters ||'-'|| stat.band_code


                left join production.gsheet.unique_shows ushow
                on ushow.vendor_id = rd_init.vendor_id


                left join (select

                vendor_id,
                date_part('year', min(broadcast_date)) as first_year,
                date_part('month', min(broadcast_date)) as first_month,
                ceil(date_part('month', min(broadcast_date))/3) as first_quarter,
                min(broadcast_date) as first_broadcast_date,
                max(broadcast_date) as last_broadcast_date,
                min(week_beginning_date) as first_air_date,
                max(week_beginning_Date) as last_air_date


                from production.public.rawdata_non_invoice_2014to2018

                group by
                vendor_id

                ) start_date
                on start_date.vendor_id = rd_init.vendor_id



                left join (select

                first_show.vendor_id,
                first_show.product_id,
                first_show.client_id,
                first_show.first_year,
                first_show.first_month,

                first_show.first_quarter,
                first_show.first_broadcast_date,
                first_show.last_broadcast_date,
                first_show.first_air_date,
                first_show.last_air_date

                from (select

                vendor_id,
                product_id,
                client_id,

                date_part('year', min(broadcast_date) over (partition by vendor_id, client_id, product_id)) as first_year,
                date_part('month', min(broadcast_date) over (partition by vendor_id, client_id, product_id)) as first_month,
                ceil(date_part('month', min(broadcast_date) over (partition by vendor_id, client_id, product_id) )/3) as first_quarter,
                min(broadcast_date) over (partition by vendor_id, client_id, product_id) as first_broadcast_date,
                max(broadcast_date) over (partition by vendor_id, client_id, product_id) as last_broadcast_date,
                min(week_beginning_date) over (partition by vendor_id, client_id, product_id) as first_air_date,
                max(week_beginning_Date) over (partition by vendor_id, client_id, product_id) as last_air_date


                from production.public.rawdata_non_invoice_2014to2018

                --where client_id = 621
                --and vendor_id = 9050
                group by
                vendor_id,
                product_id,
                client_id
                ,
                broadcast_date
                ,
                week_beginning_date

                order by

                vendor_id,
                product_id,
                client_id
                ,
                broadcast_date,
                week_beginning_date

                ) first_show

                group by
                first_show.vendor_id,
                first_show.product_id,
                first_show.client_id,
                first_show.first_year,
                first_show.first_month,

                first_show.first_quarter,
                first_show.first_broadcast_date,
                first_show.last_broadcast_date,
                first_show.first_air_date,
                first_show.last_air_date

                ) start_date_cli

                on start_date_cli.vendor_id = rd_init.vendor_id
                and start_date_cli.product_id = rd.product_id
                and start_date_cli.client_id = rd.client_id

                left join production.budget_data.budget_active_inactive bact
                --on ushow.master_vendor_id = bact.master_vendor_id
                on rd.vendor_id = bact.master_vendor_id


                and cl.adjusted_client_id = bact.client_id

                left join production.budget_data.budget_host_name bhost
                on rd.vendor_id = bhost.master_vendor_id
                and cl.adjusted_client_id = bhost.client_id

                left join production.budget_data.budget_code bcode
                on rd.vendor_id = bcode.master_vendor_id
                and cl.adjusted_client_id = bcode.client_id


                left join production.budget_data.budget_cpm bcpm
                on rd.vendor_id = bcpm.master_vendor_id
                and cl.adjusted_client_id = bcpm.client_id



                left join production.budget_data.budget_downloads bdown
                on rd.vendor_id = bdown.master_vendor_id
                and cl.adjusted_client_id = bdown.client_id

                left join production.budget_data.budget_spot_length bslen
                on rd.vendor_id = bslen.master_vendor_id
                and cl.adjusted_client_id = bslen.client_id


                left join production.budget_data.budget_spot_type bstyp
                on rd.vendor_id = bstyp.master_vendor_id
                and cl.adjusted_client_id = bstyp.client_id


                left join production.budget_data.budget_spot_placement bplace
                on rd.vendor_id = bplace.master_vendor_id
                and cl.adjusted_client_id = bplace.client_id


                left join production.budget_data.budget_status bstat
                on rd.vendor_id = bstat.master_vendor_id
                and cl.adjusted_client_id = bstat.client_id

                left join production.budget_data.budget_gross_rate bgrate
                on rd.vendor_id = bgrate.master_vendor_id
                and cl.adjusted_client_id = bgrate.client_id


                --left join production.gsheet.all_genre_classification allGenre
                --on allGenre.vendor_id = rd.vendor_id
                --left join production.budget_data.budget_daypart bday
                --on rd.vendor_id = bstat.master_vendor_id
                --and rd.client_id = bstat.client_id


                left join production.client_order_data.client_attributes cattr
                on cattr.adjusted_client_id = cl.adjusted_client_id

                    LEFT JOIN (

                    select

                    ushow3.vendor_id,
                    ushow3.station_name,
                    ushow3.subgenre_arm,
                    ushow3.itunes_url,
                    ushow3.genre_arm,
                    ushow3.genre_itunes

                    from (
                    select
                    ushow2.vendor_id,
                    ushow2.station_name,
                    ushow2.subgenre_arm,
                    ushow2.itunes_url,
                    ushow2.genre_arm,
                    ushow2.genre_itunes,
                    ushow2.rowNum,
                    max(ushow2.rowNum) over (partition by ushow2.vendor_id) as maxRow

                    from
                    (SELECT
                    ushow1.vendor_id,
                    ushow1.station_name,
                    ushow1.subgenre_arm,
                    ushow1.itunes_url,
                    isnull(ushow1.genre_arm, sstat.format) as genre_arm,
                    isnull(ushow1.genre_itunes, sstat.format) as genre_itunes,

                    ROW_NUMBER() over (partition by ushow1.vendor_id order by ushow1.station_name) as rowNum
                    FROM production.gsheet.unique_shows_loc ushow1
                    left join production.sbms.strata_stations sstat
                    on sstat.station_name = ushow1.station_name
                    where ushow1.vendor_id <> 0

                    )
                    ushow2

                    group by

                    ushow2.vendor_id,
                    ushow2.station_name,
                    ushow2.subgenre_arm,
                    ushow2.itunes_url,
                    ushow2.genre_arm,
                    ushow2.genre_itunes,
                    ushow2.rowNum

                    ) ushow3

                    where ushow3.rowNum = ushow3.maxRow

                    group by ushow3.vendor_id,
                    ushow3.station_name,
                    ushow3.subgenre_arm,
                    ushow3.itunes_url,
                    ushow3.genre_arm,
                    ushow3.genre_itunes

                    ) us
                    on us.vendor_id = rd.vendor_id

                    LEFT JOIN (

                    SELECT
                    ushow.*
                    FROM production.gsheet.unique_shows ushow
                    where ushow.vendor_id = 0


                    ) us1
                    on us1.station_name = rd.station_name

                    left join
                    (select

                    ushow.vendor_id,
                    ushow.adjusted_show_name
                    from production.gsheet.unique_shows ushow
                    where ushow.vendor_id <> 0

                    ) us2
                    on us2.vendor_id = rd.vendor_id



                    WHERE
                    ((cl.adjusted_client_name IS not NULL
                and cl.adjusted_client_name NOT LIKE '%%EXCLUDE%%'
                and upper(cl.adjusted_client_name) NOT LIKE '%%AT&T (NON-MEDIA/ARMS)%%'
                )
                or
                (cl.adjusted_client_name IS NULL))
                and rd.estimate_id <> 99999999
                    ORDER BY client_name, week_beginning_date)
                    WHERE estimate_name like '%%""" + year + """%%'
                    GROUP BY vendor_name,adjusted_show_name,estimate_id,estimate_name,adjusted_client_id,vendor_id""",engine)
        print('done with names')
        names_df['formatted_smbs'] = names_df['vendor_name'].apply(lambda x: format_strings(x))
        #names_df['formatted_adjusted'] = names_df['adjusted_show_name'].apply(lambda x: format_strings(x))
        names_df['formatted_adjusted'] = names_df['adjusted_show_name'].str.lower()
        def percentage_converter(x):
            if (type(x) == int) | (type(x) == float):
                return x
            else:
                try:
                    if pd.notna(x):
                        if "%" in str(x):
                            final_number = float(re.sub("[^0-9.]",'',str(x)))/100
                        else:
                            final_number = float(re.sub("[^0-9.]",'',str(x)))
                        return final_number
                    else:
                        return np.NaN
                except:
                    return np.NaN


        def gsheet_budget_upload(url,adjusted_client_ID):
            try:
                print("getting info for: " + str(adjusted_client_ID))
                json_datas = go
                scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
                creds = ServiceAccountCredentials.from_json_keyfile_dict(json_datas,scope)
                client = gspread.authorize(creds)
                workbook = client.open_by_url(url)

                try:
                    workbook.add_worksheet("Database Names",rows = 4000,cols = 15)
                except Exception as e:
                    stuff = 1
                #try:
            #        workbook.add_worksheet("Error Report",rows = 4000,cols = 15)
            #    except:
            #        stuff = 1

                sheet = workbook.worksheet("Flowchart")
                list_of_values = sheet.get_all_values()

                df = pd.DataFrame(data = list_of_values[1:],columns=list_of_values[0])
                df['adjusted_client_id'] = adjusted_client_ID
                client_df = names_df[names_df['adjusted_client_id'] == adjusted_client_ID]
                #Pull in unfomratted name
                #df['formatted'] = df['Roll Up - Show'].apply(lambda x: format_strings(x))
                df['formatted'] = df['Roll Up - Show'].str.lower()
                def match_finder(row):
                    try:
                        estimate_filter = client_df[client_df['estimate_id'] == int(re.sub("[^A-Za-z0-9]+","",row['Estimate']))]
                        if row['formatted'] in list(estimate_filter['formatted_adjusted']):
                            id_list = estimate_filter[estimate_filter['formatted_adjusted'] == row['formatted']]['vendor_id'].unique()
                            if len(id_list) > 0:
                                final_value = int(id_list[0])
                        elif row['formatted'] in list(estimate_filter['formatted_smbs']):
                            id_list = estimate_filter[estimate_filter['formatted_smbs'] == row['formatted']]['vendor_id'].unique()
                            if len(id_list) > 0:
                                final_value = int(id_list[0])
                        else:
                            final_value = None
                    except Exception as e:
                        print('error: ' + str(e))
                        final_value = None
                    return final_value
                df['master_vendor_id'] = df.apply(match_finder,axis=1)
                all_columns = df.columns

                date_columns = [x for x in all_columns if str(x).replace("/","").isnumeric()]
                non_dates = [x for x in all_columns if str(x).replace("/","").isnumeric() != True]

                df.replace("",np.NaN,inplace = True)

                df = df.melt(id_vars=non_dates,value_vars=date_columns,value_name="num_spot",var_name='date')

                df = df[df['num_spot'].notna()]

                df.columns = [re.sub("[^A-Za-z0-9]+"," ",col).lower().strip().replace("  "," ").replace(" ","_") for col in df.columns]
                df.drop_duplicates(inplace=True)
                df['loaded_time'] = pd.Timestamp.now()
                df['date'] = df['date'].apply(lambda x: pd.to_datetime((x + "/2019").replace("12/31/2019","12/31/2018")))

                df.to_csv(str(adjusted_client_ID) + "_2019.csv",index = False)
                sheet = workbook.worksheet("Database Names")
                sheet.clear()
                client_df = client_df[["estimate_id","estimate_name","vendor_name","adjusted_show_name","vendor_id"]]
                client_df = client_df.sort_values(by='adjusted_show_name')
                cell_range = sheet.range("A1:E"+ str(len(client_df) + 1))
                df_as_list = ["estimate id","estimate name","SBMS name","Database Name","Vendor ID"] + client_df.replace(np.NaN,"").values.flatten().tolist()
                count = 0
                for index,cell in enumerate(cell_range):
                    cell.value = df_as_list[index]
                sheet.update_cells(cell_range)




                def title_strings(x):
                    if pd.notna(x):
                        final_string = x.title()
                    else:
                        final_string = np.NaN
                    return final_string

                for column in ['spot_type','spot_placement','active_inactive']:
                    df[column] = df[column].apply(lambda x: title_strings(x))
                #Make list dynamic from GSHEET INPUT
                spot_type_list = ['Baked In', 'Di', 'Live', 'Recorded', 'Voiced', 'Sponsored', 'Non-Audio']
                spot_type_list = ['Baked In', 'Di', 'Live', 'Recorded', 'Voiced', 'Sponsored', 'Non-Audio']
                spot_type_errors = df[~df['spot_type'].isin(spot_type_list)]
                spot_type_errors = spot_type_errors[['roll_up_show','show_detail',"spot_type"]].drop_duplicates()
                spot_type_errors['error_column'] = 'Spot Type'
                spot_type_errors.fillna("Blank",inplace = True)
                spot_type_errors.rename(columns={'spot_type':'error'},inplace=True)
                spot_type_errors['error'] = spot_type_errors['error'].apply(lambda x: x + " is not an approved value for this column")

                spot_placement_list = ["Mid","Fib","Isl","Pre or Mid","Pre/Post","Billboard","Ros","Bonus","Pre","Social Media","In-Game","Payment","Pre/Mid","Website","Post","Traffic"]
                spot_placement_errors = df[~df['spot_placement'].isin(spot_placement_list)]
                spot_placement_errors = spot_placement_errors[['roll_up_show','show_detail',"spot_placement"]].drop_duplicates()
                spot_placement_errors['error_column'] = 'Spot Placement'
                spot_placement_errors.rename(columns={'spot_placement':'error'},inplace=True)
                spot_placement_errors.fillna("Blank",inplace = True)
                spot_placement_errors['error'] = spot_placement_errors['error'].apply(lambda x: x + " is not an approved value for this column")
                df['num_spot'] = df['num_spot'].apply(lambda x: percentage_converter(x))
                #df = df[df['num_spot'] > 0]
                non_match_errors = df[df['master_vendor_id'].isna()][['roll_up_show','show_detail']].drop_duplicates()
                non_match_errors['error_column'] = "Roll up - Show"
                non_match_errors['error'] = "Not Matching to SBMS, be sure to check you're Estimate ID and Roll - Up Show Names"

                total_errors = pd.concat([spot_type_errors,spot_placement_errors,non_match_errors],sort=False)

                total_errors = total_errors[['roll_up_show','show_detail','error_column','error']]

                del spot_placement_errors
                del spot_type_errors
                del non_match_errors
                total_errors.sort_values(by = 'roll_up_show',inplace = True)
#                sheet = workbook.worksheet("Error Report")
#                if len(total_errors) > 0:
#                    sheet.clear()
#                    error_list = ['Roll Up - Show',"Show - Detail","Error column","Error"] + total_errors.replace(np.NaN,"Blank Value").values.flatten().tolist()
#                    cell_range = sheet.range("A1:D" + str(len(total_errors) + 1))
#                    for index,cell in enumerate(cell_range):
#                        cell.value = error_list[index]
#                    sheet.update_cells(cell_range)

#                else:
#                    sheet.clear()
#                    sheet.update_cell(1,1,"No Errors, Great Job!")
#                    sheet.update_cell(1,2,"https://media2.s-nbcnews.com/j/newscms/2018_20/1339477/puppy-cute-today-180515-main_a936531048fdb698635dd1b418abdee9.fit-2000w.jpg")
            except Exception as e:
                print(str(adjusted_client_ID) + " Failed due to: " + str(e))



        single_list = []
        thread_list = []
        count = 0
        main_count = 0
        for index,row in urls.iterrows():
            single_list.append(Thread(target=gsheet_budget_upload,args=[row['url_of_budget'],row['adjusted_client_id']]))
            if count == 15:
                count = 0
                thread_list.append(single_list)
                single_list = []
            else:
                count+= 1
            main_count += 1
            if main_count == len(urls):
                thread_list.append(single_list)


        count = 0
        for batch in thread_list:
            print('starting batch ' + str(count + 1) + ' out of ' + str(len(thread_list)))
            for process in batch:
                process.start()
            for process in batch:
                process.join()
            if count != len(thread_list):
                time.sleep(20)
            count += 1

        for index,row in urls.iterrows():
            try:
                df = pd.read_csv(str(row['adjusted_client_id']) + '_2019.csv')
                df_list.append(df)
                del df
            except:
                print('reading csv errored')

        if active_client == 1:
            df_baseline = pd.read_sql("""select budg.* from production.gsheet_budgets.crazy_gsheet_budget budg inner join (
SELECT
cast(adjusted_client_id as int) as adjusted_client_id,
client_name ,
active_client
FROM production.gsheet_budgets.client_urls
where active_client = 0
group by
cast(adjusted_client_id as int) ,
client_name  ,
active_client
) act_cli

on act_cli.adjusted_client_id = budg.adjusted_client_id""",engine)
            if len(df_baseline) > 0:
                try:
                    df_baseline['date'] = df_baseline['date'].dt.date
                    df_list.append(df_baseline)
                    df = pd.concat(df_list,sort = False)
                except:
                    df = pd.concat(df_list,sort = False)

            #df = pd.concat(df_list,sort = False)
            #df_baseline['date'] = df_baseline['date'].dt.date
            #df_list.append(df_baseline)

            #df = pd.concat(df_list,sort = False)
        else:
            df = pd.concat(df_list,sort = False)


        col_data_type_dict = {}
        for col in df.columns:
            col_data_type_dict[col] = VARCHAR
        schema = 'gsheet_budgets'
        table_name = 'crazy_gsheet_budget'
        def percentage_converter(x):
            if (type(x) == int) | (type(x) == float):
                return x
            else:
                try:
                    if pd.notna(x):
                        if "%" in str(x):
                            final_number = float(re.sub("[^0-9.]",'',str(x)))/100
                        else:
                            final_number = float(re.sub("[^0-9.]",'',str(x)))
                        return final_number
                    else:
                        return np.NaN
                except:
                    return np.NaN
        for col in ['estimate','downloads_aqh',"cpm","commission",'gross_spot_cost','client_net_spot_cost','gross_tf',
               'client_net_tf','num_spot','master_vendor_id']:
            print(col)
            col_data_type_dict[col] = FLOAT
            df[col] = df[col].apply(lambda x: percentage_converter(x))



        df['estimate'] = df['estimate'].apply(lambda x: convert_to_int(x))
        df['estimate'] = pd.Series(data= df['estimate'],dtype="Int64")
        df['master_vendor_id'] = pd.Series(data = df['master_vendor_id'],dtype="Int64")

        df = df[df['num_spot'].notna()]
        col_data_type_dict['date'] = DATETIME
        col_data_type_dict['estimate'] = INTEGER
        col_data_type_dict['loaded_time'] = DATETIME



        top = df.head(1)
        top.to_sql(table_name,engine,schema=schema,if_exists="replace",dtype=col_data_type_dict,index=False)

        df.to_csv('new_table.csv',index = False)
        s3 = boto3.resource("s3")
        s3.meta.client.upload_file('new_table.csv','adresults','new_table.csv')
        os.remove('new_table.csv')
        print('done')
        query_delete = """TRUNCATE """  + schema + "." + table_name
        query_copy = """copy """ + schema + "." + table_name + """
        from 's3://adresults/new_table.csv'
        credentials 'aws_access_key_id=""" + acc + """;aws_secret_access_key=""" + sh + """'
        IGNOREHEADER 1
        EMPTYASNULL
        csv;"""
        query_update = """update gsheet_budgets.crazy_gsheet_budget
        set master_vendor_id = t1.master_vendor_id
        from (SELECT vendor_id, master_vendor_id
              FROM gsheet.unique_shows
          where master_vendor_id <> 0
             ) t1
        where gsheet_budgets.crazy_gsheet_budget.master_vendor_id = t1.vendor_id;"""
        print('starting upload')
        conn = engine.connect()
        conn.execute(text(query_delete).execution_options(autocommit=True))
        conn.execute(text(query_copy).execution_options(autocommit=True))
        conn.execute(text(query_update).execution_options(autocommit=True))
        conn.close()



        print('done done')

        final_string = "budget gsheet update was successful"
    except Exception as e:
        final_string = "budget gsheet update failed due to: " + str(e)
    error_report.append(final_string)


def gsheet_budget_update_2020(active_client):
    try:
        df_list = []
        engine = create_engine(post)
        if active_client == 1:
            urls = pd.read_sql("""SELECT  url_of_budget, cast(adjusted_client_id as int), client_name, synced_at FROM gsheet_budgets.client_urls_2020 where active_client = 1""",engine)
        else:
            urls = pd.read_sql("""SELECT  url_of_budget, cast(adjusted_client_id as int), client_name, synced_at FROM gsheet_budgets.client_urls_2020""",engine)


        year = '2020'
        print('getting names')
        names_df = pd.read_sql("""SELECT vendor_name,adjusted_show_name,estimate_id,estimate_name,cast(adjusted_client_id as int),vendor_id FROM (
        WITH



          new_clients AS

        (select
        temp.adjusted_client_name,
        temp.new_client_flag,
        temp.top_client_flag,
        temp.cli_list,
        temp.year,
        temp.over_5M_flag,
        temp.over_1M_flag,
        temp.over_500K_flag,
        temp.under_500K_flag,
        temp.rev_flag
        --cli.adjusted_client_name,
        --cli.sbms_client_id as client_id
        from
        (
              SELECT
              --client_id,
              adjusted_client_name,
              year,
              CASE WHEN row_num = 1 THEN TRUE ELSE FALSE END AS new_client_flag,


              row_num_gross as cli_list,
              case
              when row_num_gross = 1 Then 'Top 1'
              when row_num_gross <= 5 Then 'Top 2-5'
              when row_num_gross <= 10 Then 'Top 6-10'
              when row_num_gross <= 20 Then 'Top 11-20'
              when row_num_gross > 20 Then 'Outside 20'
              else 'Other'
              end as top_client_flag ,



              CASE WHEN total_gross_cost > 5000000 THEN TRUE ELSE FALSE END AS over_5M_flag,
              CASE WHEN total_gross_cost > 1000000 THEN TRUE ELSE FALSE END AS over_1M_flag,
              CASE WHEN total_gross_cost > 500000 THEN TRUE ELSE FALSE END AS over_500K_flag,
              CASE WHEN total_gross_cost < 500000 THEN TRUE ELSE FALSE END AS under_500K_flag,
              case
              when total_gross_cost < 500000 Then 'UNDER_500K'
              when total_gross_cost >= 500000 and total_gross_cost < 1000000 then '500K-1M'
              when total_gross_cost >= 1000000 and total_gross_cost < 5000000 then '1M-5M'
              when total_gross_cost >= 5000000 and total_gross_cost < 10000000 then '5M-10M'
              when total_gross_cost >= 10000000  then '>10M'
              else 'Other'
              end as rev_flag


              FROM
        (
        select
        cliYear.adjusted_client_name,
        cliYear.year,
        cliYear.total_gross_cost,
        --cliYear.client_id,
        ROW_NUMBER() OVER(PARTITION BY cliYear.adjusted_client_name ORDER BY cliYear.year ASC) AS row_num,
        ROW_NUMBER() OVER(PARTITION BY cliYear.year ORDER BY cliYear.total_gross_cost DESC) AS row_num_gross
        from (
        SELECT

        cli.adjusted_client_name as adjusted_client_name,
        TO_CHAR(rd.broadcast_date, 'YYYY') AS year,
        --rd.client_id,
        SUM(rd.total_gross_cost) AS total_gross_cost,
        ROW_NUMBER() OVER(PARTITION BY isnull(cli.adjusted_client_name) ORDER BY TO_CHAR(rd.broadcast_date, 'YYYY') ASC) AS row_num

        FROM public.rawdata_non_invoice_2014to2018 rd

        left join (

        select
        sbms_client_id,
        sbms_product_id,
        adjusted_client_name

        from production.gsheet.client_lkp
        group by
        sbms_client_id,
        sbms_product_id,
        adjusted_client_name


        ) cli

        on cli.sbms_client_id = rd.client_id
        and cli.sbms_product_id = rd.product_id



        group by
        cli.adjusted_client_name,
        TO_CHAR(rd.broadcast_date, 'YYYY')


        ) cliYear

        GROUP BY 1, 2, 3

        )

        ) temp

        group by
        temp.adjusted_client_name,
        temp.new_client_flag,
        temp.top_client_flag,
        temp.cli_list,
        temp.year,
        temp.over_5M_flag,
        temp.over_1M_flag,
        temp.over_500K_flag,
        temp.under_500K_flag,
        temp.rev_flag


        )


          SELECT
                rd.week_number,
            rd.number_of_spots,
            rd.station_id,
            rd.vendor_id,
            rd.CALL_LETTERS,
            rd.station_name,


            isnull(us.station_name, us1.station_name) AS gsheet_station_name,
            CASE WHEN snm.adjusted_show_name IS NOT NULL THEN snm.adjusted_show_name ELSE rd.station_name END AS adjusted_station_name,
            rd.ESTIMATE_ID,
            rd.estimate_name,
            rd.FLIGHT_START_DATE,
            rd.FLIGHT_END_DATE,
            rd.alternate_billing_code,
            rd.billing_code,
            rd.product_id,
            rd.product_name,
            rd.client_id,
            rd.free_spot,
            rd.paid_spot,
            rd.talent_fee,
            cl.sbms_client_id AS client_id_duplicate_check,
            rd.client_name AS SBMS_client_name,
            cl.latitude,
            cl.longitude,
            cl.adjusted_client_name AS gsheet_client_name,
            ushow.master_vendor_id as master_vendor_id,
            cl.state as client_state,
            CASE WHEN cl.adjusted_client_name IS NOT NULL AND cl.adjusted_client_name <> '' THEN cl.adjusted_client_name ELSE rd.client_name END AS client_name,
            rd.spot_cost,
            rd.total_gross_cost,
            rd.total_net_cost,
            rd.ace_cost AS total_ace_cost,
            vendor.direct_bill_code,
            CASE WHEN adjace.estimate_id IS NULL THEN rd.ace_cost ELSE rd.spot_cost * rd.number_of_spots * adjace.adjusted_ace END AS adjusted_ACE_cost,
            adjace.estimate_id||'-'||adjace.estimate_date AS estimate_date_adjusted_ace,
            snm.vendor_id||'-'||snm.station_id AS show_list_unique_id,
            rd.week_beginning_date,
            max(rd.week_beginning_date) over (partition by cl.adjusted_client_name) as max_client_date,



            start_date.first_year,
            start_date.first_month,
            start_date.first_quarter,
            start_date.first_broadcast_date,
            start_date.last_broadcast_date,

            start_date_cli.first_year as first_year_cli,
            start_date_cli.first_month as first_month_cli,
            start_date_cli.first_quarter as first_quarter_cli,
            start_date_cli.first_air_date as first_air_date_cli,
            start_date_cli.last_air_date as last_air_date_cli,
            start_date_cli.first_broadcast_date as first_broadcast_date_cli,
            start_date_cli.last_broadcast_date as last_broadcast_date_cli,

            case when date_part('year', rd.broadcast_date) <= start_date.first_year then 1 else 0 end
            as new_show_ind,
            case when date_part('year', rd.broadcast_date) <= start_date.first_year then 'New Show' else 'Existing Show' end
            as new_show,
            rd.broadcast_date,
            date_part('month', rd.broadcast_date) as broadcast_month_sbms,

            case
            when date_part('month', rd.broadcast_date) = 1 then 'Jan'
            when date_part('month', rd.broadcast_date) = 2 then 'Feb'
            when date_part('month', rd.broadcast_date) = 3 then 'Mar'
            when date_part('month', rd.broadcast_date) = 4 then 'Apr'
            when date_part('month', rd.broadcast_date) = 5 then 'May'
            when date_part('month', rd.broadcast_date) = 6 then 'Jun'
            when date_part('month', rd.broadcast_date) = 7 then 'Jul'
            when date_part('month', rd.broadcast_date) = 8 then 'Aug'

            when date_part('month', rd.broadcast_date) = 9 then 'Sep'
            when date_part('month', rd.broadcast_date) = 10 then 'Oct'
            when date_part('month', rd.broadcast_date) = 11 then 'Nov'
            when date_part('month', rd.broadcast_date) = 12 then 'Dec'
            else 'Unclassified' end as broadcast_month_string
            ,

            case
            when date_part('month', rd.broadcast_date) in (1,2,3) then 1
            when date_part('month', rd.broadcast_date) in (4,5,6) then 2
            when date_part('month', rd.broadcast_date) in (7,8,9) then 3
            when date_part('month', rd.broadcast_date) in (10,11,12) then 4
            else 99 end

            as broadcast_quarter_sbms,

            rd.market_name,
            cattr.client_logo,
            cattr.churn_classification,
            isnull(cattr.business_type, 'Unclassified') as business_type,
            isnull(cattr.gender_skew, 'Unclassified') as gender_skew,
            isnull(cattr.start_year, -999) as start_year,

            lmn.market_name AS most_recent_market_name,
            amn.market_name AS market_name_duplicate_check,
            CASE WHEN ls.media_type IS NULL THEN
            CASE WHEN snm.adjusted_market_name IS NOT NULL THEN snm.adjusted_market_name ELSE amn.adjusted_market_name END
            ELSE ls.market_name END AS adjusted_market_name,

            case when rd.vendor_id > 250000 and rd.vendor_id < 300000 then 'Local Radio'
            else

            CASE WHEN ls.media_type IS NOT NULL THEN ls.media_type ELSE
                CASE WHEN snm.media_type IS NULL THEN amn.media_type ELSE snm.media_type END
            END
            end

            AS media_type,
            --snm.genre AS genre,
            CASE WHEN ls.market_name IS NOT NULL THEN 'local' ELSE
            CASE WHEN snm.market_name IS NOT NULL THEN 'non-local' ELSE 'missing' END
            END AS local_non_local_flag,
            isnull(vend.vendor_name, rd.station_name) as vendor_name,
            isnull(us2.adjusted_show_name, rd.station_name) as adjusted_show_name,
            nc.new_client_flag,
            isnull(nc.top_client_flag, 'Outside 20') as top_client_flag,
            isnull(nc.cli_list, 99) as top_cli_list,
            nc.over_5M_flag,
            nc.over_1M_flag,
            nc.over_500K_flag,
            nc.under_500K_flag,
            adjCli.adjusted_client_id,
            nc.adjusted_client_name as nc_adjusted_client_name,
            isnull(nc.rev_flag, 'Other') as rev_flag,
            --nc.rev_flag,
            sbms_cli.client_city,
            sbms_cli.client_state as client_state_sbms,
            sbms_cli.client_zip,
            --isnull(isnull(isnull(allGenre.genre_arm, strat2.genre_arm, us1.genre_arm), strat.format), us.genre_arm) AS genre_arm,
            --isnull(isnull(isnull(allGenre.genre_itunes, strat2.genre_arm, us1.genre_iTunes), strat.format), us.genre_iTunes) AS gsheet_genre_iTunes,


            isnull(isnull(isnull(strat2.genre_arm, us1.genre_arm), strat.format), us.genre_arm) AS genre_arm,

            isnull(us1.subgenre_arm, us.subgenre_arm) AS subgenre_arm,
            isnull(us1.itunes_url, us.itunes_url) AS itunes_url,
            isnull(isnull(isnull(strat2.genre_arm, us1.genre_iTunes), strat.format), us.genre_iTunes) AS gsheet_genre_iTunes,


            mark.market_name as sbms_market_vendor,

            --bact.active_inactive,

            case
            when
            bact.master_vendor_id is null
            and bact.client_id is null
            and bact.active_inactive is null then 'Mismatch or Missing From Budget'
            when
            bact.master_vendor_id is not null
            and bact.client_id is not null
            and bact.active_inactive is null then 'Blank Budget'

            when
            bact.master_vendor_id is not null
            and bact.client_id is not null
            and bact.active_inactive is not null then bact.active_inactive
            else 'Other' end
            as active_inactive,

            --bhost.host_name,
            case
            when
            bhost.master_vendor_id is null
            and bhost.client_id is null
            and bhost.host_name is null then 'Mismatch or Missing From Budget'
            when
            bhost.master_vendor_id is not null
            and bhost.client_id is not null
            and bhost.host_name is null then 'Blank Budget'

            when
            bhost.master_vendor_id is not null
            and bhost.client_id is not null
            and bhost.host_name is not null then bhost.host_name
            else 'Other' end
            as host_name,

           -- bcode.code,

            case
            when
            bcode.master_vendor_id is null
            and bcode.client_id is null
            and bcode.code is null then 'Mismatch or Missing From Budget'
            when
            bcode.master_vendor_id is not null
            and bcode.client_id is not null
            and bcode.code is null then 'Blank Budget'

            when
            bcode.master_vendor_id is not null
            and bcode.client_id is not null
            and bcode.code is not null then bcode.code
            else 'Other' end
            as code,

            --bcpm.cpm,
            case
            when
            bcpm.master_vendor_id is null
            and bcpm.client_id is null
            and bcpm.cpm is null then -99
            when
            bcpm.master_vendor_id is not null
            and bcpm.client_id is not null
            and bcpm.cpm is null then -99

            when
            bcpm.master_vendor_id is not null
            and bcpm.client_id is not null
            and bcpm.cpm is not null then bcpm.cpm
            else -99 end
            as cpm,

            --bdown.downloads,


            case
            when
            bdown.master_vendor_id is null
            and bdown.client_id is null
            and bdown.downloads is null then -99
            when
            bdown.master_vendor_id is not null
            and bdown.client_id is not null
            and bdown.downloads is null then -99

            when
            bdown.master_vendor_id is not null
            and bdown.client_id is not null
            and bdown.downloads is not null then bdown.downloads
            else -99 end
            as downloads,

            case
            when
            bplace.master_vendor_id is null
            and bplace.client_id is null
            and bplace.spot_placement is null then 'Mismatch or Missing From Budget'
            when
            bplace.master_vendor_id is not null
            and bplace.client_id is not null
            and bplace.spot_placement is null then 'Blank Budget'

            when
            bplace.master_vendor_id is not null
            and bplace.client_id is not null
            and bplace.spot_placement is not null then bplace.spot_placement
            else 'Other' end
            as spot_placement,


            --case
            --when position('05' in bslen.spot_length) > 0 then ':05'
            --when position('15' in bslen.spot_length) > 0 then ':15'
            --when position('30' in bslen.spot_length) > 0 then ':30'
            --when position('45' in bslen.spot_length) > 0 then ':45'
            --when position('60' in bslen.spot_length) > 0 then ':60'
            --when position('90' in bslen.spot_length) > 0 then ':90'
            --when position('120' in bslen.spot_length) > 0 then ':120'
            --when position('VARIOUS' in upper(bslen.spot_length)) > 0 then 'Various'
            --else 'Null' end as spot_length,
           -- bslen.spot_length,
            case
            when
            bslen.master_vendor_id is null
            and bslen.client_id is null
            and bslen.spot_length is null then 'Mismatch or Missing From Budget'
            when
            bslen.master_vendor_id is not null
            and bslen.client_id is not null
            and bslen.spot_length is null then 'Blank Budget'

            when
            bslen.master_vendor_id is not null
            and bslen.client_id is not null
            and bslen.spot_length is not null then bslen.spot_length
            else 'Other' end
            as spot_length,



          --  bslen.spot_length,
            --bstyp.spot_type,

            --case
            --when position('BAKED' in upper(bstyp.spot_type)) > 0 then 'Baked In'
            --when position('DI ' in upper(bstyp.spot_type)) > 0 then 'DI'
            --when position('EMBE' in upper(bstyp.spot_type)) > 0 then 'Embedded'
            --when position('LIVE' in upper(bstyp.spot_type)) > 0 then 'Live'
            --when position('DI ' in upper(bstyp.spot_type)) > 0 then 'DI'
            --when position('ROS' in upper(bstyp.spot_type)) > 0 then 'ROS'
            --when position('RECO' in upper(bstyp.spot_type)) > 0 then 'Recorded'
            --when position('VARIOU' in upper(bstyp.spot_type)) > 0 then 'Various'

            --else 'Null' end as spot_type,

            case
            when
            bstyp.master_vendor_id is null
            and bstyp.client_id is null
            and bstyp.spot_type is null then 'Mismatch or Missing From Budget'
            when
            bstyp.master_vendor_id is not null
            and bstyp.client_id is not null
            and bstyp.spot_type is null then 'Blank Budget'

            when
            bstyp.master_vendor_id is not null
            and bstyp.client_id is not null
            and bstyp.spot_type is not null then bstyp.spot_type
            else 'Other' end
            as spot_type,

           -- bstyp.spot_type,
          case
            when
            bstat.master_vendor_id is null
            and bstat.client_id is null
            and bstat.status is null then 'Mismatch or Missing From Budget'
            when
            bstat.master_vendor_id is not null
            and bstat.client_id is not null
            and bstat.status is null then 'Blank Budget'

            when
            bstat.master_vendor_id is not null
            and bstat.client_id is not null
            and bstat.status is not null then bstat.status
            else 'Other' end
            as status,



              case
            when
            bgrate.master_vendor_id is null
            and bgrate.client_id is null
            and bgrate.gross_rate is null then -99
            when
            bgrate.master_vendor_id is not null
            and bgrate.client_id is not null
            and bgrate.gross_rate is null then -99

            when
            bgrate.master_vendor_id is not null
            and bgrate.client_id is not null
            and bgrate.gross_rate is not null then bgrate.gross_rate
            else -99 end
            as gross_rate
            --,
            --isnull(own.owner_name, vend.ownership) as owner

            --bstat.status



            FROM matt_testing.rawdata_non_invoice_2014to2018_cond rd

						left join (

					select
					spot_id, vendor_id from production.public.rawdata_non_invoice_2014to2018
					group by spot_id, vendor_id
					) rd_init

					on rd_init.spot_id = rd.spot_id


        left join gsheet.client_lkp adjCli
        on adjCli.sbms_client_id = rd.client_id
        and adjCli.sbms_product_id = rd.product_id


        LEFT JOIN new_clients nc
        on nc.adjusted_client_name = adjCli.adjusted_client_name AND nc.year = TO_CHAR(rd.broadcast_date, 'YYYY')


        --ON nc.client_id = rd.client_id AND nc.year = TO_CHAR(rd.broadcast_date, 'YYYY')
        LEFT JOIN gsheet.market_info__show_list snm ON rd.station_id = snm.station_id
        LEFT JOIN public.local_stations ls ON rd.station_id = ls.station_id

        left join production.sbms.vendor vendor
        on vendor.vendor_id = rd_init.vendor_id

				LEFT JOIN gsheet.client_lkp cl
        ON cl.SBMS_product_id = rd.product_id
        and cl.sbms_client_id = rd.client_id

        LEFT JOIN public.most_recent_market_name lmn ON lmn.vendor_id = rd_init.vendor_id
        LEFT JOIN public.adjusted_market_name amn ON amn.market_name = lmn.market_name
        LEFT JOIN gsheet.ace_adjustment adjace ON adjace.estimate_id = rd.estimate_id AND adjace.estimate_date = rd.broadcast_date
        left join production.sbms.vendor vend on vend.vendor_id = rd_init.vendor_id
        --left join production.sbms.owner own on vend.owner_id = own.owner_id
        left join production.sbms.market mark on vend.market_id = mark.market_id

        left join production.sbms.client sbms_cli on sbms_cli.client_id = rd.client_id
        left join production.sbms.station stat on stat.station_id = rd.station_id
        left join production.sbms.strata_stations strat on strat.station_name = rd.call_letters ||'-'|| stat.band_code
        left join production.gsheet.small_radio_format strat2 on strat2.station_band = rd.call_letters ||'-'|| stat.band_code


        left join production.gsheet.unique_shows ushow
        on ushow.vendor_id = rd_init.vendor_id


        left join (select

        vendor_id,
        date_part('year', min(broadcast_date)) as first_year,
        date_part('month', min(broadcast_date)) as first_month,
        ceil(date_part('month', min(broadcast_date))/3) as first_quarter,
        min(broadcast_date) as first_broadcast_date,
        max(broadcast_date) as last_broadcast_date,
        min(week_beginning_date) as first_air_date,
        max(week_beginning_Date) as last_air_date


        from production.public.rawdata_non_invoice_2014to2018

        group by
        vendor_id

        ) start_date
        on start_date.vendor_id = rd_init.vendor_id



        left join (select

        first_show.vendor_id,
        first_show.product_id,
        first_show.client_id,
        first_show.first_year,
        first_show.first_month,

        first_show.first_quarter,
        first_show.first_broadcast_date,
        first_show.last_broadcast_date,
        first_show.first_air_date,
        first_show.last_air_date

        from (select

        vendor_id,
        product_id,
        client_id,

        date_part('year', min(broadcast_date) over (partition by vendor_id, client_id, product_id)) as first_year,
        date_part('month', min(broadcast_date) over (partition by vendor_id, client_id, product_id)) as first_month,
        ceil(date_part('month', min(broadcast_date) over (partition by vendor_id, client_id, product_id) )/3) as first_quarter,
        min(broadcast_date) over (partition by vendor_id, client_id, product_id) as first_broadcast_date,
        max(broadcast_date) over (partition by vendor_id, client_id, product_id) as last_broadcast_date,
        min(week_beginning_date) over (partition by vendor_id, client_id, product_id) as first_air_date,
        max(week_beginning_Date) over (partition by vendor_id, client_id, product_id) as last_air_date


        from production.public.rawdata_non_invoice_2014to2018

        --where client_id = 621
        --and vendor_id = 9050
        group by
        vendor_id,
        product_id,
        client_id
        ,
        broadcast_date
        ,
        week_beginning_date

        order by

        vendor_id,
        product_id,
        client_id
        ,
        broadcast_date,
        week_beginning_date

        ) first_show

        group by
        first_show.vendor_id,
        first_show.product_id,
        first_show.client_id,
        first_show.first_year,
        first_show.first_month,

        first_show.first_quarter,
        first_show.first_broadcast_date,
        first_show.last_broadcast_date,
        first_show.first_air_date,
        first_show.last_air_date

        ) start_date_cli

        on start_date_cli.vendor_id = rd_init.vendor_id
        and start_date_cli.product_id = rd.product_id
        and start_date_cli.client_id = rd.client_id

        left join production.budget_data.budget_active_inactive bact
        --on ushow.master_vendor_id = bact.master_vendor_id
        on rd.vendor_id = bact.master_vendor_id


        and cl.adjusted_client_id = bact.client_id

        left join production.budget_data.budget_host_name bhost
        on rd.vendor_id = bhost.master_vendor_id
        and cl.adjusted_client_id = bhost.client_id

        left join production.budget_data.budget_code bcode
        on rd.vendor_id = bcode.master_vendor_id
        and cl.adjusted_client_id = bcode.client_id


        left join production.budget_data.budget_cpm bcpm
        on rd.vendor_id = bcpm.master_vendor_id
        and cl.adjusted_client_id = bcpm.client_id



        left join production.budget_data.budget_downloads bdown
        on rd.vendor_id = bdown.master_vendor_id
        and cl.adjusted_client_id = bdown.client_id

        left join production.budget_data.budget_spot_length bslen
        on rd.vendor_id = bslen.master_vendor_id
        and cl.adjusted_client_id = bslen.client_id


        left join production.budget_data.budget_spot_type bstyp
        on rd.vendor_id = bstyp.master_vendor_id
        and cl.adjusted_client_id = bstyp.client_id


        left join production.budget_data.budget_spot_placement bplace
        on rd.vendor_id = bplace.master_vendor_id
        and cl.adjusted_client_id = bplace.client_id


        left join production.budget_data.budget_status bstat
        on rd.vendor_id = bstat.master_vendor_id
        and cl.adjusted_client_id = bstat.client_id

        left join production.budget_data.budget_gross_rate bgrate
        on rd.vendor_id = bgrate.master_vendor_id
        and cl.adjusted_client_id = bgrate.client_id


        --left join production.gsheet.all_genre_classification allGenre
        --on allGenre.vendor_id = rd.vendor_id
        --left join production.budget_data.budget_daypart bday
        --on rd.vendor_id = bstat.master_vendor_id
        --and rd.client_id = bstat.client_id


        left join production.client_order_data.client_attributes cattr
        on cattr.adjusted_client_id = cl.adjusted_client_id

            LEFT JOIN (

            select

            ushow3.vendor_id,
            ushow3.station_name,
            ushow3.subgenre_arm,
            ushow3.itunes_url,
            ushow3.genre_arm,
            ushow3.genre_itunes

            from (
            select
            ushow2.vendor_id,
            ushow2.station_name,
            ushow2.subgenre_arm,
            ushow2.itunes_url,
            ushow2.genre_arm,
            ushow2.genre_itunes,
            ushow2.rowNum,
            max(ushow2.rowNum) over (partition by ushow2.vendor_id) as maxRow

            from
            (SELECT
            ushow1.vendor_id,
            ushow1.station_name,
            ushow1.subgenre_arm,
            ushow1.itunes_url,
            isnull(ushow1.genre_arm, sstat.format) as genre_arm,
            isnull(ushow1.genre_itunes, sstat.format) as genre_itunes,

            ROW_NUMBER() over (partition by ushow1.vendor_id order by ushow1.station_name) as rowNum
            FROM production.gsheet.unique_shows_loc ushow1
            left join production.sbms.strata_stations sstat
            on sstat.station_name = ushow1.station_name
            where ushow1.vendor_id <> 0

            )
            ushow2

            group by

            ushow2.vendor_id,
            ushow2.station_name,
            ushow2.subgenre_arm,
            ushow2.itunes_url,
            ushow2.genre_arm,
            ushow2.genre_itunes,
            ushow2.rowNum

            ) ushow3

            where ushow3.rowNum = ushow3.maxRow

            group by ushow3.vendor_id,
            ushow3.station_name,
            ushow3.subgenre_arm,
            ushow3.itunes_url,
            ushow3.genre_arm,
            ushow3.genre_itunes

            ) us
            on us.vendor_id = rd.vendor_id

            LEFT JOIN (

            SELECT
            ushow.*
            FROM production.gsheet.unique_shows ushow
            where ushow.vendor_id = 0


            ) us1
            on us1.station_name = rd.station_name

            left join
            (select

            ushow.vendor_id,
            ushow.adjusted_show_name
            from production.gsheet.unique_shows ushow
            where ushow.vendor_id <> 0

            ) us2
            on us2.vendor_id = rd.vendor_id



            WHERE
            ((cl.adjusted_client_name IS not NULL
        and cl.adjusted_client_name NOT LIKE '%%EXCLUDE%%'
        and upper(cl.adjusted_client_name) NOT LIKE '%%AT&T (NON-MEDIA/ARMS)%%'
        )
        or
        (cl.adjusted_client_name IS NULL))
        and rd.estimate_id <> 99999999
            ORDER BY client_name, week_beginning_date)
            WHERE estimate_name like '%%""" + year + """%%'
            GROUP BY vendor_name,adjusted_show_name,estimate_id,estimate_name,adjusted_client_id,vendor_id""",engine)
        print('done with names')

        names_df['formatted_smbs'] = names_df['vendor_name'].apply(lambda x: format_strings(x))
        #names_df['formatted_adjusted'] = names_df['adjusted_show_name'].apply(lambda x: format_strings(x))
        names_df['formatted_adjusted'] = names_df['adjusted_show_name'].str.lower()
        def percentage_converter(x):
            if (type(x) == int) | (type(x) == float):
                return x
            else:
                try:
                    if pd.notna(x):
                        if "%" in str(x):
                            final_number = float(re.sub("[^0-9.]",'',str(x)))/100
                        else:
                            final_number = float(re.sub("[^0-9.]",'',str(x)))
                        return final_number
                    else:
                        return np.NaN
                except:
                    return np.NaN
        def gsheet_budget_upload(url,adjusted_client_ID):
            try:
                print("getting info for: " + str(adjusted_client_ID))
                json_datas = go
                scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
                creds = ServiceAccountCredentials.from_json_keyfile_dict(json_datas,scope)
                client = gspread.authorize(creds)
                workbook = client.open_by_url(url)

                try:
                    workbook.add_worksheet("Database Names",rows = 4000,cols = 15)
                except Exception as e:
                    stuff = 1
#                try:
#                    workbook.add_worksheet("Error Report",rows = 4000,cols = 15)
#                except:
#                    stuff = 1

                sheet = workbook.worksheet("Flowchart")
                list_of_values = sheet.get_all_values()

                df = pd.DataFrame(data = list_of_values[1:],columns=list_of_values[0])
                df = df[(df['Roll Up - Show'] != "") | (df['Roll Up - Show'].notna())]
                if len(df) > 0:
                    try:
                        df.drop(columns=["Total Spots/Talent Fees/Impressions","Gross Cost","Ace Cost"],inplace=True)
                    except:
                        x = 1
                    df['adjusted_client_id'] = adjusted_client_ID
                    client_df = names_df[names_df['adjusted_client_id'] == adjusted_client_ID]
                    #df['formatted'] = df['Roll Up - Show'].apply(lambda x: format_strings(x))
                    df['formatted'] = df['Roll Up - Show'].str.lower()
                    def match_finder(row):
                        try:
                            estimate_filter = client_df[client_df['estimate_id'] == int(re.sub("[^A-Za-z0-9]+","",row['Estimate']))]
                            if row['formatted'] in list(estimate_filter['formatted_adjusted']):
                                id_list = estimate_filter[estimate_filter['formatted_adjusted'] == row['formatted']]['vendor_id'].unique()
                                if len(id_list) > 0:
                                    final_value = int(id_list[0])
                            elif row['formatted'] in list(estimate_filter['formatted_smbs']):
                                id_list = estimate_filter[estimate_filter['formatted_smbs'] == row['formatted']]['vendor_id'].unique()
                                if len(id_list) > 0:
                                    final_value = int(id_list[0])
                            else:
                                final_value = None
                        except Exception as e:
                            final_value = None
                        return final_value
                    df['master_vendor_id'] = df.apply(match_finder,axis=1)
                    all_columns = df.columns

                    date_columns = [x for x in all_columns if str(x).replace("/","").isnumeric()]
                    non_dates = [x for x in all_columns if str(x).replace("/","").isnumeric() != True]

                    df.replace("",np.NaN,inplace = True)

                    df = df.melt(id_vars=non_dates,value_vars=date_columns,value_name="num_spot",var_name='date')

                    df = df[df['num_spot'].notna()]

                    df.columns = [re.sub("[^A-Za-z0-9]+"," ",col).lower().strip().replace("  "," ").replace(" ","_") for col in df.columns]
                    df.drop_duplicates(inplace=True)
                    df['loaded_time'] = pd.Timestamp.now()
                    #df['date'] = df['date'].apply(lambda x: pd.to_datetime((x + "/2019").replace("12/31/2019","12/31/2018")))
                    df['date'] = df['date'].apply(lambda x: pd.to_datetime((x + "/2020").replace("12/31/2020","12/31/2019").replace("12/30/2020","12/30/2019")))

                    df.to_csv(str(adjusted_client_ID) + "_2020.csv",index = False)
                    sheet = workbook.worksheet("Database Names")
                    sheet.clear()
                    client_df = client_df[["estimate_id","estimate_name","vendor_name","adjusted_show_name","vendor_id"]]
                    client_df = client_df.sort_values(by='adjusted_show_name')
                    cell_range = sheet.range("A1:E"+ str(len(client_df) + 1))
                    df_as_list = ["estimate id","estimate name","SBMS name","Database Name","Vendor ID"] + client_df.replace(np.NaN,"").values.flatten().tolist()
                    count = 0
                    for index,cell in enumerate(cell_range):
                        cell.value = df_as_list[index]
                    sheet.update_cells(cell_range)

                    def title_strings(x):
                        if pd.notna(x):
                            final_string = x.title()
                        else:
                            final_string = np.NaN
                        return final_string

                    for column in ['spot_type','spot_placement','active_inactive']:
                        df[column] = df[column].apply(lambda x: title_strings(x))
                    spot_type_list = ['Baked In', 'Di', 'Live', 'Recorded', 'Voiced', 'Sponsored', 'Non-Audio']
                    spot_type_errors = df[~df['spot_type'].isin(spot_type_list)]
                    spot_type_errors = spot_type_errors[['roll_up_show','show_detail',"spot_type"]].drop_duplicates()
                    spot_type_errors['error_column'] = 'Spot Type'
                    spot_type_errors.fillna("Blank",inplace = True)
                    spot_type_errors.rename(columns={'spot_type':'error'},inplace=True)
                    spot_type_errors['error'] = spot_type_errors['error'].apply(lambda x: x + " is not an approved value for this column")

                    spot_placement_list = ["Mid","Fib","Isl","Pre Or Mid","Pre/Post","Billboard","Ros","Bonus","Pre","Social Media","In-Game","Payment","Pre/Mid","Website","Post","Traffic"]
                    spot_placement_errors = df[~df['spot_placement'].isin(spot_placement_list)]
                    spot_placement_errors = spot_placement_errors[['roll_up_show','show_detail',"spot_placement"]].drop_duplicates()
                    spot_placement_errors['error_column'] = 'Spot Placement'
                    spot_placement_errors.fillna("Blank",inplace = True)
                    spot_placement_errors.rename(columns={'spot_placement':'error'},inplace=True)
                    spot_placement_errors['error'] = spot_placement_errors['error'].apply(lambda x: x + " is not an approved value for this column")
                    df['num_spot'] = df['num_spot'].apply(lambda x: percentage_converter(x))
                    #df = df[df['num_spot'] > 0]
                    non_match_errors = df[df['master_vendor_id'].isna()][['roll_up_show','show_detail']].drop_duplicates()
                    non_match_errors['error_column'] = "Roll up - Show"
                    non_match_errors['error'] = "Not Matching to SBMS, be sure to check you're Estimate ID and Roll - Up Show Names"


                    total_errors = pd.concat([spot_type_errors,spot_placement_errors,non_match_errors],sort=False)

                    total_errors = total_errors[['roll_up_show','show_detail','error_column','error']]

                    del spot_placement_errors
                    del spot_type_errors
                    del non_match_errors
                    total_errors.sort_values(by = 'roll_up_show',inplace = True)
#                    sheet = workbook.worksheet("Error Report")
#                    if len(total_errors) > 0:
#                        sheet.clear()
#                        error_list = ['Roll Up - Show',"Show - Detail","Error column","Error"] + total_errors.replace(np.NaN,"Blank Value").values.flatten().tolist()
#                        cell_range = sheet.range("A1:D" + str(len(total_errors) + 1))
#                        for index,cell in enumerate(cell_range):
#                            cell.value = error_list[index]
#                        sheet.update_cells(cell_range)

#                    else:
#                        sheet.clear()
#                        sheet.update_cell(1,1,"No Errors, Great Job!")
#                        sheet.update_cell(1,2,"https://media2.s-nbcnews.com/j/newscms/2018_20/1339477/puppy-cute-today-180515-main_a936531048fdb698635dd1b418abdee9.fit-2000w.jpg")

            except Exception as e:
                print(str(adjusted_client_ID) + " Failed due to: " + str(e))

        single_list = []
        thread_list = []
        count = 0
        main_count = 0
        for index,row in urls.iterrows():
            single_list.append(Thread(target=gsheet_budget_upload,args=[row['url_of_budget'],row['adjusted_client_id']]))
            if count == 19:
                count = 0
                thread_list.append(single_list)
                single_list = []
            else:
                count+= 1
            main_count += 1
            if main_count == len(urls):
                thread_list.append(single_list)


        count = 0
        for batch in thread_list:
            print('starting batch ' + str(count + 1) + ' out of ' + str(len(thread_list)))
            for process in batch:
                process.start()
            for process in batch:
                process.join()
            if count != len(thread_list):
                time.sleep(20)
            count += 1

        for index,row in urls.iterrows():
            try:
                df = pd.read_csv(str(row['adjusted_client_id']) + '_2020.csv')
                df_list.append(df)
                del df
            except:
                print('reading csv errored')



        if active_client == 1:




            df_baseline = pd.read_sql("""select budg.* from production.gsheet_budgets.gsheet_budgets_2020 budg inner join (
SELECT
cast(adjusted_client_id as int) as adjusted_client_id,
client_name ,
active_client
FROM production.gsheet_budgets.client_urls_2020
where active_client = 0
group by
cast(adjusted_client_id as int) ,
client_name  ,
active_client
) act_cli

on act_cli.adjusted_client_id = budg.adjusted_client_id""",engine)
            #df_baseline['date'] = df_baseline['date'].dt.date
            #df_list.append(df_baseline)
            if len(df_baseline) > 0:
                try:
                    df_baseline['date'] = df_baseline['date'].dt.date
                    df_list.append(df_baseline)
                    df = pd.concat(df_list,sort = False)
                except:
                    df = pd.concat(df_list,sort = False)

            #df = pd.concat(df_list,sort = False)
        else:
            df = pd.concat(df_list,sort = False)





        df = pd.concat(df_list,sort = False)

        col_data_type_dict = {}
        for col in df.columns:
            col_data_type_dict[col] = VARCHAR
        schema = 'gsheet_budgets'
        table_name = 'gsheet_budgets_2020'
        def percentage_converter(x):
            if (type(x) == int) | (type(x) == float):
                return x
            else:
                try:
                    if pd.notna(x):
                        if "%" in str(x):
                            final_number = float(re.sub("[^0-9.]",'',str(x)))/100
                        else:
                            final_number = float(re.sub("[^0-9.]",'',str(x)))
                        return final_number
                    else:
                        return np.NaN
                except:
                    return np.NaN
        for col in ['estimate','downloads_aqh',"cpm","commission",'gross_spot_cost','client_net_spot_cost','num_spot','master_vendor_id','adjusted_client_id']:
            print(col)
            col_data_type_dict[col] = FLOAT
            df[col] = df[col].apply(lambda x: percentage_converter(x))
        #df['date'] = df['date'].apply(lambda x: pd.to_datetime((x + "/2020").replace("12/31/2020","12/31/2019").replace("12/30/2020","12/30/2019")))
        df['estimate'] = df['estimate'].apply(lambda x: convert_to_int(x))
        df['estimate'] = pd.Series(data= df['estimate'],dtype="Int64")
        df['master_vendor_id'] = pd.Series(data = df['master_vendor_id'],dtype="Int64")
        df['adjusted_client_id'] = pd.Series(data = df['adjusted_client_id'],dtype="Int64")
        df = df[df['num_spot'].notna()]
        col_data_type_dict['date'] = DATETIME
        col_data_type_dict['estimate'] = INTEGER
        col_data_type_dict['loaded_time'] = DATETIME
        top = df.head(1)
        top.to_sql(table_name,engine,schema=schema,if_exists="replace",dtype=col_data_type_dict,index=False)
        df.to_csv('new_table.csv',index = False)
        s3 = boto3.resource("s3")
        s3.meta.client.upload_file('new_table.csv','adresults','new_table.csv')
        os.remove('new_table.csv')
        print('done')
        query_delete = """TRUNCATE """  + schema + "." + table_name
        query_copy = """copy """ + schema + "." + table_name + """
        from 's3://adresults/new_table.csv'
        credentials 'aws_access_key_id=""" + acc + """;aws_secret_access_key=""" + sh + """'
        IGNOREHEADER 1
        EMPTYASNULL
        csv;"""
        query_update = """update gsheet_budgets.gsheet_budgets_2020
        set master_vendor_id = t1.master_vendor_id
        from (SELECT vendor_id, master_vendor_id
              FROM gsheet.unique_shows
          where master_vendor_id <> 0
             ) t1
        where gsheet_budgets.gsheet_budgets_2020.master_vendor_id = t1.vendor_id;"""


        print('starting upload')
        conn = engine.connect()
        conn.execute(text(query_delete).execution_options(autocommit=True))
        conn.execute(text(query_copy).execution_options(autocommit=True))
        conn.execute(text(query_update).execution_options(autocommit=True))
        conn.close()
        print('done done')

        final_string = "budget gsheet update was successful"
    except Exception as e:
        final_string = "budget gsheet update failed due to: " + str(e)
    error_report.append(final_string)


def gsheet_budget_update_2021(active_client):
    try:
        df_list = []
        engine = create_engine(post)

        if active_client == 1:
            urls = pd.read_sql("""SELECT  url_of_budget, cast(adjusted_client_id as int), client_name, synced_at FROM gsheet_budgets.client_urls_2021 where active_client = 1""",engine)
        else:
            urls = pd.read_sql("""SELECT  url_of_budget, cast(adjusted_client_id as int), client_name, synced_at FROM gsheet_budgets.client_urls_2021""",engine)

        year = '2021'
        print('getting names')
        names_df = pd.read_sql("""SELECT vendor_name,adjusted_show_name,estimate_id,estimate_name,cast(adjusted_client_id as int),vendor_id FROM (
        WITH



          new_clients AS

        (select
        temp.adjusted_client_name,
        temp.new_client_flag,
        temp.top_client_flag,
        temp.cli_list,
        temp.year,
        temp.over_5M_flag,
        temp.over_1M_flag,
        temp.over_500K_flag,
        temp.under_500K_flag,
        temp.rev_flag
        --cli.adjusted_client_name,
        --cli.sbms_client_id as client_id
        from
        (
              SELECT
              --client_id,
              adjusted_client_name,
              year,
              CASE WHEN row_num = 1 THEN TRUE ELSE FALSE END AS new_client_flag,


              row_num_gross as cli_list,
              case
              when row_num_gross = 1 Then 'Top 1'
              when row_num_gross <= 5 Then 'Top 2-5'
              when row_num_gross <= 10 Then 'Top 6-10'
              when row_num_gross <= 20 Then 'Top 11-20'
              when row_num_gross > 20 Then 'Outside 20'
              else 'Other'
              end as top_client_flag ,



              CASE WHEN total_gross_cost > 5000000 THEN TRUE ELSE FALSE END AS over_5M_flag,
              CASE WHEN total_gross_cost > 1000000 THEN TRUE ELSE FALSE END AS over_1M_flag,
              CASE WHEN total_gross_cost > 500000 THEN TRUE ELSE FALSE END AS over_500K_flag,
              CASE WHEN total_gross_cost < 500000 THEN TRUE ELSE FALSE END AS under_500K_flag,
              case
              when total_gross_cost < 500000 Then 'UNDER_500K'
              when total_gross_cost >= 500000 and total_gross_cost < 1000000 then '500K-1M'
              when total_gross_cost >= 1000000 and total_gross_cost < 5000000 then '1M-5M'
              when total_gross_cost >= 5000000 and total_gross_cost < 10000000 then '5M-10M'
              when total_gross_cost >= 10000000  then '>10M'
              else 'Other'
              end as rev_flag


              FROM
        (
        select
        cliYear.adjusted_client_name,
        cliYear.year,
        cliYear.total_gross_cost,
        --cliYear.client_id,
        ROW_NUMBER() OVER(PARTITION BY cliYear.adjusted_client_name ORDER BY cliYear.year ASC) AS row_num,
        ROW_NUMBER() OVER(PARTITION BY cliYear.year ORDER BY cliYear.total_gross_cost DESC) AS row_num_gross
        from (
        SELECT

        cli.adjusted_client_name as adjusted_client_name,
        TO_CHAR(rd.broadcast_date, 'YYYY') AS year,
        --rd.client_id,
        SUM(rd.total_gross_cost) AS total_gross_cost,
        ROW_NUMBER() OVER(PARTITION BY isnull(cli.adjusted_client_name) ORDER BY TO_CHAR(rd.broadcast_date, 'YYYY') ASC) AS row_num

        FROM public.rawdata_non_invoice_2014to2018 rd

        left join (

        select
        sbms_client_id,
        sbms_product_id,
        adjusted_client_name

        from production.gsheet.client_lkp
        group by
        sbms_client_id,
        sbms_product_id,
        adjusted_client_name


        ) cli

        on cli.sbms_client_id = rd.client_id
        and cli.sbms_product_id = rd.product_id



        group by
        cli.adjusted_client_name,
        TO_CHAR(rd.broadcast_date, 'YYYY')


        ) cliYear

        GROUP BY 1, 2, 3

        )

        ) temp

        group by
        temp.adjusted_client_name,
        temp.new_client_flag,
        temp.top_client_flag,
        temp.cli_list,
        temp.year,
        temp.over_5M_flag,
        temp.over_1M_flag,
        temp.over_500K_flag,
        temp.under_500K_flag,
        temp.rev_flag


        )


          SELECT
                rd.week_number,
            rd.number_of_spots,
            rd.station_id,
            rd.vendor_id,
            rd.CALL_LETTERS,
            rd.station_name,


            isnull(us.station_name, us1.station_name) AS gsheet_station_name,
            CASE WHEN snm.adjusted_show_name IS NOT NULL THEN snm.adjusted_show_name ELSE rd.station_name END AS adjusted_station_name,
            rd.ESTIMATE_ID,
            rd.estimate_name,
            rd.FLIGHT_START_DATE,
            rd.FLIGHT_END_DATE,
            rd.alternate_billing_code,
            rd.billing_code,
            rd.product_id,
            rd.product_name,
            rd.client_id,
            rd.free_spot,
            rd.paid_spot,
            rd.talent_fee,
            cl.sbms_client_id AS client_id_duplicate_check,
            rd.client_name AS SBMS_client_name,
            cl.latitude,
            cl.longitude,
            cl.adjusted_client_name AS gsheet_client_name,
            ushow.master_vendor_id as master_vendor_id,
            cl.state as client_state,
            CASE WHEN cl.adjusted_client_name IS NOT NULL AND cl.adjusted_client_name <> '' THEN cl.adjusted_client_name ELSE rd.client_name END AS client_name,
            rd.spot_cost,
            rd.total_gross_cost,
            rd.total_net_cost,
            rd.ace_cost AS total_ace_cost,
            vendor.direct_bill_code,
            CASE WHEN adjace.estimate_id IS NULL THEN rd.ace_cost ELSE rd.spot_cost * rd.number_of_spots * adjace.adjusted_ace END AS adjusted_ACE_cost,
            adjace.estimate_id||'-'||adjace.estimate_date AS estimate_date_adjusted_ace,
            snm.vendor_id||'-'||snm.station_id AS show_list_unique_id,
            rd.week_beginning_date,
            max(rd.week_beginning_date) over (partition by cl.adjusted_client_name) as max_client_date,



            start_date.first_year,
            start_date.first_month,
            start_date.first_quarter,
            start_date.first_broadcast_date,
            start_date.last_broadcast_date,

            start_date_cli.first_year as first_year_cli,
            start_date_cli.first_month as first_month_cli,
            start_date_cli.first_quarter as first_quarter_cli,
            start_date_cli.first_air_date as first_air_date_cli,
            start_date_cli.last_air_date as last_air_date_cli,
            start_date_cli.first_broadcast_date as first_broadcast_date_cli,
            start_date_cli.last_broadcast_date as last_broadcast_date_cli,

            case when date_part('year', rd.broadcast_date) <= start_date.first_year then 1 else 0 end
            as new_show_ind,
            case when date_part('year', rd.broadcast_date) <= start_date.first_year then 'New Show' else 'Existing Show' end
            as new_show,
            rd.broadcast_date,
            date_part('month', rd.broadcast_date) as broadcast_month_sbms,

            case
            when date_part('month', rd.broadcast_date) = 1 then 'Jan'
            when date_part('month', rd.broadcast_date) = 2 then 'Feb'
            when date_part('month', rd.broadcast_date) = 3 then 'Mar'
            when date_part('month', rd.broadcast_date) = 4 then 'Apr'
            when date_part('month', rd.broadcast_date) = 5 then 'May'
            when date_part('month', rd.broadcast_date) = 6 then 'Jun'
            when date_part('month', rd.broadcast_date) = 7 then 'Jul'
            when date_part('month', rd.broadcast_date) = 8 then 'Aug'

            when date_part('month', rd.broadcast_date) = 9 then 'Sep'
            when date_part('month', rd.broadcast_date) = 10 then 'Oct'
            when date_part('month', rd.broadcast_date) = 11 then 'Nov'
            when date_part('month', rd.broadcast_date) = 12 then 'Dec'
            else 'Unclassified' end as broadcast_month_string
            ,

            case
            when date_part('month', rd.broadcast_date) in (1,2,3) then 1
            when date_part('month', rd.broadcast_date) in (4,5,6) then 2
            when date_part('month', rd.broadcast_date) in (7,8,9) then 3
            when date_part('month', rd.broadcast_date) in (10,11,12) then 4
            else 99 end

            as broadcast_quarter_sbms,

            rd.market_name,
            cattr.client_logo,
            cattr.churn_classification,
            isnull(cattr.business_type, 'Unclassified') as business_type,
            isnull(cattr.gender_skew, 'Unclassified') as gender_skew,
            isnull(cattr.start_year, -999) as start_year,

            lmn.market_name AS most_recent_market_name,
            amn.market_name AS market_name_duplicate_check,
            CASE WHEN ls.media_type IS NULL THEN
            CASE WHEN snm.adjusted_market_name IS NOT NULL THEN snm.adjusted_market_name ELSE amn.adjusted_market_name END
            ELSE ls.market_name END AS adjusted_market_name,

            case when rd.vendor_id > 250000 and rd.vendor_id < 300000 then 'Local Radio'
            else

            CASE WHEN ls.media_type IS NOT NULL THEN ls.media_type ELSE
                CASE WHEN snm.media_type IS NULL THEN amn.media_type ELSE snm.media_type END
            END
            end

            AS media_type,
            --snm.genre AS genre,
            CASE WHEN ls.market_name IS NOT NULL THEN 'local' ELSE
            CASE WHEN snm.market_name IS NOT NULL THEN 'non-local' ELSE 'missing' END
            END AS local_non_local_flag,
            isnull(vend.vendor_name, rd.station_name) as vendor_name,
            isnull(us2.adjusted_show_name, rd.station_name) as adjusted_show_name,
            nc.new_client_flag,
            isnull(nc.top_client_flag, 'Outside 20') as top_client_flag,
            isnull(nc.cli_list, 99) as top_cli_list,
            nc.over_5M_flag,
            nc.over_1M_flag,
            nc.over_500K_flag,
            nc.under_500K_flag,
            adjCli.adjusted_client_id,
            nc.adjusted_client_name as nc_adjusted_client_name,
            isnull(nc.rev_flag, 'Other') as rev_flag,
            --nc.rev_flag,
            sbms_cli.client_city,
            sbms_cli.client_state as client_state_sbms,
            sbms_cli.client_zip,
            --isnull(isnull(isnull(allGenre.genre_arm, strat2.genre_arm, us1.genre_arm), strat.format), us.genre_arm) AS genre_arm,
            --isnull(isnull(isnull(allGenre.genre_itunes, strat2.genre_arm, us1.genre_iTunes), strat.format), us.genre_iTunes) AS gsheet_genre_iTunes,


            isnull(isnull(isnull(strat2.genre_arm, us1.genre_arm), strat.format), us.genre_arm) AS genre_arm,

            isnull(us1.subgenre_arm, us.subgenre_arm) AS subgenre_arm,
            isnull(us1.itunes_url, us.itunes_url) AS itunes_url,
            isnull(isnull(isnull(strat2.genre_arm, us1.genre_iTunes), strat.format), us.genre_iTunes) AS gsheet_genre_iTunes,


            mark.market_name as sbms_market_vendor,

            --bact.active_inactive,

            case
            when
            bact.master_vendor_id is null
            and bact.client_id is null
            and bact.active_inactive is null then 'Mismatch or Missing From Budget'
            when
            bact.master_vendor_id is not null
            and bact.client_id is not null
            and bact.active_inactive is null then 'Blank Budget'

            when
            bact.master_vendor_id is not null
            and bact.client_id is not null
            and bact.active_inactive is not null then bact.active_inactive
            else 'Other' end
            as active_inactive,

            --bhost.host_name,
            case
            when
            bhost.master_vendor_id is null
            and bhost.client_id is null
            and bhost.host_name is null then 'Mismatch or Missing From Budget'
            when
            bhost.master_vendor_id is not null
            and bhost.client_id is not null
            and bhost.host_name is null then 'Blank Budget'

            when
            bhost.master_vendor_id is not null
            and bhost.client_id is not null
            and bhost.host_name is not null then bhost.host_name
            else 'Other' end
            as host_name,

           -- bcode.code,

            case
            when
            bcode.master_vendor_id is null
            and bcode.client_id is null
            and bcode.code is null then 'Mismatch or Missing From Budget'
            when
            bcode.master_vendor_id is not null
            and bcode.client_id is not null
            and bcode.code is null then 'Blank Budget'

            when
            bcode.master_vendor_id is not null
            and bcode.client_id is not null
            and bcode.code is not null then bcode.code
            else 'Other' end
            as code,

            --bcpm.cpm,
            case
            when
            bcpm.master_vendor_id is null
            and bcpm.client_id is null
            and bcpm.cpm is null then -99
            when
            bcpm.master_vendor_id is not null
            and bcpm.client_id is not null
            and bcpm.cpm is null then -99

            when
            bcpm.master_vendor_id is not null
            and bcpm.client_id is not null
            and bcpm.cpm is not null then bcpm.cpm
            else -99 end
            as cpm,

            --bdown.downloads,


            case
            when
            bdown.master_vendor_id is null
            and bdown.client_id is null
            and bdown.downloads is null then -99
            when
            bdown.master_vendor_id is not null
            and bdown.client_id is not null
            and bdown.downloads is null then -99

            when
            bdown.master_vendor_id is not null
            and bdown.client_id is not null
            and bdown.downloads is not null then bdown.downloads
            else -99 end
            as downloads,

            case
            when
            bplace.master_vendor_id is null
            and bplace.client_id is null
            and bplace.spot_placement is null then 'Mismatch or Missing From Budget'
            when
            bplace.master_vendor_id is not null
            and bplace.client_id is not null
            and bplace.spot_placement is null then 'Blank Budget'

            when
            bplace.master_vendor_id is not null
            and bplace.client_id is not null
            and bplace.spot_placement is not null then bplace.spot_placement
            else 'Other' end
            as spot_placement,


            --case
            --when position('05' in bslen.spot_length) > 0 then ':05'
            --when position('15' in bslen.spot_length) > 0 then ':15'
            --when position('30' in bslen.spot_length) > 0 then ':30'
            --when position('45' in bslen.spot_length) > 0 then ':45'
            --when position('60' in bslen.spot_length) > 0 then ':60'
            --when position('90' in bslen.spot_length) > 0 then ':90'
            --when position('120' in bslen.spot_length) > 0 then ':120'
            --when position('VARIOUS' in upper(bslen.spot_length)) > 0 then 'Various'
            --else 'Null' end as spot_length,
           -- bslen.spot_length,
            case
            when
            bslen.master_vendor_id is null
            and bslen.client_id is null
            and bslen.spot_length is null then 'Mismatch or Missing From Budget'
            when
            bslen.master_vendor_id is not null
            and bslen.client_id is not null
            and bslen.spot_length is null then 'Blank Budget'

            when
            bslen.master_vendor_id is not null
            and bslen.client_id is not null
            and bslen.spot_length is not null then bslen.spot_length
            else 'Other' end
            as spot_length,



          --  bslen.spot_length,
            --bstyp.spot_type,

            --case
            --when position('BAKED' in upper(bstyp.spot_type)) > 0 then 'Baked In'
            --when position('DI ' in upper(bstyp.spot_type)) > 0 then 'DI'
            --when position('EMBE' in upper(bstyp.spot_type)) > 0 then 'Embedded'
            --when position('LIVE' in upper(bstyp.spot_type)) > 0 then 'Live'
            --when position('DI ' in upper(bstyp.spot_type)) > 0 then 'DI'
            --when position('ROS' in upper(bstyp.spot_type)) > 0 then 'ROS'
            --when position('RECO' in upper(bstyp.spot_type)) > 0 then 'Recorded'
            --when position('VARIOU' in upper(bstyp.spot_type)) > 0 then 'Various'

            --else 'Null' end as spot_type,

            case
            when
            bstyp.master_vendor_id is null
            and bstyp.client_id is null
            and bstyp.spot_type is null then 'Mismatch or Missing From Budget'
            when
            bstyp.master_vendor_id is not null
            and bstyp.client_id is not null
            and bstyp.spot_type is null then 'Blank Budget'

            when
            bstyp.master_vendor_id is not null
            and bstyp.client_id is not null
            and bstyp.spot_type is not null then bstyp.spot_type
            else 'Other' end
            as spot_type,

           -- bstyp.spot_type,
          case
            when
            bstat.master_vendor_id is null
            and bstat.client_id is null
            and bstat.status is null then 'Mismatch or Missing From Budget'
            when
            bstat.master_vendor_id is not null
            and bstat.client_id is not null
            and bstat.status is null then 'Blank Budget'

            when
            bstat.master_vendor_id is not null
            and bstat.client_id is not null
            and bstat.status is not null then bstat.status
            else 'Other' end
            as status,



              case
            when
            bgrate.master_vendor_id is null
            and bgrate.client_id is null
            and bgrate.gross_rate is null then -99
            when
            bgrate.master_vendor_id is not null
            and bgrate.client_id is not null
            and bgrate.gross_rate is null then -99

            when
            bgrate.master_vendor_id is not null
            and bgrate.client_id is not null
            and bgrate.gross_rate is not null then bgrate.gross_rate
            else -99 end
            as gross_rate
            --,
            --isnull(own.owner_name, vend.ownership) as owner

            --bstat.status



            FROM matt_testing.rawdata_non_invoice_2014to2018_cond rd

						left join (

					select
					spot_id, vendor_id from production.public.rawdata_non_invoice_2014to2018
					group by spot_id, vendor_id
					) rd_init

					on rd_init.spot_id = rd.spot_id


        left join gsheet.client_lkp adjCli
        on adjCli.sbms_client_id = rd.client_id
        and adjCli.sbms_product_id = rd.product_id


        LEFT JOIN new_clients nc
        on nc.adjusted_client_name = adjCli.adjusted_client_name AND nc.year = TO_CHAR(rd.broadcast_date, 'YYYY')


        --ON nc.client_id = rd.client_id AND nc.year = TO_CHAR(rd.broadcast_date, 'YYYY')
        LEFT JOIN gsheet.market_info__show_list snm ON rd.station_id = snm.station_id
        LEFT JOIN public.local_stations ls ON rd.station_id = ls.station_id

        left join production.sbms.vendor vendor
        on vendor.vendor_id = rd_init.vendor_id

				LEFT JOIN gsheet.client_lkp cl
        ON cl.SBMS_product_id = rd.product_id
        and cl.sbms_client_id = rd.client_id

        LEFT JOIN public.most_recent_market_name lmn ON lmn.vendor_id = rd_init.vendor_id
        LEFT JOIN public.adjusted_market_name amn ON amn.market_name = lmn.market_name
        LEFT JOIN gsheet.ace_adjustment adjace ON adjace.estimate_id = rd.estimate_id AND adjace.estimate_date = rd.broadcast_date
        left join production.sbms.vendor vend on vend.vendor_id = rd_init.vendor_id
        --left join production.sbms.owner own on vend.owner_id = own.owner_id
        left join production.sbms.market mark on vend.market_id = mark.market_id

        left join production.sbms.client sbms_cli on sbms_cli.client_id = rd.client_id
        left join production.sbms.station stat on stat.station_id = rd.station_id
        left join production.sbms.strata_stations strat on strat.station_name = rd.call_letters ||'-'|| stat.band_code
        left join production.gsheet.small_radio_format strat2 on strat2.station_band = rd.call_letters ||'-'|| stat.band_code


        left join production.gsheet.unique_shows ushow
        on ushow.vendor_id = rd_init.vendor_id


        left join (select

        vendor_id,
        date_part('year', min(broadcast_date)) as first_year,
        date_part('month', min(broadcast_date)) as first_month,
        ceil(date_part('month', min(broadcast_date))/3) as first_quarter,
        min(broadcast_date) as first_broadcast_date,
        max(broadcast_date) as last_broadcast_date,
        min(week_beginning_date) as first_air_date,
        max(week_beginning_Date) as last_air_date


        from production.public.rawdata_non_invoice_2014to2018

        group by
        vendor_id

        ) start_date
        on start_date.vendor_id = rd_init.vendor_id



        left join (select

        first_show.vendor_id,
        first_show.product_id,
        first_show.client_id,
        first_show.first_year,
        first_show.first_month,

        first_show.first_quarter,
        first_show.first_broadcast_date,
        first_show.last_broadcast_date,
        first_show.first_air_date,
        first_show.last_air_date

        from (select

        vendor_id,
        product_id,
        client_id,

        date_part('year', min(broadcast_date) over (partition by vendor_id, client_id, product_id)) as first_year,
        date_part('month', min(broadcast_date) over (partition by vendor_id, client_id, product_id)) as first_month,
        ceil(date_part('month', min(broadcast_date) over (partition by vendor_id, client_id, product_id) )/3) as first_quarter,
        min(broadcast_date) over (partition by vendor_id, client_id, product_id) as first_broadcast_date,
        max(broadcast_date) over (partition by vendor_id, client_id, product_id) as last_broadcast_date,
        min(week_beginning_date) over (partition by vendor_id, client_id, product_id) as first_air_date,
        max(week_beginning_Date) over (partition by vendor_id, client_id, product_id) as last_air_date


        from production.public.rawdata_non_invoice_2014to2018

        --where client_id = 621
        --and vendor_id = 9050
        group by
        vendor_id,
        product_id,
        client_id
        ,
        broadcast_date
        ,
        week_beginning_date

        order by

        vendor_id,
        product_id,
        client_id
        ,
        broadcast_date,
        week_beginning_date

        ) first_show

        group by
        first_show.vendor_id,
        first_show.product_id,
        first_show.client_id,
        first_show.first_year,
        first_show.first_month,

        first_show.first_quarter,
        first_show.first_broadcast_date,
        first_show.last_broadcast_date,
        first_show.first_air_date,
        first_show.last_air_date

        ) start_date_cli

        on start_date_cli.vendor_id = rd_init.vendor_id
        and start_date_cli.product_id = rd.product_id
        and start_date_cli.client_id = rd.client_id

        left join production.budget_data.budget_active_inactive bact
        --on ushow.master_vendor_id = bact.master_vendor_id
        on rd.vendor_id = bact.master_vendor_id


        and cl.adjusted_client_id = bact.client_id

        left join production.budget_data.budget_host_name bhost
        on rd.vendor_id = bhost.master_vendor_id
        and cl.adjusted_client_id = bhost.client_id

        left join production.budget_data.budget_code bcode
        on rd.vendor_id = bcode.master_vendor_id
        and cl.adjusted_client_id = bcode.client_id


        left join production.budget_data.budget_cpm bcpm
        on rd.vendor_id = bcpm.master_vendor_id
        and cl.adjusted_client_id = bcpm.client_id



        left join production.budget_data.budget_downloads bdown
        on rd.vendor_id = bdown.master_vendor_id
        and cl.adjusted_client_id = bdown.client_id

        left join production.budget_data.budget_spot_length bslen
        on rd.vendor_id = bslen.master_vendor_id
        and cl.adjusted_client_id = bslen.client_id


        left join production.budget_data.budget_spot_type bstyp
        on rd.vendor_id = bstyp.master_vendor_id
        and cl.adjusted_client_id = bstyp.client_id


        left join production.budget_data.budget_spot_placement bplace
        on rd.vendor_id = bplace.master_vendor_id
        and cl.adjusted_client_id = bplace.client_id


        left join production.budget_data.budget_status bstat
        on rd.vendor_id = bstat.master_vendor_id
        and cl.adjusted_client_id = bstat.client_id

        left join production.budget_data.budget_gross_rate bgrate
        on rd.vendor_id = bgrate.master_vendor_id
        and cl.adjusted_client_id = bgrate.client_id


        --left join production.gsheet.all_genre_classification allGenre
        --on allGenre.vendor_id = rd.vendor_id
        --left join production.budget_data.budget_daypart bday
        --on rd.vendor_id = bstat.master_vendor_id
        --and rd.client_id = bstat.client_id


        left join production.client_order_data.client_attributes cattr
        on cattr.adjusted_client_id = cl.adjusted_client_id

            LEFT JOIN (

            select

            ushow3.vendor_id,
            ushow3.station_name,
            ushow3.subgenre_arm,
            ushow3.itunes_url,
            ushow3.genre_arm,
            ushow3.genre_itunes

            from (
            select
            ushow2.vendor_id,
            ushow2.station_name,
            ushow2.subgenre_arm,
            ushow2.itunes_url,
            ushow2.genre_arm,
            ushow2.genre_itunes,
            ushow2.rowNum,
            max(ushow2.rowNum) over (partition by ushow2.vendor_id) as maxRow

            from
            (SELECT
            ushow1.vendor_id,
            ushow1.station_name,
            ushow1.subgenre_arm,
            ushow1.itunes_url,
            isnull(ushow1.genre_arm, sstat.format) as genre_arm,
            isnull(ushow1.genre_itunes, sstat.format) as genre_itunes,

            ROW_NUMBER() over (partition by ushow1.vendor_id order by ushow1.station_name) as rowNum
            FROM production.gsheet.unique_shows_loc ushow1
            left join production.sbms.strata_stations sstat
            on sstat.station_name = ushow1.station_name
            where ushow1.vendor_id <> 0

            )
            ushow2

            group by

            ushow2.vendor_id,
            ushow2.station_name,
            ushow2.subgenre_arm,
            ushow2.itunes_url,
            ushow2.genre_arm,
            ushow2.genre_itunes,
            ushow2.rowNum

            ) ushow3

            where ushow3.rowNum = ushow3.maxRow

            group by ushow3.vendor_id,
            ushow3.station_name,
            ushow3.subgenre_arm,
            ushow3.itunes_url,
            ushow3.genre_arm,
            ushow3.genre_itunes

            ) us
            on us.vendor_id = rd.vendor_id

            LEFT JOIN (

            SELECT
            ushow.*
            FROM production.gsheet.unique_shows ushow
            where ushow.vendor_id = 0


            ) us1
            on us1.station_name = rd.station_name

            left join
            (select

            ushow.vendor_id,
            ushow.adjusted_show_name
            from production.gsheet.unique_shows ushow
            where ushow.vendor_id <> 0

            ) us2
            on us2.vendor_id = rd.vendor_id



            WHERE
            ((cl.adjusted_client_name IS not NULL
        and cl.adjusted_client_name NOT LIKE '%%EXCLUDE%%'
        and upper(cl.adjusted_client_name) NOT LIKE '%%AT&T (NON-MEDIA/ARMS)%%'
        )
        or
        (cl.adjusted_client_name IS NULL))
        and rd.estimate_id <> 99999999
            ORDER BY client_name, week_beginning_date)
            WHERE estimate_name like '%%""" + year + """%%'
            GROUP BY vendor_name,adjusted_show_name,estimate_id,estimate_name,adjusted_client_id,vendor_id""",engine)
        print('done with names')

        names_df['formatted_smbs'] = names_df['vendor_name'].apply(lambda x: format_strings(x))
        #names_df['formatted_adjusted'] = names_df['adjusted_show_name'].apply(lambda x: format_strings(x))
        names_df['formatted_adjusted'] = names_df['adjusted_show_name'].str.lower()
        def percentage_converter(x):
            if (type(x) == int) | (type(x) == float):
                return x
            else:
                try:
                    if pd.notna(x):
                        if "%" in str(x):
                            final_number = float(re.sub("[^0-9.]",'',str(x)))/100
                        else:
                            final_number = float(re.sub("[^0-9.]",'',str(x)))
                        return final_number
                    else:
                        return np.NaN
                except:
                    return np.NaN
        def gsheet_budget_upload(url,adjusted_client_ID):
            try:
                print("getting info for: " + str(adjusted_client_ID))
                json_datas = go
                scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
                creds = ServiceAccountCredentials.from_json_keyfile_dict(json_datas,scope)
                client = gspread.authorize(creds)
                workbook = client.open_by_url(url)

                try:
                    workbook.add_worksheet("Database Names",rows = 4000,cols = 15)
                except Exception as e:
                    stuff = 1
#                try:
#                    workbook.add_worksheet("Error Report",rows = 4000,cols = 15)
#                except:
#                    stuff = 1

                sheet = workbook.worksheet("Flowchart")
                list_of_values = sheet.get_all_values()

                df = pd.DataFrame(data = list_of_values[1:],columns=list_of_values[0])
                df = df[(df['Roll Up - Show'] != "") | (df['Roll Up - Show'].notna())]
                if len(df) > 0:
                    try:
                        df.drop(columns=["Total Spots/Talent Fees/Impressions","Gross Cost","Ace Cost"],inplace=True)
                    except:
                        x = 1
                    df['adjusted_client_id'] = adjusted_client_ID
                    client_df = names_df[names_df['adjusted_client_id'] == adjusted_client_ID]
                    #df['formatted'] = df['Roll Up - Show'].apply(lambda x: format_strings(x))
                    df['formatted'] = df['Roll Up - Show'].str.lower()
                    def match_finder(row):
                        try:
                            estimate_filter = client_df[client_df['estimate_id'] == int(re.sub("[^A-Za-z0-9]+","",row['Estimate']))]
                            if row['formatted'] in list(estimate_filter['formatted_adjusted']):
                                id_list = estimate_filter[estimate_filter['formatted_adjusted'] == row['formatted']]['vendor_id'].unique()
                                if len(id_list) > 0:
                                    final_value = int(id_list[0])
                            elif row['formatted'] in list(estimate_filter['formatted_smbs']):
                                id_list = estimate_filter[estimate_filter['formatted_smbs'] == row['formatted']]['vendor_id'].unique()
                                if len(id_list) > 0:
                                    final_value = int(id_list[0])
                            else:
                                final_value = None
                        except Exception as e:
                            final_value = None
                        return final_value
                    df['master_vendor_id'] = df.apply(match_finder,axis=1)
                    all_columns = df.columns

                    date_columns = [x for x in all_columns if str(x).replace("/","").isnumeric()]
                    non_dates = [x for x in all_columns if str(x).replace("/","").isnumeric() != True]

                    df.replace("",np.NaN,inplace = True)

                    df = df.melt(id_vars=non_dates,value_vars=date_columns,value_name="num_spot",var_name='date')

                    df = df[df['num_spot'].notna()]

                    df.columns = [re.sub("[^A-Za-z0-9]+"," ",col).lower().strip().replace("  "," ").replace(" ","_") for col in df.columns]
                    df.drop_duplicates(inplace=True)
                    df['loaded_time'] = pd.Timestamp.now()
                    df['date'] = df['date'].apply(lambda x: pd.to_datetime((x + "/2021").replace("12/28/2021","12/28/2020").replace("12/29/2021","12/29/2020").replace("12/30/2021","12/30/2020").replace("12/31/2021","12/31/2020")))

                    df.to_csv(str(adjusted_client_ID) + "_2021.csv",index = False)
                    sheet = workbook.worksheet("Database Names")
                    sheet.clear()
                    client_df = client_df[["estimate_id","estimate_name","vendor_name","adjusted_show_name","vendor_id"]]
                    client_df = client_df.sort_values(by='adjusted_show_name')
                    cell_range = sheet.range("A1:E"+ str(len(client_df) + 1))
                    df_as_list = ["estimate id","estimate name","SBMS name","Database Name","Vendor ID"] + client_df.replace(np.NaN,"").values.flatten().tolist()
                    count = 0
                    for index,cell in enumerate(cell_range):
                        cell.value = df_as_list[index]
                    sheet.update_cells(cell_range)

                    def title_strings(x):
                        if pd.notna(x):
                            final_string = x.title()
                        else:
                            final_string = np.NaN
                        return final_string

                    for column in ['spot_type','spot_placement','active_inactive']:
                        df[column] = df[column].apply(lambda x: title_strings(x))
                    spot_type_list = ['Baked In', 'Di', 'Live', 'Recorded', 'Voiced', 'Sponsored', 'Non-Audio']
                    spot_type_errors = df[~df['spot_type'].isin(spot_type_list)]
                    spot_type_errors = spot_type_errors[['roll_up_show','show_detail',"spot_type"]].drop_duplicates()
                    spot_type_errors['error_column'] = 'Spot Type'
                    spot_type_errors.fillna("Blank",inplace = True)
                    spot_type_errors.rename(columns={'spot_type':'error'},inplace=True)
                    spot_type_errors['error'] = spot_type_errors['error'].apply(lambda x: x + " is not an approved value for this column")

                    spot_placement_list = ["Mid","Fib","Isl","Pre Or Mid","Pre/Post","Billboard","Ros","Bonus","Pre","Social Media","In-Game","Payment","Pre/Mid","Website","Post","Traffic"]
                    spot_placement_errors = df[~df['spot_placement'].isin(spot_placement_list)]
                    spot_placement_errors = spot_placement_errors[['roll_up_show','show_detail',"spot_placement"]].drop_duplicates()
                    spot_placement_errors['error_column'] = 'Spot Placement'
                    spot_placement_errors.fillna("Blank",inplace = True)
                    spot_placement_errors.rename(columns={'spot_placement':'error'},inplace=True)
                    spot_placement_errors['error'] = spot_placement_errors['error'].apply(lambda x: x + " is not an approved value for this column")
                    df['num_spot'] = df['num_spot'].apply(lambda x: percentage_converter(x))
                    #df = df[df['num_spot'] > 0]
                    non_match_errors = df[df['master_vendor_id'].isna()][['roll_up_show','show_detail']].drop_duplicates()
                    non_match_errors['error_column'] = "Roll up - Show"
                    non_match_errors['error'] = "Not Matching to SBMS, be sure to check you're Estimate ID and Roll - Up Show Names"


                    total_errors = pd.concat([spot_type_errors,spot_placement_errors,non_match_errors],sort=False)

                    total_errors = total_errors[['roll_up_show','show_detail','error_column','error']]

                    del spot_placement_errors
                    del spot_type_errors
                    del non_match_errors
                    total_errors.sort_values(by = 'roll_up_show',inplace = True)
#                    sheet = workbook.worksheet("Error Report")
#                    if len(total_errors) > 0:
#                        sheet.clear()
#                        error_list = ['Roll Up - Show',"Show - Detail","Error column","Error"] + total_errors.replace(np.NaN,"Blank Value").values.flatten().tolist()
#                        cell_range = sheet.range("A1:D" + str(len(total_errors) + 1))
#                        for index,cell in enumerate(cell_range):
#                            cell.value = error_list[index]
#                        sheet.update_cells(cell_range)

#                    else:
#                        sheet.clear()
#                        sheet.update_cell(1,1,"No Errors, Great Job!")
#                        sheet.update_cell(1,2,"https://media2.s-nbcnews.com/j/newscms/2018_20/1339477/puppy-cute-today-180515-main_a936531048fdb698635dd1b418abdee9.fit-2000w.jpg")

            except Exception as e:
                print(str(adjusted_client_ID) + " Failed due to: " + str(e))

        single_list = []
        thread_list = []
        count = 0
        main_count = 0
        for index,row in urls.iterrows():
            single_list.append(Thread(target=gsheet_budget_upload,args=[row['url_of_budget'],row['adjusted_client_id']]))
            if count == 19:
                count = 0
                thread_list.append(single_list)
                single_list = []
            else:
                count+= 1
            main_count += 1
            if main_count == len(urls):
                thread_list.append(single_list)


        count = 0
        for batch in thread_list:
            print('starting batch ' + str(count + 1) + ' out of ' + str(len(thread_list)))
            for process in batch:
                process.start()
            for process in batch:
                process.join()
            if count != len(thread_list):
                time.sleep(20)
            count += 1

        for index,row in urls.iterrows():
            try:
                df = pd.read_csv(str(row['adjusted_client_id']) + '_2021.csv')
                df_list.append(df)
                del df
            except:
                print('reading csv errored')


        if active_client == 1:
            df_baseline = pd.read_sql("""select budg.* from production.gsheet_budgets.gsheet_budgets_2021 budg inner join (
            SELECT
            cast(adjusted_client_id as int) as adjusted_client_id,
            client_name ,
            active_client
            FROM production.gsheet_budgets.client_urls_2021
            where active_client = 0
            group by
            cast(adjusted_client_id as int) ,
            client_name  ,
            active_client
            ) act_cli

            on act_cli.adjusted_client_id = budg.adjusted_client_id""",engine)

            if len(df_baseline) > 0:
                try:
                    df_baseline['date'] = df_baseline['date'].dt.date
                    df_list.append(df_baseline)

                    df = pd.concat(df_list,sort = False)
                except:
                    df = pd.concat(df_list,sort = False)



            #df_baseline['date'] = df_baseline['date'].dt.date
            #df_list.append(df_baseline)

            #df = pd.concat(df_list,sort = False)
        else:
            df = pd.concat(df_list,sort = False)


        #df = pd.concat(df_list,sort = False)

        col_data_type_dict = {}
        for col in df.columns:
            col_data_type_dict[col] = VARCHAR
        schema = 'gsheet_budgets'
        table_name = 'gsheet_budgets_2021'
        def percentage_converter(x):
            if (type(x) == int) | (type(x) == float):
                return x
            else:
                try:
                    if pd.notna(x):
                        if "%" in str(x):
                            final_number = float(re.sub("[^0-9.]",'',str(x)))/100
                        else:
                            final_number = float(re.sub("[^0-9.]",'',str(x)))
                        return final_number
                    else:
                        return np.NaN
                except:
                    return np.NaN
        for col in ['estimate','downloads_aqh',"cpm","commission",'gross_spot_cost','client_net_spot_cost','num_spot','master_vendor_id','adjusted_client_id']:
            print(col)
            col_data_type_dict[col] = FLOAT
            df[col] = df[col].apply(lambda x: percentage_converter(x))
        #df['date'] = df['date'].apply(lambda x: pd.to_datetime((x + "/2021").replace("12/28/2021","12/28/2020").replace("12/29/2021","12/29/2020").replace("12/30/2021","12/30/2020").replace("12/31/2021","12/31/2020")))
        df['estimate'] = df['estimate'].apply(lambda x: convert_to_int(x))
        df['estimate'] = pd.Series(data= df['estimate'],dtype="Int64")
        df['master_vendor_id'] = pd.Series(data = df['master_vendor_id'],dtype="Int64")
        df['adjusted_client_id'] = pd.Series(data = df['adjusted_client_id'],dtype="Int64")
        df = df[df['num_spot'].notna()]
        col_data_type_dict['date'] = DATETIME
        col_data_type_dict['estimate'] = INTEGER
        col_data_type_dict['loaded_time'] = DATETIME
        top = df.head(1)
        top.to_sql(table_name,engine,schema=schema,if_exists="replace",dtype=col_data_type_dict,index=False)
        df.to_csv('new_table.csv',index = False)
        s3 = boto3.resource("s3")
        s3.meta.client.upload_file('new_table.csv','adresults','new_table.csv')
        os.remove('new_table.csv')
        print('done')
        query_delete = """TRUNCATE """  + schema + "." + table_name
        query_copy = """copy """ + schema + "." + table_name + """
        from 's3://adresults/new_table.csv'
        credentials 'aws_access_key_id=""" + acc + """;aws_secret_access_key=""" + sh + """'
        IGNOREHEADER 1
        EMPTYASNULL
        csv;"""
        query_update = """update gsheet_budgets.gsheet_budgets_2021
        set master_vendor_id = t1.master_vendor_id
        from (SELECT vendor_id, master_vendor_id
              FROM gsheet.unique_shows
          where master_vendor_id <> 0
             ) t1
        where gsheet_budgets.gsheet_budgets_2021.master_vendor_id = t1.vendor_id;"""


        print('starting upload')
        conn = engine.connect()
        conn.execute(text(query_delete).execution_options(autocommit=True))
        conn.execute(text(query_copy).execution_options(autocommit=True))
        conn.execute(text(query_update).execution_options(autocommit=True))
        conn.close()
        print('done done')

        final_string = "budget gsheet update was successful"
    except Exception as e:
        final_string = "budget gsheet update failed due to: " + str(e)
    error_report.append(final_string)






def create_combined_spend_spot_budget():


    query = """

set timezone = 'America/Los_Angeles';
 DROP TABLE IF EXISTS production.gsheet_budgets.combined_spend_month_client_spot;

CREATE TABLE production.gsheet_budgets.combined_spend_month_client_spot AS

 SELECT
    bud.*,
    case
    when upper(bud.broadcast_month) like '%JAN%' then 1
    when upper(bud.broadcast_month) like '%FEB%' then 2
    when upper(bud.broadcast_month) like '%MAR%' then 3
    when upper(bud.broadcast_month) like '%APR%' then 4
    when upper(bud.broadcast_month) like '%MAY%' then 5
    when upper(bud.broadcast_month) like '%JUN%' then 6
    when upper(bud.broadcast_month) like '%JUL%' then 7
    when upper(bud.broadcast_month) like '%AUG%' then 8
    when upper(bud.broadcast_month) like '%SEP%' then 9
    when upper(bud.broadcast_month) like '%OCT%' then 10
    when upper(bud.broadcast_month) like '%NOV%' then 11
    when upper(bud.broadcast_month) like '%DEC%' then 12
    else 99 end as broadcast_month_number,

    case
    when upper(bud.broadcast_month) like '%JAN%' then 1
    when upper(bud.broadcast_month) like '%FEB%' then 1
    when upper(bud.broadcast_month) like '%MAR%' then 1
    when upper(bud.broadcast_month) like '%APR%' then 2
    when upper(bud.broadcast_month) like '%MAY%' then 2
    when upper(bud.broadcast_month) like '%JUN%' then 2
    when upper(bud.broadcast_month) like '%JUL%' then 3
    when upper(bud.broadcast_month) like '%AUG%' then 3
    when upper(bud.broadcast_month) like '%SEP%' then 3
    when upper(bud.broadcast_month) like '%OCT%' then 4
    when upper(bud.broadcast_month) like '%NOV%' then 4
    when upper(bud.broadcast_month) like '%DEC%' then 4
    else 99 end as broadcast_quarter_number
from (

select
temp2.*,
case
when temp2.adjusted_client_id = 308 and temp2.broadcast_year = 2019 and upper(temp2.broadcast_month) like '%JAN%'
then 0.95

when temp2.adjusted_client_id = 308 and temp2.broadcast_year = 2019 and upper(temp2.broadcast_month) like '%FEB%'
then 0.95

when temp2.adjusted_client_id = 308 and temp2.broadcast_year = 2019 and upper(temp2.broadcast_month) like '%MAR%'
then 0.95

when temp2.adjusted_client_id = 308 and temp2.broadcast_year = 2019 and upper(temp2.broadcast_month) like '%APR%'
then 0.94
else
isnull(tier.commission,1)
end

as commission_tier,
isnull(temp2.num_spot * temp2.gross_spot_cost,0) as total_gross_spot_cost,

case
when temp2.adjusted_client_id = 308 and temp2.broadcast_year = 2019 and upper(temp2.broadcast_month) like '%JAN%'
then isnull(temp2.num_spot * temp2.client_net_spot_cost,0) * 0.95

when temp2.adjusted_client_id = 308 and temp2.broadcast_year = 2019 and upper(temp2.broadcast_month) like '%FEB%'
then isnull(temp2.num_spot * temp2.client_net_spot_cost,0) * 0.95

when temp2.adjusted_client_id = 308 and temp2.broadcast_year = 2019 and upper(temp2.broadcast_month) like '%MAR%'
then isnull(temp2.num_spot * temp2.client_net_spot_cost,0) * 0.95

when temp2.adjusted_client_id = 308 and temp2.broadcast_year = 2019 and upper(temp2.broadcast_month) like '%APR%'
then isnull(temp2.num_spot * temp2.client_net_spot_cost,0) * 0.94
else
isnull(temp2.num_spot * temp2.client_net_spot_cost,0) * isnull(tier.commission,1)
end

as total_spot_cost,





--isnull(temp2.num_spot * temp2.client_net_spot_cost,0) * isnull(tier.commission,1) as --total_spot_cost,
case
when upper(temp2.show_detail) like '%%PANDORA%%' then 1
when upper(temp2.show_detail) like '%%GEOTARG%%' then 1
when upper(temp2.show_detail) like '%%SPOTIFY%%' then 1
when upper(temp2.show_detail) like '%% TF%%' then 0
else temp2.num_spot end as spots_pandora_mod,
max(temp2.date) over (partition by temp2.adjusted_client_id, temp2.roll_up_show) as maxDate,
min(temp2.date) over (partition by temp2.adjusted_client_id, temp2.roll_up_show) as minDate,
cli.adjusted_client_name
from (select
temp.*,
sum(temp.gross_spend) over (partition by temp.adjusted_client_id, temp.broadcast_year, temp.broadcast_month) as monthSpend
from (

SELECT
bud.roll_up_show,
bud.show_detail,
bud.estimate,
bud.gross_spot_cost,
bud.client_net_spot_cost,
bud.adjusted_client_id,
bud.date,
bud.num_spot,
bcal.broadcast_year,
bcal.broadcast_week_number,
bcal.broadcast_week,
bmon.month as broadcast_month,
gross_spot_cost * num_spot as gross_spend

FROM (
(select
temp1.roll_up_show,
temp1.show_detail,
temp1.estimate,
cast(temp1.gross_spot_cost as float),
cast(temp1.client_net_spot_cost as float),
cast(temp1.adjusted_client_id as float),
temp1.date,
cast(temp1.num_spot as float)
from ((select

temp.roll_up_show as roll_up_show,
temp.show_detail as show_detail,
temp.estimate,
cast(temp.gross_spot_cost as float) as gross_spot_cost,
cast(temp.client_net_spot_cost as float) as client_net_spot_cost,
cast(temp.adjusted_client_id as float) as adjusted_client_id,
temp.date,
cast(temp.num_spot as float) as num_spot

from production.gsheet_budgets.crazy_gsheet_budget temp

where temp.num_spot >= 0
and temp.gross_spot_cost >= 0
group by
temp.roll_up_show,
temp.show_detail,
temp.estimate,
cast(temp.gross_spot_cost as float),
cast(temp.client_net_spot_cost as float),
cast(temp.adjusted_client_id as float),
temp.date,
cast(temp.num_spot as float)

)

union all
(
select

temp2.roll_up_show,
temp2.show_detail,
temp2.estimate,
temp2.gross_spot_cost,
temp2.client_net_spot_cost,
temp2.adjusted_client_id,
temp2.date,
temp2.num_spot
from(
select

temp.roll_up_show as roll_up_show,
temp.show_detail as show_detail,
temp.estimate,
cast(temp.gross_tf as float) as gross_spot_cost,
cast(temp.client_net_tf as float) as client_net_spot_cost,
cast(temp.adjusted_client_id as float) as adjusted_client_id,
min(temp.date) over (partition by adjusted_client_id, temp.show_detail) as date,
1 as num_spot

from production.gsheet_budgets.crazy_gsheet_budget temp

where upper(temp.talent_codes) = 'OT' and temp.num_spot > 0
group by
temp.roll_up_show,
temp.show_detail ,
temp.estimate,
cast(temp.gross_tf as float),
cast(temp.client_net_tf as float) ,
cast(temp.adjusted_client_id as float) ,
temp.date,
adjusted_client_id
) temp2

group by
temp2.roll_up_show,
temp2.show_detail,
temp2.estimate,
temp2.gross_spot_cost,
temp2.client_net_spot_cost,
temp2.adjusted_client_id,
temp2.date,
temp2.num_spot
)


union all
(
select

temp2.roll_up_show,
temp2.show_detail,
temp2.estimate,
temp2.gross_spot_cost,
temp2.client_net_spot_cost,
temp2.adjusted_client_id,
temp2.date,
temp2.num_spot
from(
select

temp.roll_up_show as roll_up_show,
temp.show_detail as show_detail,
temp.estimate,
cast(temp.gross_tf as float) as gross_spot_cost,
cast(temp.client_net_tf as float) as client_net_spot_cost,
cast(temp.adjusted_client_id as float) as adjusted_client_id,
temp.date,
temp.num_spot

from production.gsheet_budgets.crazy_gsheet_budget temp

where upper(temp.talent_codes) = 'SP' and temp.num_spot > 0
group by
temp.roll_up_show,
temp.show_detail ,
temp.estimate,
cast(temp.gross_tf as float),
cast(temp.client_net_tf as float) ,
cast(temp.adjusted_client_id as float) ,
temp.date,
adjusted_client_id,
temp.num_spot
) temp2

group by
temp2.roll_up_show,
temp2.show_detail,
temp2.estimate,
temp2.gross_spot_cost,
temp2.client_net_spot_cost,
temp2.adjusted_client_id,
temp2.date,
temp2.num_spot
)




union all
(
select

temp2.roll_up_show,
temp2.show_detail,
temp2.estimate,
temp2.gross_spot_cost,
temp2.client_net_spot_cost,
temp2.adjusted_client_id,
temp2.date,
1 as num_spot
from(
select

temp.roll_up_show as roll_up_show,
temp.show_detail as show_detail,
temp.estimate,
cast(temp.gross_tf as float) as gross_spot_cost,
cast(temp.client_net_tf as float) as client_net_spot_cost,
cast(temp.adjusted_client_id as float) as adjusted_client_id,
bcal.broadcast_week as date

from production.gsheet_budgets.crazy_gsheet_budget temp
left join production.public.broadcast_calendar bcal
on temp.date = bcal.broadcast_date
where upper(temp.talent_codes) = 'WK' and temp.num_spot > 0
group by
temp.roll_up_show,
temp.show_detail ,
temp.estimate,

cast(temp.gross_tf as float),
cast(temp.client_net_tf as float) ,
cast(temp.adjusted_client_id as float) ,
bcal.broadcast_week ,
adjusted_client_id
) temp2

group by
temp2.roll_up_show,
temp2.show_detail,
temp2.estimate,

temp2.gross_spot_cost,
temp2.client_net_spot_cost,
temp2.adjusted_client_id,
temp2.date
)





union all
(
select

temp2.roll_up_show,
temp2.show_detail,
temp2.estimate,
temp2.gross_spot_cost,
temp2.client_net_spot_cost,
temp2.adjusted_client_id,
temp2.date,
1 as num_spot
from(
select

temp.roll_up_show as roll_up_show,
temp.show_detail as show_detail,
temp.estimate,
cast(temp.gross_tf as float) as gross_spot_cost,
cast(temp.client_net_tf as float) as client_net_spot_cost,
cast(temp.adjusted_client_id as float) as adjusted_client_id,
to_Date(case
when upper(bmon.month) like '%JAN%' then '2018-12-31'
when upper(bmon.month) like '%FEB%' then '2019-01-28'
when upper(bmon.month) like '%MAR%' then '2019-02-25'
when upper(bmon.month) like '%APR%' then '2019-04-01'
when upper(bmon.month) like '%MAY%' then '2019-04-29'
when upper(bmon.month) like '%JUN%' then '2019-05-27'
when upper(bmon.month) like '%JUL%' then '2019-07-01'
when upper(bmon.month) like '%AUG%' then '2019-07-29'
when upper(bmon.month) like '%SEP%' then '2019-08-26'
when upper(bmon.month) like '%OCT%' then '2019-09-30'
when upper(bmon.month) like '%NOV%' then '2019-10-28'
when upper(bmon.month) like '%DEC%' then '2019-11-25'


--when date_part('month', bcal.broadcast_week) = 1 then '2018-12-31'
--when date_part('month', bcal.broadcast_week) = 2 then '2019-01-28'
--when date_part('month', bcal.broadcast_week) = 3 then '2019-02-25'
--when date_part('month', bcal.broadcast_week) = 4 then '2019-04-01'
--when date_part('month', bcal.broadcast_week) = 5 then '2019-04-29'
--when date_part('month', bcal.broadcast_week) = 6 then '2019-05-27'
--when date_part('month', bcal.broadcast_week) = 7 then '2019-07-01'
--when date_part('month', bcal.broadcast_week) = 8 then '2019-07-29'
--when date_part('month', bcal.broadcast_week) = 9 then '2019-08-26'
--when date_part('month', bcal.broadcast_week) = 10 then '2019-09-30'
--when date_part('month', bcal.broadcast_week) = 11 then '2019-10-28'
--when date_part('month', bcal.broadcast_week) = 12 then '2019-11-25'
else  '2019-11-25' end, 'YYYY-MM-DD') as date

from production.gsheet_budgets.crazy_gsheet_budget temp
left join production.public.broadcast_calendar bcal
on temp.date = bcal.broadcast_date

left join production.public.broadcast_month_lookup bmon
on bmon.year = bcal.broadcast_year
and bmon.week = bcal.broadcast_week_number


where (upper(temp.talent_codes) = 'MO' or upper(temp.talent_codes) = 'MONTH') and temp.num_spot > 0
group by
temp.roll_up_show,
temp.show_detail ,
temp.estimate,
cast(temp.gross_tf as float),
cast(temp.client_net_tf as float) ,
cast(temp.adjusted_client_id as float) ,
to_Date(case
when upper(bmon.month) like '%JAN%' then '2018-12-31'
when upper(bmon.month) like '%FEB%' then '2019-01-28'
when upper(bmon.month) like '%MAR%' then '2019-02-25'
when upper(bmon.month) like '%APR%' then '2019-04-01'
when upper(bmon.month) like '%MAY%' then '2019-04-29'
when upper(bmon.month) like '%JUN%' then '2019-05-27'
when upper(bmon.month) like '%JUL%' then '2019-07-01'
when upper(bmon.month) like '%AUG%' then '2019-07-29'
when upper(bmon.month) like '%SEP%' then '2019-08-26'
when upper(bmon.month) like '%OCT%' then '2019-09-30'
when upper(bmon.month) like '%NOV%' then '2019-10-28'
when upper(bmon.month) like '%DEC%' then '2019-11-25'


--when date_part('month', bcal.broadcast_week) = 1 then '2018-12-31'
--when date_part('month', bcal.broadcast_week) = 2 then '2019-01-28'
--when date_part('month', bcal.broadcast_week) = 3 then '2019-02-25'
--when date_part('month', bcal.broadcast_week) = 4 then '2019-04-01'
--when date_part('month', bcal.broadcast_week) = 5 then '2019-04-29'
--when date_part('month', bcal.broadcast_week) = 6 then '2019-05-27'
--when date_part('month', bcal.broadcast_week) = 7 then '2019-07-01'
--when date_part('month', bcal.broadcast_week) = 8 then '2019-07-29'
--when date_part('month', bcal.broadcast_week) = 9 then '2019-08-26'
--when date_part('month', bcal.broadcast_week) = 10 then '2019-09-30'
--when date_part('month', bcal.broadcast_week) = 11 then '2019-10-28'
--when date_part('month', bcal.broadcast_week) = 12 then '2019-11-25'
else  '2019-11-25' end, 'YYYY-MM-DD')  ,
adjusted_client_id
) temp2

group by
temp2.roll_up_show,
temp2.show_detail,
temp2.estimate,
temp2.gross_spot_cost,
temp2.client_net_spot_cost,
temp2.adjusted_client_id,
temp2.date
)) temp1
where temp1.num_spot > 0
and temp1.gross_spot_cost > 0
group by
temp1.roll_up_show,
temp1.show_detail,
temp1.estimate,
cast(temp1.gross_spot_cost as float),
cast(temp1.client_net_spot_cost as float),
cast(temp1.adjusted_client_id as float),
temp1.date,
cast(temp1.num_spot as float)
)

union all

(select
temp2.roll_up_show,
temp2.show_detail,
temp2.estimate,
cast(temp2.gross_spot_cost as float),
cast(temp2.client_net_spot_cost as float),
cast(temp2.adjusted_client_id as float),
temp2.date,
cast(temp2.num_spot as float)
from production.gsheet_budgets.gsheet_budgets_2020 temp2
where temp2.num_spot >= 0
and temp2.gross_spot_cost >= 0
group by
temp2.roll_up_show,
temp2.show_detail,
temp2.estimate,
cast(temp2.gross_spot_cost as float),
cast(temp2.client_net_spot_cost as float),
cast(temp2.adjusted_client_id as float),
temp2.date,
cast(temp2.num_spot as float)
)

union all

(select
temp2.roll_up_show,
temp2.show_detail,
temp2.estimate,
cast(temp2.gross_spot_cost as float),
cast(temp2.client_net_spot_cost as float),
cast(temp2.adjusted_client_id as float),
temp2.date,
cast(temp2.num_spot as float)
from production.gsheet_budgets.gsheet_budgets_2021 temp2
where temp2.num_spot >= 0
and temp2.gross_spot_cost >= 0
group by
temp2.roll_up_show,
temp2.show_detail,
temp2.estimate,
cast(temp2.gross_spot_cost as float),
cast(temp2.client_net_spot_cost as float),
cast(temp2.adjusted_client_id as float),
temp2.date,
cast(temp2.num_spot as float)
)


) bud

left join production.public.broadcast_calendar bcal
on bcal.broadcast_date = bud.date

left join production.public.broadcast_month_lookup bmon
on bcal.broadcast_year = bmon.year
and bcal.broadcast_week_number = bmon.week
) temp
) temp2

left join

(
(select
tier.adjusted_client_id,
tier.min_spend,
tier.max_spend,
tier.media_type,
tier.tier,
tier.commission,
2019 as year

from production.gsheet_budgets.commission_tier_2019 tier
group by
tier.adjusted_client_id,
tier.min_spend,
tier.max_spend,
tier.media_type,
tier.tier,
tier.commission
)

union all

(select
tier1.adjusted_client_id,
tier1.min_spend,
tier1.max_spend,
tier1.media_type,
tier1.tier,
tier1.commission,
2020 as year

from production.gsheet_budgets.commission_tier_2020 tier1
where adjusted_client_id <> 222
group by
tier1.adjusted_client_id,
tier1.min_spend,
tier1.max_spend,
tier1.media_type,
tier1.tier,
tier1.commission
)

union all

(select
tier1.adjusted_client_id,
tier1.min_spend,
tier1.max_spend,
tier1.media_type,
tier1.tier,
tier1.commission,
2021 as year

from production.gsheet_budgets.commission_tier_2021 tier1
where adjusted_client_id <> 222
group by
tier1.adjusted_client_id,
tier1.min_spend,
tier1.max_spend,
tier1.media_type,
tier1.tier,
tier1.commission
)

)

tier
on tier.adjusted_client_id = temp2.adjusted_client_id
and temp2.monthSpend >= tier.min_spend
and temp2.monthSpend <= tier.max_spend
and temp2.broadcast_year = tier.year

left join


(select adjusted_client_name, adjusted_client_id from production.gsheet.client_lkp

group by adjusted_client_name, adjusted_client_id)
cli
on cli.adjusted_client_id = temp2.adjusted_client_id


) bud;

    """


    engine = create_engine(post)
    conn = engine.connect()
    conn.execute(text(query).execution_options(autocommit=True))
    conn.close()

    print('created budget combined spot table: ')




def create_combined_spend_spot_budget_all_var():


    query = """

set timezone = 'America/Los_Angeles';


DROP TABLE IF EXISTS production.gsheet_budgets.combined_spend_month_client_spot_all_var;

CREATE TABLE production.gsheet_budgets.combined_spend_month_client_spot_all_var AS

 SELECT
    bud.*,

    case
    when upper(bud.broadcast_month) like '%JAN%' then 1
    when upper(bud.broadcast_month) like '%FEB%' then 1
    when upper(bud.broadcast_month) like '%MAR%' then 1
    when upper(bud.broadcast_month) like '%APR%' then 2
    when upper(bud.broadcast_month) like '%MAY%' then 2
    when upper(bud.broadcast_month) like '%JUN%' then 2
    when upper(bud.broadcast_month) like '%JUL%' then 3
    when upper(bud.broadcast_month) like '%AUG%' then 3
    when upper(bud.broadcast_month) like '%SEP%' then 3
    when upper(bud.broadcast_month) like '%OCT%' then 4
    when upper(bud.broadcast_month) like '%NOV%' then 4
    when upper(bud.broadcast_month) like '%DEC%' then 4
    else 99 end as broadcast_quarter_number
from (

select
temp2.*,
case
when temp2.adjusted_client_id = 308 and temp2.broadcast_year = 2019 and upper(temp2.broadcast_month) like '%JAN%'
then 0.95

when temp2.adjusted_client_id = 308 and temp2.broadcast_year = 2019 and upper(temp2.broadcast_month) like '%FEB%'
then 0.95

when temp2.adjusted_client_id = 308 and temp2.broadcast_year = 2019 and upper(temp2.broadcast_month) like '%MAR%'
then 0.95

when temp2.adjusted_client_id = 308 and temp2.broadcast_year = 2019 and upper(temp2.broadcast_month) like '%APR%'
then 0.94
when temp2.broadcast_year >= curr_time.year and temp2.broadcast_month >= curr_time.current_broadcast_month then
isnull(comm_over.commission, tier.commission,ace.adjusted_ace, 1)

else
isnull(ace.adjusted_ace, comm_over.commission, tier.commission,1)
end

as commission_tier,
isnull(temp2.num_spot * temp2.gross_spot_cost,0) as total_gross_spot_cost,

case
when temp2.adjusted_client_id = 308 and temp2.broadcast_year = 2019 and upper(temp2.broadcast_month) like '%JAN%'
then isnull(temp2.num_spot * temp2.client_net_spot_cost,0) * 0.95

when temp2.adjusted_client_id = 308 and temp2.broadcast_year = 2019 and upper(temp2.broadcast_month) like '%FEB%'
then isnull(temp2.num_spot * temp2.client_net_spot_cost,0) * 0.95

when temp2.adjusted_client_id = 308 and temp2.broadcast_year = 2019 and upper(temp2.broadcast_month) like '%MAR%'
then isnull(temp2.num_spot * temp2.client_net_spot_cost,0) * 0.95

when temp2.adjusted_client_id = 308 and temp2.broadcast_year = 2019 and upper(temp2.broadcast_month) like '%APR%'
then isnull(temp2.num_spot * temp2.client_net_spot_cost,0) * 0.94
when temp2.broadcast_year >= curr_time.year and temp2.broadcast_month >= curr_time.current_broadcast_month then
isnull(temp2.num_spot * temp2.client_net_spot_cost,0) * isnull(comm_over.commission, tier.commission,ace.adjusted_ace, 1)
else
isnull(temp2.num_spot * temp2.client_net_spot_cost,0) * isnull(ace.adjusted_ace, comm_over.commission, tier.commission,1)
end

as total_spot_cost,





--isnull(temp2.num_spot * temp2.client_net_spot_cost,0) * isnull(tier.commission,1) as --total_spot_cost,
case
when upper(temp2.show_detail) like '%%PANDORA%%' then 1
when upper(temp2.show_detail) like '%%GEOTARG%%' then 1
when upper(temp2.show_detail) like '%%SPOTIFY%%' then 1
when upper(temp2.show_detail) like '%% TF%%' then 0
else temp2.num_spot end as spots_pandora_mod,
max(temp2.date) over (partition by temp2.adjusted_client_id, temp2.roll_up_show) as maxDate,
min(temp2.date) over (partition by temp2.adjusted_client_id, temp2.roll_up_show) as minDate,
cli.adjusted_client_name,
		bcal_sleep.broadcast_year as sleep_number_fy,
		bcal_sleep.broadcast_week_number as sleep_number_fy_week_num,
		bcal_sleep.broadcast_week as sleep_number_fy_week,
		bcal_sleep.broadcast_month as sleep_number_fy_month
from (select
temp.*,
sum(
--temp.gross_spend
case when upper(temp.media_type) like '% PRODUCTION%' then 0 else temp.gross_spend end

) over (partition by temp.adjusted_client_id, temp.broadcast_year, temp.broadcast_month) as monthSpend
from (

SELECT
bud.roll_up_show,
bud.show_detail,
bud.estimate,
bud.host_gender,

bud.category,
bud.code,
bud.host_name,
bud.active_inactive,
bud.market,
bud.media_type,
bud.spot_type,
bud.spot_length,
bud.spot_placement,
bud.station_group,
bud.status,
bud.format,
bud.exclusivity,
bud.daypart,
bud.downloads_aqh,
bud.cpm,
bud.commission,
bud.talent_codes,
bud.product_type,
bud.source_code,
bud.remnant_flag,

bud.gross_spot_cost,
bud.client_net_spot_cost,
bud.adjusted_client_id,
bud.date,
bud.num_spot,


bcal.broadcast_year,
bcal.broadcast_week_number,
bcal.broadcast_week,
bmon.month as broadcast_month,
case
    when upper(bmon.month) like '%JAN%' then 1
    when upper(bmon.month) like '%FEB%' then 2
    when upper(bmon.month) like '%APR%' then 4
    when upper(bmon.month) like '%MAR%' then 3
    when upper(bmon.month) like '%MAY%' then 5
    when upper(bmon.month) like '%JUN%' then 6
    when upper(bmon.month) like '%JUL%' then 7
    when upper(bmon.month) like '%AUG%' then 8
    when upper(bmon.month) like '%SEP%' then 9
    when upper(bmon.month) like '%OCT%' then 10
    when upper(bmon.month) like '%NOV%' then 11
    when upper(bmon.month) like '%DEC%' then 12
    else 99 end as broadcast_month_number,


gross_spot_cost * num_spot as gross_spend,
bud.loaded_time,
bud.cancellation_terms,
bud.state,
bud.percent_over_21,
bud.call_letters

FROM (
(select
temp1.roll_up_show,
temp1.show_detail,
temp1.estimate,

temp1.host_gender,
temp1.category,
temp1.code,
temp1.host_name,
temp1.active_inactive,
temp1.market,
temp1.media_type,
temp1.spot_type,
temp1.spot_length,
temp1.spot_placement,
temp1.station_group,
temp1.status,
temp1.format,
temp1.exclusivity,
temp1.daypart,
temp1.downloads_aqh,
temp1.cpm,
temp1.commission,
temp1.talent_codes,
temp1.product_type,
temp1.source_code,
temp1.remnant_flag,


cast(temp1.gross_spot_cost as float),
cast(temp1.client_net_spot_cost as float),
cast(temp1.adjusted_client_id as float),
temp1.date,
cast(temp1.num_spot as float),
temp1.loaded_time,
temp1.cancellation_terms,
temp1.state,
temp1.percent_over_21,
temp1.call_letters
from (

(select

temp.roll_up_show as roll_up_show,
temp.show_detail as show_detail,
temp.estimate,
temp.host_gender,
temp.category,
temp.code,
temp.host_name,
temp.active_inactive,
temp.market,
temp.media_type,
temp.spot_type,
temp.spot_length,
temp.spot_placement,
temp.station_group,
temp.status,
temp.format,
temp.exclusivity,
temp.daypart,
temp.downloads_aqh,
temp.cpm,
temp.commission,
temp.talent_codes,
temp.product_type,
temp.source_code,
--'' as remnant_flag,
temp.remnant_flag,




cast(temp.gross_spot_cost as float) as gross_spot_cost,
cast(temp.client_net_spot_cost as float) as client_net_spot_cost,
cast(temp.adjusted_client_id as float) as adjusted_client_id,
temp.date,
cast(temp.num_spot as float) as num_spot,
temp.loaded_time,
temp.cancellation_terms,
temp.state,
'' as percent_over_21,
'' as call_letters

from production.gsheet_budgets.crazy_gsheet_budget temp

where temp.num_spot >= 0
and temp.gross_spot_cost is not null
group by
temp.roll_up_show,
temp.show_detail,
temp.estimate,
temp.host_gender,


temp.category,
temp.code,
temp.host_name,
temp.active_inactive,
temp.market,
temp.media_type,
temp.spot_type,
temp.spot_length,
temp.spot_placement,
temp.station_group,
temp.status,
temp.format,
temp.exclusivity,
temp.daypart,
temp.downloads_aqh,
temp.cpm,
temp.commission,
temp.talent_codes,
temp.product_type,
temp.source_code,
temp.remnant_flag,



cast(temp.gross_spot_cost as float),
cast(temp.client_net_spot_cost as float),
cast(temp.adjusted_client_id as float),
temp.date,
cast(temp.num_spot as float),
temp.loaded_time,
temp.cancellation_terms,
temp.state

)

union all
(
select

temp2.roll_up_show,
temp2.show_detail,
temp2.estimate,
temp2.host_gender,
temp2.category,
temp2.code,
temp2.host_name,
temp2.active_inactive,
temp2.market,
temp2.media_type,
temp2.spot_type,
temp2.spot_length,
temp2.spot_placement,
temp2.station_group,
temp2.status,
temp2.format,
temp2.exclusivity,
temp2.daypart,
temp2.downloads_aqh,
temp2.cpm,
temp2.commission,
temp2.talent_codes,
temp2.product_type,
temp2.source_code,
temp2.remnant_flag,



temp2.gross_spot_cost,
temp2.client_net_spot_cost,
temp2.adjusted_client_id,
temp2.date,
temp2.num_spot,
temp2.loaded_time,
temp2.cancellation_terms,
temp2.state,
temp2.percent_over_21,
temp2.call_letters
from(
select

temp.roll_up_show as roll_up_show,
temp.show_detail as show_detail,
temp.estimate,
temp.host_gender,
temp.category,
temp.code,
temp.host_name,
temp.active_inactive,
temp.market,
temp.media_type,
temp.spot_type,
temp.spot_length,
temp.spot_placement,
temp.station_group,
temp.status,
temp.format,
temp.exclusivity,
temp.daypart,
temp.downloads_aqh,
temp.cpm,
temp.commission,
temp.talent_codes,
temp.product_type,
temp.source_code,
--'' as remnant_flag,
temp.remnant_flag,

cast(temp.gross_tf as float) as gross_spot_cost,
cast(temp.client_net_tf as float) as client_net_spot_cost,
cast(temp.adjusted_client_id as float) as adjusted_client_id,
min(temp.date) over (partition by adjusted_client_id, temp.show_detail) as date,
1 as num_spot,
temp.loaded_time,
temp.cancellation_terms,
temp.state,
'' as percent_over_21,
'' as call_letters

from production.gsheet_budgets.crazy_gsheet_budget temp

where upper(temp.talent_codes) = 'OT' and temp.num_spot > 0
group by
temp.roll_up_show,
temp.show_detail ,
temp.estimate,
temp.host_gender,


temp.category,
temp.code,
temp.host_name,
temp.active_inactive,
temp.market,
temp.media_type,
temp.spot_type,
temp.spot_length,
temp.spot_placement,
temp.station_group,
temp.status,
temp.format,
temp.exclusivity,
temp.daypart,
temp.downloads_aqh,
temp.cpm,
temp.commission,
temp.talent_codes,
temp.product_type,
temp.source_code,
temp.remnant_flag,


cast(temp.gross_tf as float),
cast(temp.client_net_tf as float) ,
cast(temp.adjusted_client_id as float) ,
temp.date,
adjusted_client_id,
temp.loaded_time,
temp.cancellation_terms,
temp.state
) temp2

group by
temp2.roll_up_show,
temp2.show_detail,
temp2.estimate,
temp2.host_gender,


temp2.category,
temp2.code,
temp2.host_name,
temp2.active_inactive,
temp2.market,
temp2.media_type,
temp2.spot_type,
temp2.spot_length,
temp2.spot_placement,
temp2.station_group,
temp2.status,
temp2.format,
temp2.exclusivity,
temp2.daypart,
temp2.downloads_aqh,
temp2.cpm,
temp2.commission,
temp2.talent_codes,
temp2.product_type,
temp2.source_code,
temp2.remnant_flag,


temp2.gross_spot_cost,
temp2.client_net_spot_cost,
temp2.adjusted_client_id,
temp2.date,




temp2.num_spot,
temp2.loaded_time,
temp2.cancellation_terms,
temp2.state,
temp2.percent_over_21,
temp2.call_letters
)


union all
(
select

temp2.roll_up_show,
temp2.show_detail,
temp2.estimate,
temp2.host_gender,

temp2.category,
temp2.code,
temp2.host_name,
temp2.active_inactive,
temp2.market,
temp2.media_type,
temp2.spot_type,
temp2.spot_length,
temp2.spot_placement,
temp2.station_group,
temp2.status,
temp2.format,
temp2.exclusivity,
temp2.daypart,
temp2.downloads_aqh,
temp2.cpm,
temp2.commission,
temp2.talent_codes,
temp2.product_type,
temp2.source_code,
temp2.remnant_flag,

temp2.gross_spot_cost,
temp2.client_net_spot_cost,
temp2.adjusted_client_id,
temp2.date,
temp2.num_spot,
temp2.loaded_time,
temp2.cancellation_terms,
temp2.state,
temp2.percent_over_21,
temp2.call_letters
from(
select

temp.roll_up_show as roll_up_show,
temp.show_detail as show_detail,
temp.estimate,
temp.host_gender,

temp.category,
temp.code,
temp.host_name,
temp.active_inactive,
temp.market,
temp.media_type,
temp.spot_type,
temp.spot_length,
temp.spot_placement,
temp.station_group,
temp.status,
temp.format,
temp.exclusivity,
temp.daypart,
temp.downloads_aqh,
temp.cpm,
temp.commission,
temp.talent_codes,
temp.product_type,
temp.source_code,
--'' as remnant_flag,
temp.remnant_flag,

cast(temp.gross_tf as float) as gross_spot_cost,
cast(temp.client_net_tf as float) as client_net_spot_cost,
cast(temp.adjusted_client_id as float) as adjusted_client_id,
temp.date,
temp.num_spot,
temp.loaded_time,
temp.cancellation_terms,
temp.state,
'' as percent_over_21,
''as call_letters

from production.gsheet_budgets.crazy_gsheet_budget temp

where upper(temp.talent_codes) = 'SP' and temp.num_spot > 0
group by
temp.roll_up_show,
temp.show_detail ,
temp.estimate,
temp.host_gender,
temp.category,
temp.code,
temp.host_name,
temp.active_inactive,
temp.market,
temp.media_type,
temp.spot_type,
temp.spot_length,
temp.spot_placement,
temp.station_group,
temp.status,
temp.format,
temp.exclusivity,
temp.daypart,
temp.downloads_aqh,
temp.cpm,
temp.commission,
temp.talent_codes,
temp.product_type,
temp.source_code,
temp.remnant_flag,

cast(temp.gross_tf as float),
cast(temp.client_net_tf as float) ,
cast(temp.adjusted_client_id as float) ,
temp.date,
adjusted_client_id,
temp.num_spot,
temp.loaded_time,
temp.cancellation_terms,
temp.state
) temp2

group by
temp2.roll_up_show,
temp2.show_detail,
temp2.estimate,
temp2.host_gender,

temp2.category,
temp2.code,
temp2.host_name,
temp2.active_inactive,
temp2.market,
temp2.media_type,
temp2.spot_type,
temp2.spot_length,
temp2.spot_placement,
temp2.station_group,
temp2.status,
temp2.format,
temp2.exclusivity,
temp2.daypart,
temp2.downloads_aqh,
temp2.cpm,
temp2.commission,
temp2.talent_codes,
temp2.product_type,
temp2.source_code,
temp2.remnant_flag,


temp2.gross_spot_cost,
temp2.client_net_spot_cost,
temp2.adjusted_client_id,
temp2.date,
temp2.num_spot,
temp2.loaded_time,
temp2.cancellation_terms,
temp2.state,
temp2.percent_over_21,
temp2.call_letters
)




union all
(
select

temp2.roll_up_show,
temp2.show_detail,
temp2.estimate,
temp2.host_gender,


temp2.category,
temp2.code,
temp2.host_name,
temp2.active_inactive,
temp2.market,
temp2.media_type,
temp2.spot_type,
temp2.spot_length,
temp2.spot_placement,
temp2.station_group,
temp2.status,
temp2.format,
temp2.exclusivity,
temp2.daypart,
temp2.downloads_aqh,
temp2.cpm,
temp2.commission,
temp2.talent_codes,
temp2.product_type,
temp2.source_code,
temp2.remnant_flag,

temp2.gross_spot_cost,
temp2.client_net_spot_cost,
temp2.adjusted_client_id,
temp2.date,
1 as num_spot,
temp2.loaded_time,
temp2.cancellation_terms,
temp2.state,
temp2.percent_over_21,
temp2.call_letters
from(
select

temp.roll_up_show as roll_up_show,
temp.show_detail as show_detail,
temp.estimate,
temp.host_gender,


temp.category,
temp.code,
temp.host_name,
temp.active_inactive,
temp.market,
temp.media_type,
temp.spot_type,
temp.spot_length,
temp.spot_placement,
temp.station_group,
temp.status,
temp.format,
temp.exclusivity,
temp.daypart,
temp.downloads_aqh,
temp.cpm,
temp.commission,
temp.talent_codes,
temp.product_type,
temp.source_code,
--'' as remnant_flag,
temp.remnant_flag,

cast(temp.gross_tf as float) as gross_spot_cost,
cast(temp.client_net_tf as float) as client_net_spot_cost,
cast(temp.adjusted_client_id as float) as adjusted_client_id,
bcal.broadcast_week as date,
temp.loaded_time,
temp.cancellation_terms,
temp.state,
'' as percent_over_21,
'' as call_letters

from production.gsheet_budgets.crazy_gsheet_budget temp
left join production.public.broadcast_calendar bcal
on temp.date = bcal.broadcast_date
where upper(temp.talent_codes) = 'WK' and temp.num_spot > 0
group by
temp.roll_up_show,
temp.show_detail ,
temp.estimate,
temp.host_gender,
temp.category,
temp.code,
temp.host_name,
temp.active_inactive,
temp.market,
temp.media_type,
temp.spot_type,
temp.spot_length,
temp.spot_placement,
temp.station_group,
temp.status,
temp.format,
temp.exclusivity,
temp.daypart,
temp.downloads_aqh,
temp.cpm,
temp.commission,
temp.talent_codes,
temp.product_type,
temp.source_code,


temp.remnant_flag,

cast(temp.gross_tf as float),
cast(temp.client_net_tf as float) ,
cast(temp.adjusted_client_id as float) ,
bcal.broadcast_week ,
adjusted_client_id,
temp.loaded_time,
temp.cancellation_terms,
temp.state
) temp2

group by
temp2.roll_up_show,
temp2.show_detail,
temp2.estimate,
temp2.host_gender,
temp2.category,
temp2.code,
temp2.host_name,
temp2.active_inactive,
temp2.market,
temp2.media_type,
temp2.spot_type,
temp2.spot_length,
temp2.spot_placement,
temp2.station_group,
temp2.status,
temp2.format,
temp2.exclusivity,
temp2.daypart,
temp2.downloads_aqh,
temp2.cpm,
temp2.commission,
temp2.talent_codes,
temp2.product_type,
temp2.source_code,


temp2.remnant_flag,

temp2.gross_spot_cost,
temp2.client_net_spot_cost,
temp2.adjusted_client_id,
temp2.date,
temp2.loaded_time,
temp2.cancellation_terms,
temp2.state,
temp2.percent_over_21,
temp2.call_letters
)





union all
(
select

temp2.roll_up_show,
temp2.show_detail,
temp2.estimate,

temp2.host_gender,
temp2.category,
temp2.code,
temp2.host_name,
temp2.active_inactive,
temp2.market,
temp2.media_type,
temp2.spot_type,
temp2.spot_length,
temp2.spot_placement,
temp2.station_group,
temp2.status,
temp2.format,
temp2.exclusivity,
temp2.daypart,
temp2.downloads_aqh,
temp2.cpm,
temp2.commission,
temp2.talent_codes,
temp2.product_type,
temp2.source_code,
temp2.remnant_flag,


temp2.gross_spot_cost,
temp2.client_net_spot_cost,
temp2.adjusted_client_id,
temp2.date,
1 as num_spot,
temp2.loaded_time,
temp2.cancellation_terms,
temp2.state,
temp2.percent_over_21,
temp2.call_letters
from(
select

temp.roll_up_show as roll_up_show,
temp.show_detail as show_detail,
temp.estimate,
temp.host_gender,

temp.category,
temp.code,
temp.host_name,
temp.active_inactive,
temp.market,
temp.media_type,
temp.spot_type,
temp.spot_length,
temp.spot_placement,
temp.station_group,
temp.status,
temp.format,
temp.exclusivity,
temp.daypart,
temp.downloads_aqh,
temp.cpm,
temp.commission,
temp.talent_codes,
temp.product_type,
temp.source_code,
--'' as remnant_flag,
temp.remnant_flag,


cast(temp.gross_tf as float) as gross_spot_cost,
cast(temp.client_net_tf as float) as client_net_spot_cost,
cast(temp.adjusted_client_id as float) as adjusted_client_id,
to_Date(case
when upper(bmon.month) like '%JAN%' then '2018-12-31'
when upper(bmon.month) like '%FEB%' then '2019-01-28'
when upper(bmon.month) like '%MAR%' then '2019-02-25'
when upper(bmon.month) like '%APR%' then '2019-04-01'
when upper(bmon.month) like '%MAY%' then '2019-04-29'
when upper(bmon.month) like '%JUN%' then '2019-05-27'
when upper(bmon.month) like '%JUL%' then '2019-07-01'
when upper(bmon.month) like '%AUG%' then '2019-07-29'
when upper(bmon.month) like '%SEP%' then '2019-08-26'
when upper(bmon.month) like '%OCT%' then '2019-09-30'
when upper(bmon.month) like '%NOV%' then '2019-10-28'
when upper(bmon.month) like '%DEC%' then '2019-11-25'


--when date_part('month', bcal.broadcast_week) = 1 then '2018-12-31'
--when date_part('month', bcal.broadcast_week) = 2 then '2019-01-28'
--when date_part('month', bcal.broadcast_week) = 3 then '2019-02-25'
--when date_part('month', bcal.broadcast_week) = 4 then '2019-04-01'
--when date_part('month', bcal.broadcast_week) = 5 then '2019-04-29'
--when date_part('month', bcal.broadcast_week) = 6 then '2019-05-27'
--when date_part('month', bcal.broadcast_week) = 7 then '2019-07-01'
--when date_part('month', bcal.broadcast_week) = 8 then '2019-07-29'
--when date_part('month', bcal.broadcast_week) = 9 then '2019-08-26'
--when date_part('month', bcal.broadcast_week) = 10 then '2019-09-30'
--when date_part('month', bcal.broadcast_week) = 11 then '2019-10-28'
--when date_part('month', bcal.broadcast_week) = 12 then '2019-11-25'
else  '2019-11-25' end, 'YYYY-MM-DD') as date,
temp.loaded_time,
temp.cancellation_terms,
temp.state,
'' as percent_over_21,
'' as call_letters


from production.gsheet_budgets.crazy_gsheet_budget temp
left join production.public.broadcast_calendar bcal
on temp.date = bcal.broadcast_date

left join production.public.broadcast_month_lookup bmon
on bmon.year = bcal.broadcast_year
and bmon.week = bcal.broadcast_week_number
where (upper(temp.talent_codes) = 'MO' or upper(temp.talent_codes) = 'MONTH') and temp.num_spot > 0
group by
temp.roll_up_show,
temp.show_detail ,
temp.estimate,
temp.host_gender,

temp.category,
temp.code,
temp.host_name,
temp.active_inactive,
temp.market,
temp.media_type,
temp.spot_type,
temp.spot_length,
temp.spot_placement,
temp.station_group,
temp.status,
temp.format,
temp.exclusivity,
temp.daypart,
temp.downloads_aqh,
temp.cpm,
temp.commission,
temp.talent_codes,
temp.product_type,
temp.source_code,
--'' as remnant_flag,
temp.remnant_flag,


cast(temp.gross_tf as float),
cast(temp.client_net_tf as float) ,
cast(temp.adjusted_client_id as float) ,
to_Date(case
when upper(bmon.month) like '%JAN%' then '2018-12-31'
when upper(bmon.month) like '%FEB%' then '2019-01-28'
when upper(bmon.month) like '%MAR%' then '2019-02-25'
when upper(bmon.month) like '%APR%' then '2019-04-01'
when upper(bmon.month) like '%MAY%' then '2019-04-29'
when upper(bmon.month) like '%JUN%' then '2019-05-27'
when upper(bmon.month) like '%JUL%' then '2019-07-01'
when upper(bmon.month) like '%AUG%' then '2019-07-29'
when upper(bmon.month) like '%SEP%' then '2019-08-26'
when upper(bmon.month) like '%OCT%' then '2019-09-30'
when upper(bmon.month) like '%NOV%' then '2019-10-28'
when upper(bmon.month) like '%DEC%' then '2019-11-25'


--when date_part('month', bcal.broadcast_week) = 1 then '2018-12-31'
--when date_part('month', bcal.broadcast_week) = 2 then '2019-01-28'
--when date_part('month', bcal.broadcast_week) = 3 then '2019-02-25'
--when date_part('month', bcal.broadcast_week) = 4 then '2019-04-01'
--when date_part('month', bcal.broadcast_week) = 5 then '2019-04-29'
--when date_part('month', bcal.broadcast_week) = 6 then '2019-05-27'
--when date_part('month', bcal.broadcast_week) = 7 then '2019-07-01'
--when date_part('month', bcal.broadcast_week) = 8 then '2019-07-29'
--when date_part('month', bcal.broadcast_week) = 9 then '2019-08-26'
--when date_part('month', bcal.broadcast_week) = 10 then '2019-09-30'
--when date_part('month', bcal.broadcast_week) = 11 then '2019-10-28'
--when date_part('month', bcal.broadcast_week) = 12 then '2019-11-25'
else  '2019-11-25' end, 'YYYY-MM-DD') ,
adjusted_client_id,
temp.loaded_time,
temp.cancellation_terms,
temp.state
) temp2

group by
temp2.roll_up_show,
temp2.show_detail,
temp2.estimate,
temp2.host_gender,
temp2.category,
temp2.code,
temp2.host_name,
temp2.active_inactive,
temp2.market,
temp2.media_type,
temp2.spot_type,
temp2.spot_length,
temp2.spot_placement,
temp2.station_group,
temp2.status,
temp2.format,
temp2.exclusivity,
temp2.daypart,
temp2.downloads_aqh,
temp2.cpm,
temp2.commission,
temp2.talent_codes,
temp2.product_type,
temp2.source_code,
--'' as remnant_flag,
temp2.remnant_flag,

temp2.gross_spot_cost,
temp2.client_net_spot_cost,
temp2.adjusted_client_id,
temp2.date,
temp2.loaded_time,
temp2.cancellation_terms,
temp2.state,
temp2.percent_over_21,
temp2.call_letters
)) temp1
where temp1.num_spot >= 0
and temp1.gross_spot_cost is not null
group by
temp1.roll_up_show,
temp1.show_detail,
temp1.estimate,
temp1.host_gender,
temp1.category,
temp1.code,
temp1.host_name,
temp1.active_inactive,
temp1.market,
temp1.media_type,
temp1.spot_type,
temp1.spot_length,
temp1.spot_placement,
temp1.station_group,
temp1.status,
temp1.format,
temp1.exclusivity,
temp1.daypart,
temp1.downloads_aqh,
temp1.cpm,
temp1.commission,
temp1.talent_codes,
temp1.product_type,
temp1.source_code,
--'' as remnant_flag,
temp1.remnant_flag,


cast(temp1.gross_spot_cost as float),
cast(temp1.client_net_spot_cost as float),
cast(temp1.adjusted_client_id as float),
temp1.date,
cast(temp1.num_spot as float),

temp1.loaded_time,
temp1.cancellation_terms,
temp1.state,
temp1.percent_over_21,
temp1.call_letters
)

union all

(select
temp2.roll_up_show,
temp2.show_detail,
temp2.estimate,

temp2.host_gender,
temp2.category,
temp2.code,
temp2.host_name,
temp2.active_inactive,
temp2.market,
temp2.media_type,
temp2.spot_type,
temp2.spot_length,
temp2.spot_placement,
temp2.station_group,
temp2.status,
temp2.format,
temp2.exclusivity,
temp2.daypart,
temp2.downloads_aqh,
temp2.cpm,
temp2.commission,
temp2.talent_codes,
temp2.product_type,
temp2.source_code,
--'' as remnant_flag,
temp2.remnant_flag,


cast(temp2.gross_spot_cost as float),
cast(temp2.client_net_spot_cost as float),
cast(temp2.adjusted_client_id as float),
temp2.date,
cast(temp2.num_spot as float),
temp2.loaded_time,
temp2.cancellation_terms,
temp2.state,
temp2.percent_over_21,
'' as call_letters


from production.gsheet_budgets.gsheet_budgets_2020 temp2
where temp2.num_spot >= 0
and temp2.gross_spot_cost is not null
group by
temp2.roll_up_show,
temp2.show_detail,
temp2.estimate,

temp2.host_gender,
temp2.category,
temp2.code,
temp2.host_name,
temp2.active_inactive,
temp2.market,
temp2.media_type,
temp2.spot_type,
temp2.spot_length,
temp2.spot_placement,
temp2.station_group,
temp2.status,
temp2.format,
temp2.exclusivity,
temp2.daypart,
temp2.downloads_aqh,
temp2.cpm,
temp2.commission,
temp2.talent_codes,
temp2.product_type,
temp2.source_code,
--'' as remnant_flag,
temp2.remnant_flag,


cast(temp2.gross_spot_cost as float),
cast(temp2.client_net_spot_cost as float),
cast(temp2.adjusted_client_id as float),
temp2.date,
cast(temp2.num_spot as float),
temp2.loaded_time,
temp2.cancellation_terms,
temp2.state,
temp2.percent_over_21
)


union all

(select
temp2.roll_up_show,
temp2.show_detail,
temp2.estimate,
'' as host_gender,
temp2.category,
temp2.code,
temp2.host_name,
temp2.active_inactive,
temp2.market,
temp2.media_type,
temp2.spot_type,
temp2.spot_length,
temp2.spot_placement,
temp2.station_group,
temp2.status,
temp2.format,
temp2.exclusivity,
temp2.daypart,
temp2.downloads_aqh,
temp2.cpm,
temp2.commission,
temp2.talent_codes,
temp2.product_type,
temp2.source_code,
--'' as remnant_flag,
temp2.remnant_flag,


cast(temp2.gross_spot_cost as float),
cast(temp2.client_net_spot_cost as float),
cast(temp2.adjusted_client_id as float),
temp2.date,
cast(temp2.num_spot as float),
temp2.loaded_time,
'' as cancellation_terms,
'' as state,
'' as percent_over_21,
'' as call_letters
from production.gsheet_budgets.gsheet_budgets_2021 temp2
where temp2.num_spot >= 0
and temp2.gross_spot_cost is not null
group by
temp2.roll_up_show,
temp2.show_detail,
temp2.estimate,

temp2.category,
temp2.code,
temp2.host_name,
temp2.active_inactive,
temp2.market,
temp2.media_type,
temp2.spot_type,
temp2.spot_length,
temp2.spot_placement,
temp2.station_group,
temp2.status,
temp2.format,
temp2.exclusivity,
temp2.daypart,
temp2.downloads_aqh,
temp2.cpm,
temp2.commission,
temp2.talent_codes,
temp2.product_type,
temp2.source_code,
--'' as remnant_flag,
temp2.remnant_flag,


cast(temp2.gross_spot_cost as float),
cast(temp2.client_net_spot_cost as float),
cast(temp2.adjusted_client_id as float),
temp2.date,
cast(temp2.num_spot as float),
temp2.loaded_time
)




union all

(select
temp2.roll_up_show,
temp2.show_detail,
temp2.estimate,
'' as host_gender,
temp2.category,
temp2.code,
temp2.host_name,
temp2.active_inactive,
temp2.market,
temp2.media_type,
temp2.spot_type,
temp2.spot_length,
temp2.spot_placement,
temp2.station_group,
temp2.status,
temp2.format,
temp2.exclusivity,
temp2.daypart,
temp2.downloads_aqh,
temp2.cpm,
temp2.commission,
temp2.talent_codes,
temp2.product_type,
temp2.source_code,
--'' as remnant_flag,
temp2.remnant_flag,


cast(temp2.gross_spot_cost as float),
cast(temp2.client_net_spot_cost as float),
cast(temp2.adjusted_client_id as float),
temp2.date,
cast(temp2.num_spot as float),
temp2.loaded_time,
'' as cancellation_terms,
temp2.state,
'' as percent_over_21,
'' as call_letters
from production.gsheet_budgets.gsheet_budgets_2018 temp2
where temp2.num_spot >= 0
and temp2.gross_spot_cost is not null
group by
temp2.roll_up_show,
temp2.show_detail,
temp2.estimate,

temp2.category,
temp2.code,
temp2.host_name,
temp2.active_inactive,
temp2.market,
temp2.media_type,
temp2.spot_type,
temp2.spot_length,
temp2.spot_placement,
temp2.station_group,
temp2.status,
temp2.format,
temp2.exclusivity,
temp2.daypart,
temp2.downloads_aqh,
temp2.cpm,
temp2.commission,
temp2.talent_codes,
temp2.product_type,
temp2.source_code,
--'' as remnant_flag,
temp2.remnant_flag,


cast(temp2.gross_spot_cost as float),
cast(temp2.client_net_spot_cost as float),
cast(temp2.adjusted_client_id as float),
temp2.date,
cast(temp2.num_spot as float),
temp2.loaded_time,
temp2.state
)


union all



(select






cast('' as varchar) as roll_up_show,
cast('' as varchar) as show_detail,
0 as estimate,
cast('' as varchar) as host_gender,
cast('' as varchar) as category,
cast('' as varchar) as code,
cast('' as varchar) as host_name,

cast('' as varchar) as active_inactive,
cast('' as varchar) as market,
cast('' as varchar) as media_type,
cast('' as varchar) as spot_type,
cast('' as varchar) as spot_length,
cast('' as varchar) as spot_placement,
cast('' as varchar) as station_group,
cast('' as varchar) as status,
cast('' as varchar) as format,
cast('' as varchar) as exclusivity,
cast('' as varchar) as daypart,
0 as downloads_aqh,
0 as cpm,
0 as commission,

cast('' as varchar) as talent_codes,
cast('' as varchar) as product_type,
cast('' as varchar) as source_type,
cast('' as varchar) as remnant_flag,

0,
0,
278,
bcal.broadcast_date,
0,
current_timestamp,
cast('' as varchar) as cancellation_terms,
cast('' as varchar) as state,
cast('' as varchar) as percent_over_21,
cast('' as varchar) as call_letters




from production.public.broadcast_calendar bcal

where bcal.broadcast_year >= 2018 and bcal.broadcast_year <= 2020

group by
bcal.broadcast_date
)





) bud

left join production.public.broadcast_calendar bcal
on bcal.broadcast_date = bud.date

left join production.public.broadcast_month_lookup bmon
on bcal.broadcast_year = bmon.year
and bcal.broadcast_week_number = bmon.week

) temp

) temp2

left join

(
(select
tier.adjusted_client_id,
tier.min_spend,
tier.max_spend,
tier.media_type,
tier.tier,
tier.commission,
2019 as year

from production.gsheet_budgets.commission_tier_2019 tier
group by
tier.adjusted_client_id,
tier.min_spend,
tier.max_spend,
tier.media_type,
tier.tier,
tier.commission
)

union all

(select
tier1.adjusted_client_id,
tier1.min_spend,
tier1.max_spend,
tier1.media_type,
tier1.tier,
tier1.commission,
2020 as year

from production.gsheet_budgets.commission_tier_2020 tier1
where adjusted_client_id <> 222
group by
tier1.adjusted_client_id,
tier1.min_spend,
tier1.max_spend,
tier1.media_type,
tier1.tier,
tier1.commission
)



union all

(select
tier1.adjusted_client_id,
tier1.min_spend,
tier1.max_spend,
tier1.media_type,
tier1.tier,
tier1.commission,
2021 as year

from production.gsheet_budgets.commission_tier_2021 tier1
where adjusted_client_id <> 222
group by
tier1.adjusted_client_id,
tier1.min_spend,
tier1.max_spend,
tier1.media_type,
tier1.tier,
tier1.commission
)



union all

(select
tier1.adjusted_client_id,
tier1.min_spend,
tier1.max_spend,
tier1.media_type,
tier1.tier,
tier1.commission,
2018 as year

from production.gsheet_budgets.commission_tier_2018 tier1
where adjusted_client_id <> 222
group by
tier1.adjusted_client_id,
tier1.min_spend,
tier1.max_spend,
tier1.media_type,
tier1.tier,
tier1.commission
)

)

tier
on tier.adjusted_client_id = temp2.adjusted_client_id
and temp2.monthSpend >= tier.min_spend
and temp2.monthSpend <= tier.max_spend
and temp2.broadcast_year = tier.year

left join production.gsheet_budgets.commission_overrides comm_over
on comm_over.adjusted_client_id = temp2.adjusted_client_id
and comm_over.month = case
    when upper(temp2.broadcast_month) like '%JAN%' then 1
    when upper(temp2.broadcast_month) like '%FEB%' then 2
    when upper(temp2.broadcast_month) like '%MAR%' then 3
    when upper(temp2.broadcast_month) like '%APR%' then 4
    when upper(temp2.broadcast_month) like '%MAY%' then 5
    when upper(temp2.broadcast_month) like '%JUN%' then 6
    when upper(temp2.broadcast_month) like '%JUL%' then 7
    when upper(temp2.broadcast_month) like '%AUG%' then 8
    when upper(temp2.broadcast_month) like '%SEP%' then 9
    when upper(temp2.broadcast_month) like '%OCT%' then 10
    when upper(temp2.broadcast_month) like '%NOV%' then 11
    when upper(temp2.broadcast_month) like '%DEC%' then 12
    else 99 end
and comm_over.year = temp2.broadcast_year
and comm_over.estimate = temp2.estimate


left join production.gsheet.ace_adjustment ace
--on ce.adjusted_client_id = temp2.adjusted_client_id
--and
on date_part('month', ace.estimate_date) = case
    when upper(temp2.broadcast_month) like '%JAN%' then 1
    when upper(temp2.broadcast_month) like '%FEB%' then 2
    when upper(temp2.broadcast_month) like '%MAR%' then 3
    when upper(temp2.broadcast_month) like '%APR%' then 4
    when upper(temp2.broadcast_month) like '%MAY%' then 5
    when upper(temp2.broadcast_month) like '%JUN%' then 6
    when upper(temp2.broadcast_month) like '%JUL%' then 7
    when upper(temp2.broadcast_month) like '%AUG%' then 8
    when upper(temp2.broadcast_month) like '%SEP%' then 9
    when upper(temp2.broadcast_month) like '%OCT%' then 10
    when upper(temp2.broadcast_month) like '%NOV%' then 11
    when upper(temp2.broadcast_month) like '%DEC%' then 12
    else 99 end
and date_part('year', ace.estimate_date) = temp2.broadcast_year
and ace.estimate_id = temp2.estimate


left join (select
bmon.year,
case
    when upper(bmon.month) like '%JAN%' then 1
    when upper(bmon.month) like '%FEB%' then 2
    when upper(bmon.month) like '%MAR%' then 3
    when upper(bmon.month) like '%APR%' then 4
    when upper(bmon.month) like '%MAY%' then 5
    when upper(bmon.month) like '%JUN%' then 6
    when upper(bmon.month) like '%JUL%' then 7
    when upper(bmon.month) like '%AUG%' then 8
    when upper(bmon.month) like '%SEP%' then 9
    when upper(bmon.month) like '%OCT%' then 10
    when upper(bmon.month) like '%NOV%' then 11
    when upper(bmon.month) like '%DEC%' then 12
    else 99 end as current_broadcast_month,
bmon.month,
0 as joiner

from production.public.broadcast_calendar bcal
left join production.public.broadcast_month_lookup bmon
on bcal.broadcast_year = bmon.year
and bcal.broadcast_week_number = bmon.week
where bcal.broadcast_date = current_date
) curr_time
on ace.estimate_id > curr_time.joiner


left join


(select adjusted_client_name, adjusted_client_id from production.gsheet.client_lkp

group by adjusted_client_name, adjusted_client_id)
cli
on cli.adjusted_client_id = temp2.adjusted_client_id



left join production.public.broadcast_calendar_sleep_number bcal_sleep
on temp2.date = bcal_sleep.broadcast_date

and temp2.adjusted_client_id = bcal_sleep.adjusted_client_id

) bud;

"""


    engine = create_engine(post)
    conn = engine.connect()
    conn.execute(text(query).execution_options(autocommit=True))
    conn.close()

    print('created budget combined spot table: ')



def create_combined_spend_annual_client():


    query = """
set timezone = 'America/Los_Angeles';

DROP TABLE IF EXISTS production.gsheet_budgets.combined_spend_annual_client;

CREATE TABLE production.gsheet_budgets.combined_spend_annual_client AS


select
adjusted_client_id,
broadcast_year,
sum(total_spend) as total_spend,
sum(ace_spend) as ace_spend,
current_timestamp as _synced_at
from production.gsheet_budgets.combined_spend_month_client

group by
adjusted_client_id,
broadcast_year

order by

adjusted_client_id,
broadcast_year;
"""

    engine = create_engine(post)
    conn = engine.connect()
    conn.execute(text(query).execution_options(autocommit=True))
    conn.close()

    print('created annual budget tables: ')



def create_combined_spend_budget():


    query = """
    set timezone = 'America/Los_Angeles';
DROP TABLE IF EXISTS production.gsheet_budgets.combined_spend_month_client;

CREATE TABLE production.gsheet_budgets.combined_spend_month_client AS



select
bud_temp_3.adjusted_client_name,

cast(bud_temp_3.adjusted_client_id as float),
cast(bud_temp_3.broadcast_month_number as float),
cast(bud_temp_3.broadcast_year as float),
bud_temp_3.roll_up_show,
cast(bud_temp_3.total_spend as float),
cast(bud_temp_3.ace_spend as float),
current_timestamp
--bud_temp_3.numSpend
from (

select
bud_temp_2.adjusted_client_name,
bud_temp_2.adjusted_client_id,
bud_temp_2.broadcast_month_number,
bud_temp_2.broadcast_year,
bud_temp_2.roll_up_show,
bud_temp_2.total_spend,
bud_temp_2.ace_spend,
count(bud_temp_2.adjusted_client_name) over (partition by bud_temp_2.adjusted_client_name,
bud_temp_2.broadcast_month_number,
bud_temp_2.broadcast_year,
bud_temp_2.total_spend) as numSpend

from (

select
bud_temp.adjusted_client_name,
bud_temp.adjusted_client_id,
bud_temp.broadcast_month_number,
bud_temp.broadcast_year,
bud_temp.roll_up_show,
cast(sum(bud_temp.gross_spend) as float) as total_spend,
cast(sum(bud_temp.total_spot_cost) as float) as ace_spend

from (    SELECT
    bud.*,
    case
    when upper(bud.broadcast_month) like '%JAN%' then 1
    when upper(bud.broadcast_month) like '%FEB%' then 2
    when upper(bud.broadcast_month) like '%MAR%' then 3
    when upper(bud.broadcast_month) like '%APR%' then 4
    when upper(bud.broadcast_month) like '%MAY%' then 5
    when upper(bud.broadcast_month) like '%JUN%' then 6
    when upper(bud.broadcast_month) like '%JUL%' then 7
    when upper(bud.broadcast_month) like '%AUG%' then 8
    when upper(bud.broadcast_month) like '%SEP%' then 9
    when upper(bud.broadcast_month) like '%OCT%' then 10
    when upper(bud.broadcast_month) like '%NOV%' then 11
    when upper(bud.broadcast_month) like '%DEC%' then 12
    else 99 end as broadcast_month_number,

    case
    when upper(bud.broadcast_month) like '%JAN%' then 1
    when upper(bud.broadcast_month) like '%FEB%' then 1
    when upper(bud.broadcast_month) like '%MAR%' then 1
    when upper(bud.broadcast_month) like '%APR%' then 2
    when upper(bud.broadcast_month) like '%MAY%' then 2
    when upper(bud.broadcast_month) like '%JUN%' then 2
    when upper(bud.broadcast_month) like '%JUL%' then 3
    when upper(bud.broadcast_month) like '%AUG%' then 3
    when upper(bud.broadcast_month) like '%SEP%' then 3
    when upper(bud.broadcast_month) like '%OCT%' then 4
    when upper(bud.broadcast_month) like '%NOV%' then 4
    when upper(bud.broadcast_month) like '%DEC%' then 4
    else 99 end as broadcast_quarter_number
from (

select
temp2.*,
case
when temp2.adjusted_client_id = 308 and temp2.broadcast_year = 2019 and upper(temp2.broadcast_month) like '%JAN%'
then 0.95

when temp2.adjusted_client_id = 308 and temp2.broadcast_year = 2019 and upper(temp2.broadcast_month) like '%FEB%'
then 0.95

when temp2.adjusted_client_id = 308 and temp2.broadcast_year = 2019 and upper(temp2.broadcast_month) like '%MAR%'
then 0.95

when temp2.adjusted_client_id = 308 and temp2.broadcast_year = 2019 and upper(temp2.broadcast_month) like '%APR%'
then 0.94
else
isnull(tier.commission,1)
end

as commission_tier,
isnull(temp2.num_spot * temp2.gross_spot_cost,0) as total_gross_spot_cost,

case
when temp2.adjusted_client_id = 308 and temp2.broadcast_year = 2019 and upper(temp2.broadcast_month) like '%JAN%'
then isnull(temp2.num_spot * temp2.client_net_spot_cost,0) * 0.95

when temp2.adjusted_client_id = 308 and temp2.broadcast_year = 2019 and upper(temp2.broadcast_month) like '%FEB%'
then isnull(temp2.num_spot * temp2.client_net_spot_cost,0) * 0.95

when temp2.adjusted_client_id = 308 and temp2.broadcast_year = 2019 and upper(temp2.broadcast_month) like '%MAR%'
then isnull(temp2.num_spot * temp2.client_net_spot_cost,0) * 0.95

when temp2.adjusted_client_id = 308 and temp2.broadcast_year = 2019 and upper(temp2.broadcast_month) like '%APR%'
then isnull(temp2.num_spot * temp2.client_net_spot_cost,0) * 0.94
else
isnull(temp2.num_spot * temp2.client_net_spot_cost,0) * isnull(tier.commission,1)
end

as total_spot_cost,





--isnull(temp2.num_spot * temp2.client_net_spot_cost,0) * isnull(tier.commission,1) as --total_spot_cost,
case
when upper(temp2.show_detail) like '%%PANDORA%%' then 1
when upper(temp2.show_detail) like '%%GEOTARG%%' then 1
when upper(temp2.show_detail) like '%%SPOTIFY%%' then 1
when upper(temp2.show_detail) like '%% TF%%' then 0
else temp2.num_spot end as spots_pandora_mod,
max(temp2.date) over (partition by temp2.adjusted_client_id, temp2.roll_up_show) as maxDate,
min(temp2.date) over (partition by temp2.adjusted_client_id, temp2.roll_up_show) as minDate,
cli.adjusted_client_name
from (select
temp.*,
sum(temp.gross_spend) over (partition by temp.adjusted_client_id, temp.broadcast_year, temp.broadcast_month) as monthSpend
from (

SELECT
bud.roll_up_show,
bud.show_detail,
bud.gross_spot_cost,
bud.client_net_spot_cost,
bud.adjusted_client_id,
bud.date,
bud.num_spot,
bcal.broadcast_year,
bcal.broadcast_week_number,
bcal.broadcast_week,
bmon.month as broadcast_month,
gross_spot_cost * num_spot as gross_spend

FROM (
(select
temp1.roll_up_show,
temp1.show_detail,
cast(temp1.gross_spot_cost as float),
cast(temp1.client_net_spot_cost as float),
cast(temp1.adjusted_client_id as float),
temp1.date,
cast(temp1.num_spot as float)
from ((select

temp.roll_up_show as roll_up_show,
temp.show_detail as show_detail,
cast(temp.gross_spot_cost as float) as gross_spot_cost,
cast(temp.client_net_spot_cost as float) as client_net_spot_cost,
cast(temp.adjusted_client_id as float) as adjusted_client_id,
temp.date,
cast(temp.num_spot as float) as num_spot

from production.gsheet_budgets.crazy_gsheet_budget temp

where temp.num_spot > 0
and temp.gross_spot_cost > 0
group by
temp.roll_up_show,
temp.show_detail,
cast(temp.gross_spot_cost as float),
cast(temp.client_net_spot_cost as float),
cast(temp.adjusted_client_id as float),
temp.date,
cast(temp.num_spot as float)

)

union all
(
select

temp2.roll_up_show,
temp2.show_detail,
temp2.gross_spot_cost,
temp2.client_net_spot_cost,
temp2.adjusted_client_id,
temp2.date,
temp2.num_spot
from(
select

temp.roll_up_show as roll_up_show,
temp.show_detail as show_detail,
cast(temp.gross_tf as float) as gross_spot_cost,
cast(temp.client_net_tf as float) as client_net_spot_cost,
cast(temp.adjusted_client_id as float) as adjusted_client_id,
min(temp.date) over (partition by adjusted_client_id, temp.show_detail) as date,
1 as num_spot

from production.gsheet_budgets.crazy_gsheet_budget temp

where upper(temp.talent_codes) = 'OT' and temp.num_spot > 0
group by
temp.roll_up_show,
temp.show_detail ,
cast(temp.gross_tf as float),
cast(temp.client_net_tf as float) ,
cast(temp.adjusted_client_id as float) ,
temp.date,
adjusted_client_id
) temp2

group by
temp2.roll_up_show,
temp2.show_detail,
temp2.gross_spot_cost,
temp2.client_net_spot_cost,
temp2.adjusted_client_id,
temp2.date,
temp2.num_spot
)


union all
(
select

temp2.roll_up_show,
temp2.show_detail,
temp2.gross_spot_cost,
temp2.client_net_spot_cost,
temp2.adjusted_client_id,
temp2.date,
temp2.num_spot
from(
select

temp.roll_up_show as roll_up_show,
temp.show_detail as show_detail,
cast(temp.gross_tf as float) as gross_spot_cost,
cast(temp.client_net_tf as float) as client_net_spot_cost,
cast(temp.adjusted_client_id as float) as adjusted_client_id,
temp.date,
temp.num_spot

from production.gsheet_budgets.crazy_gsheet_budget temp

where upper(temp.talent_codes) = 'SP' and temp.num_spot > 0
group by
temp.roll_up_show,
temp.show_detail ,
cast(temp.gross_tf as float),
cast(temp.client_net_tf as float) ,
cast(temp.adjusted_client_id as float) ,
temp.date,
adjusted_client_id,
temp.num_spot
) temp2

group by
temp2.roll_up_show,
temp2.show_detail,
temp2.gross_spot_cost,
temp2.client_net_spot_cost,
temp2.adjusted_client_id,
temp2.date,
temp2.num_spot
)




union all
(
select

temp2.roll_up_show,
temp2.show_detail,
temp2.gross_spot_cost,
temp2.client_net_spot_cost,
temp2.adjusted_client_id,
temp2.date,
1 as num_spot
from(
select

temp.roll_up_show as roll_up_show,
temp.show_detail as show_detail,
cast(temp.gross_tf as float) as gross_spot_cost,
cast(temp.client_net_tf as float) as client_net_spot_cost,
cast(temp.adjusted_client_id as float) as adjusted_client_id,
bcal.broadcast_week as date

from production.gsheet_budgets.crazy_gsheet_budget temp
left join production.public.broadcast_calendar bcal
on temp.date = bcal.broadcast_date
where upper(temp.talent_codes) = 'WK' and temp.num_spot > 0
group by
temp.roll_up_show,
temp.show_detail ,
cast(temp.gross_tf as float),
cast(temp.client_net_tf as float) ,
cast(temp.adjusted_client_id as float) ,
bcal.broadcast_week ,
adjusted_client_id
) temp2

group by
temp2.roll_up_show,
temp2.show_detail,
temp2.gross_spot_cost,
temp2.client_net_spot_cost,
temp2.adjusted_client_id,
temp2.date
)





union all
(
select

temp2.roll_up_show,
temp2.show_detail,
temp2.gross_spot_cost,
temp2.client_net_spot_cost,
temp2.adjusted_client_id,
temp2.date,
1 as num_spot
from(
select

temp.roll_up_show as roll_up_show,
temp.show_detail as show_detail,
cast(temp.gross_tf as float) as gross_spot_cost,
cast(temp.client_net_tf as float) as client_net_spot_cost,
cast(temp.adjusted_client_id as float) as adjusted_client_id,
to_Date(case
when upper(bmon.month) like '%JAN%' then '2018-12-31'
when upper(bmon.month) like '%FEB%' then '2019-01-28'
when upper(bmon.month) like '%MAR%' then '2019-02-25'
when upper(bmon.month) like '%APR%' then '2019-04-01'
when upper(bmon.month) like '%MAY%' then '2019-04-29'
when upper(bmon.month) like '%JUN%' then '2019-05-27'
when upper(bmon.month) like '%JUL%' then '2019-07-01'
when upper(bmon.month) like '%AUG%' then '2019-07-29'
when upper(bmon.month) like '%SEP%' then '2019-08-26'
when upper(bmon.month) like '%OCT%' then '2019-09-30'
when upper(bmon.month) like '%NOV%' then '2019-10-28'
when upper(bmon.month) like '%DEC%' then '2019-11-25'


--when date_part('month', bcal.broadcast_week) = 1 then '2018-12-31'
--when date_part('month', bcal.broadcast_week) = 2 then '2019-01-28'
--when date_part('month', bcal.broadcast_week) = 3 then '2019-02-25'
--when date_part('month', bcal.broadcast_week) = 4 then '2019-04-01'
--when date_part('month', bcal.broadcast_week) = 5 then '2019-04-29'
--when date_part('month', bcal.broadcast_week) = 6 then '2019-05-27'
--when date_part('month', bcal.broadcast_week) = 7 then '2019-07-01'
--when date_part('month', bcal.broadcast_week) = 8 then '2019-07-29'
--when date_part('month', bcal.broadcast_week) = 9 then '2019-08-26'
--when date_part('month', bcal.broadcast_week) = 10 then '2019-09-30'
--when date_part('month', bcal.broadcast_week) = 11 then '2019-10-28'
--when date_part('month', bcal.broadcast_week) = 12 then '2019-11-25'
else  '2019-11-25' end, 'YYYY-MM-DD') as date

from production.gsheet_budgets.crazy_gsheet_budget temp
left join production.public.broadcast_calendar bcal
on temp.date = bcal.broadcast_date

left join production.public.broadcast_month_lookup bmon
on bmon.year = bcal.broadcast_year
and bmon.week = bcal.broadcast_week_number

where (upper(temp.talent_codes) = 'MO' or upper(temp.talent_codes) = 'MONTH') and temp.num_spot > 0
group by
temp.roll_up_show,
temp.show_detail ,
cast(temp.gross_tf as float),
cast(temp.client_net_tf as float) ,
cast(temp.adjusted_client_id as float) ,
to_Date(case
when upper(bmon.month) like '%JAN%' then '2018-12-31'
when upper(bmon.month) like '%FEB%' then '2019-01-28'
when upper(bmon.month) like '%MAR%' then '2019-02-25'
when upper(bmon.month) like '%APR%' then '2019-04-01'
when upper(bmon.month) like '%MAY%' then '2019-04-29'
when upper(bmon.month) like '%JUN%' then '2019-05-27'
when upper(bmon.month) like '%JUL%' then '2019-07-01'
when upper(bmon.month) like '%AUG%' then '2019-07-29'
when upper(bmon.month) like '%SEP%' then '2019-08-26'
when upper(bmon.month) like '%OCT%' then '2019-09-30'
when upper(bmon.month) like '%NOV%' then '2019-10-28'
when upper(bmon.month) like '%DEC%' then '2019-11-25'


--when date_part('month', bcal.broadcast_week) = 1 then '2018-12-31'
--when date_part('month', bcal.broadcast_week) = 2 then '2019-01-28'
--when date_part('month', bcal.broadcast_week) = 3 then '2019-02-25'
--when date_part('month', bcal.broadcast_week) = 4 then '2019-04-01'
--when date_part('month', bcal.broadcast_week) = 5 then '2019-04-29'
--when date_part('month', bcal.broadcast_week) = 6 then '2019-05-27'
--when date_part('month', bcal.broadcast_week) = 7 then '2019-07-01'
--when date_part('month', bcal.broadcast_week) = 8 then '2019-07-29'
--when date_part('month', bcal.broadcast_week) = 9 then '2019-08-26'
--when date_part('month', bcal.broadcast_week) = 10 then '2019-09-30'
--when date_part('month', bcal.broadcast_week) = 11 then '2019-10-28'
--when date_part('month', bcal.broadcast_week) = 12 then '2019-11-25'
else  '2019-11-25' end, 'YYYY-MM-DD')  ,
adjusted_client_id
) temp2

group by
temp2.roll_up_show,
temp2.show_detail,
temp2.gross_spot_cost,
temp2.client_net_spot_cost,
temp2.adjusted_client_id,
temp2.date
)) temp1
where temp1.num_spot > 0
and temp1.gross_spot_cost > 0
group by
temp1.roll_up_show,
temp1.show_detail,
cast(temp1.gross_spot_cost as float),
cast(temp1.client_net_spot_cost as float),
cast(temp1.adjusted_client_id as float),
temp1.date,
cast(temp1.num_spot as float)
)

union all

(select
temp2.roll_up_show,
temp2.show_detail,
cast(temp2.gross_spot_cost as float),
cast(temp2.client_net_spot_cost as float),
cast(temp2.adjusted_client_id as float),
temp2.date,
cast(temp2.num_spot as float)
from production.gsheet_budgets.gsheet_budgets_2020 temp2
where temp2.num_spot > 0
and temp2.gross_spot_cost > 0
group by
temp2.roll_up_show,
temp2.show_detail,
cast(temp2.gross_spot_cost as float),
cast(temp2.client_net_spot_cost as float),
cast(temp2.adjusted_client_id as float),
temp2.date,
cast(temp2.num_spot as float)
)



union all

(select
temp2.roll_up_show,
temp2.show_detail,
cast(temp2.gross_spot_cost as float),
cast(temp2.client_net_spot_cost as float),
cast(temp2.adjusted_client_id as float),
temp2.date,
cast(temp2.num_spot as float)
from production.gsheet_budgets.gsheet_budgets_2021 temp2
where temp2.num_spot > 0
and temp2.gross_spot_cost > 0
group by
temp2.roll_up_show,
temp2.show_detail,
cast(temp2.gross_spot_cost as float),
cast(temp2.client_net_spot_cost as float),
cast(temp2.adjusted_client_id as float),
temp2.date,
cast(temp2.num_spot as float)
)

) bud

left join production.public.broadcast_calendar bcal
on bcal.broadcast_date = bud.date

left join production.public.broadcast_month_lookup bmon
on bcal.broadcast_year = bmon.year
and bcal.broadcast_week_number = bmon.week
) temp
) temp2

left join

(
(select
tier.adjusted_client_id,
tier.min_spend,
tier.max_spend,
tier.media_type,
tier.tier,
tier.commission,
2019 as year

from production.gsheet_budgets.commission_tier_2019 tier
group by
tier.adjusted_client_id,
tier.min_spend,
tier.max_spend,
tier.media_type,
tier.tier,
tier.commission
)

union all

(select
tier1.adjusted_client_id,
tier1.min_spend,
tier1.max_spend,
tier1.media_type,
tier1.tier,
tier1.commission,
2020 as year

from production.gsheet_budgets.commission_tier_2020 tier1
where adjusted_client_id <> 222
group by
tier1.adjusted_client_id,
tier1.min_spend,
tier1.max_spend,
tier1.media_type,
tier1.tier,
tier1.commission
)


union all

(select
tier1.adjusted_client_id,
tier1.min_spend,
tier1.max_spend,
tier1.media_type,
tier1.tier,
tier1.commission,
2021 as year

from production.gsheet_budgets.commission_tier_2021 tier1
where adjusted_client_id <> 222
group by
tier1.adjusted_client_id,
tier1.min_spend,
tier1.max_spend,
tier1.media_type,
tier1.tier,
tier1.commission
)

)

tier
on tier.adjusted_client_id = temp2.adjusted_client_id
and temp2.monthSpend >= tier.min_spend
and temp2.monthSpend <= tier.max_spend
and temp2.broadcast_year = tier.year

left join


(select adjusted_client_name, adjusted_client_id from production.gsheet.client_lkp

group by adjusted_client_name, adjusted_client_id)
cli
on cli.adjusted_client_id = temp2.adjusted_client_id


) bud
) bud_temp

group by
bud_temp.adjusted_client_name,
bud_temp.adjusted_client_id,
bud_temp.broadcast_month_number,
bud_temp.broadcast_year,
bud_temp.roll_up_show

) bud_temp_2

group by
bud_temp_2.adjusted_client_name,
bud_temp_2.adjusted_client_id,
bud_temp_2.broadcast_month_number,
bud_temp_2.broadcast_year,
bud_temp_2.roll_up_show,
bud_temp_2.ace_spend,
bud_temp_2.total_spend
) bud_temp_3
group by
bud_temp_3.adjusted_client_name,

cast(bud_temp_3.adjusted_client_id as float),
cast(bud_temp_3.broadcast_month_number as float),
cast(bud_temp_3.broadcast_year as float),
bud_temp_3.roll_up_show,
cast(bud_temp_3.total_spend as float),
cast(bud_temp_3.ace_spend as float)
;
    """


    engine = create_engine(post)
    conn = engine.connect()
    conn.execute(text(query).execution_options(autocommit=True))
    conn.close()

    print('created budget combined table: ')


def create_running_budget_tables(table_name, output_table_name, variable_name):


    query = """
    DROP TABLE IF EXISTS """  + output_table_name + """;

    CREATE TABLE """ + output_table_name + """ AS
    select
temp2.master_vendor_id,
temp2.adjusted_client_id,
cli.adjusted_client_name,
temp2.broadcast_date,
temp2.broadcast_year,
temp2."""  + variable_name + """,
isnull(ushow.adjusted_show_name, rd_show.station_name) as adjusted_show_name,
first_value(temp2."""  + variable_name + """) over (partition by temp2.adjusted_client_id, temp2.master_vendor_id, temp2.value_partition order by temp2.broadcast_date rows between unbounded preceding and current row) as running_category,
current_timestamp

from (select
temp1.master_vendor_id,
temp1.adjusted_client_id,
temp1.broadcast_date,
temp1.broadcast_year,
temp1."""  + variable_name + """,
sum(temp1.val_temp) over (partition by temp1.adjusted_client_id, temp1.master_vendor_id order by temp1.broadcast_date rows between unbounded preceding and current row) as value_partition

from (select
unique_clients_shows.master_vendor_id,
unique_clients_shows.adjusted_client_id,
date_set.broadcast_date,
date_set.broadcast_year,
cats."""  + variable_name + """,
case when cats."""  + variable_name + """ is null then 0 else 1 end as val_temp

--CREATE BIG TABLE OF EVERY CLIENT/DATEAND SHOW COMBINATION
from (select
primary_key_1 as master_vendor_id,
primary_key_2 as adjusted_client_id,
1 as joiner
from """  + table_name + """
group by
primary_key_1,
primary_key_2
) unique_clients_shows

right outer join
(
select
broadcast_date,
broadcast_year,
1 as joiner
from production.public.broadcast_calendar
where broadcast_year >= 2019
group by
broadcast_date,
broadcast_year
) date_set

on date_set.joiner = unique_clients_shows.joiner

--JOIN IN SET OF CATEGORIES BY DAY
left join

(
select
_synced_at::timestamp::date as date,
--to_date()as date,
"""  + variable_name + """,
primary_key_1 as master_vendor_id,
primary_key_2 as adjusted_client_id
from """  + table_name + """
where state <> 'DELETED'

group by
_synced_at::timestamp::date ,
"""  + variable_name + """,
primary_key_1 ,
primary_key_2

) cats
on cats.date = date_set.broadcast_date
and unique_clients_shows.master_vendor_id = cats.master_vendor_id
and unique_clients_shows.adjusted_client_id = cats.adjusted_client_id
) temp1

)temp2

left join production.gsheet.client_lkp cli
on cli.adjusted_client_id = temp2.adjusted_client_id

left join production.gsheet.unique_shows ushow
on ushow.vendor_id = temp2.master_vendor_id

left join

(

select
temp_rd.station_name,
temp_rd.vendor_id

from (select
rd.station_name,
rd.vendor_id,
row_number() over (partition by rd.vendor_id) as row_number
from production.matt_testing.rawdata_non_invoice_2014to2018_cond rd
group by

rd.station_name,
rd.vendor_id
)temp_rd
where temp_rd.row_number = 1

) rd_show
on rd_show.vendor_id = temp2.master_vendor_id

order by
temp2.master_vendor_id,
temp2.adjusted_client_id,
temp2.broadcast_date;


"""
    #print(query)
    engine = create_engine(post)
    conn = engine.connect()
    conn.execute(text(query).execution_options(autocommit=True))
    conn.close()

    print('done with table: ' + output_table_name)


def temp_table_cleanup(table_name):


    query = """
    DROP TABLE IF EXISTS """  + table_name + """;"""

    #print(query)
    engine = create_engine(post)
    conn = engine.connect()
    conn.execute(text(query).execution_options(autocommit=True))
    conn.close()

    print('deleted table: ' + table_name)



def create_unique_shows_table():


    query = """

-- FORMAT AND UPDATE 2018 PROGRESS DAT
-- FORMAT AND UPDATE 2019 PROGRESS DATA
TRUNCATE TABLE production.gsheet.unique_shows;
insert into production.gsheet.unique_shows

select

temp.vendor_id,
temp.station_name,
temp.market_name,
temp.adjusted_show_name,
temp.unique_show_flag,
temp.master_vendor_id,
temp.adjusted_market_name,
temp.media_type,
ref.genre_arm,
ref.subgenre_arm,
'' as genre_itunes,
'' as subgenre_itunes,
ref.available_rate_date_updated,
ref.available_us_downloads,
ref.available_cpm,
ref.available_gross_spot_cost,
ref.future_rate_start_date,
ref.future_est_us_dls,
ref.future_cpm,
ref.future_gross_spot_cost,
ref.host_name,
ref.spot_type,
ref.spot_length,
ref.spot_placement,
ref.daypart,
ref.duration_spot_lives_in_show,
ref.itunes_url,
ref.iab_v_compliant as iab_v2_compliant,
ref.show_frequency,
ref.show_is_seasonal,
ref.minimum_requirements,
ref.read_type,
ref.thirty_day_cancellation,
ref.min_age,
ref.max_age,
ref.avg_hhi,
ref.male_percent,
ref.female_percent,
ref.launch_date,
ref.notes,
ref.active_inactive,
temp._synced_at


from production.gsheet.unique_shows_temp temp
left join
(
select
temp2.*
from
(
select
temp.*,
row_number() over (partition by temp.master_vendor_id) as counter
from production.gsheet.unique_shows_reference temp
) temp2
where temp2.counter = 1

)

ref
on temp.master_vendor_id = ref.master_vendor_id;
"""


    engine = create_engine(post)
    conn = engine.connect()
    conn.execute(text(query).execution_options(autocommit=True))
    conn.close()

    print('updated unique_shows table')


def create_unique_shows_table_2():



    query = """

-- FORMAT AND UPDATE 2018 PROGRESS DAT
-- FORMAT AND UPDATE 2019 PROGRESS DATA
TRUNCATE TABLE production.gsheet.unique_shows;
insert into production.gsheet.unique_shows

select

temp.vendor_id,
temp.station_name,
temp.market_name,
temp.adjusted_show_name,
temp.unique_show_flag,
temp.master_vendor_id,
temp.adjusted_market_name,
temp.media_type,
ref.genre_arm,
ref.subgenre_arm,
'' as genre_itunes,
'' as subgenre_itunes,
ref.available_rate_date_updated,
ref.available_us_downloads,
ref.available_cpm,
ref.available_gross_spot_cost,
ref.future_rate_start_date,
ref.future_est_us_dls,
ref.future_cpm,
ref.future_gross_spot_cost,
ref.host_name,
ref.spot_type,
ref.spot_length,
ref.spot_placement,
ref.daypart,
ref.duration_spot_lives_in_show,
ref.itunes_url,
ref.iab_v_compliant as iab_v2_compliant,
ref.show_frequency,
ref.show_is_seasonal,
ref.minimum_requirements,
ref.read_type,
ref.thirty_day_cancellation,
ref.min_age,
ref.max_age,
ref.avg_hhi,
ref.male_percent,
ref.female_percent,
ref.launch_date,
ref.notes,
temp._synced_at


from production.gsheet.unique_shows_temp temp
left join
(
select
temp2.*
from
(
select
temp.*,
row_number() over (partition by temp.master_vendor_id) as counter
from production.gsheet.unique_shows_reference temp
) temp2
where temp2.counter = 1

)

ref
on temp.master_vendor_id = ref.master_vendor_id;
"""


    engine = create_engine(post)
    conn = engine.connect()
    conn.execute(text(query).execution_options(autocommit=True))
    conn.close()

    print('updated unique_shows table')

def create_budget_tables(table_name, variable_name, source_table, broadcast_year, string_flag):

    if string_flag == 1:
        query = """
        DROP TABLE IF EXISTS """  + table_name + """;

        CREATE TABLE """ + table_name + """ AS
        select
        cat_join2.master_vendor_id,
        cat_join2.client_id,
        case
        when min(cat_join2.start_date) over (partition by cat_join2.client_id, cat_join2.master_vendor_id) = cat_join2.start_date
        then (select min(broadcast_week) from production.public.broadcast_calendar where broadcast_year = """ + broadcast_year + """)
        else
        cat_join2.start_date
        end as start_date,
        cat_join2.""" + variable_name + """,
        isnull(cat_join2.end_date, (select max(broadcast_week) from production.public.broadcast_calendar where broadcast_year = """ + broadcast_year + """)) as end_date
        from (select
        cat_join1.master_vendor_id,
        cat_join1.client_id,
        cat_join1.broadcast_week as start_date,
        cat_join1.""" + variable_name + """,
        lead(cat_join1.broadcast_week,1) over (partition by cat_join1.client_id, cat_join1.master_vendor_id order by cat_join1.client_id, cat_join1.master_vendor_id, cat_join1.broadcast_week) - 1
        as end_date

        from (
        select
        all_cli_vendor.master_vendor_id,
        all_cli_vendor.client_id,
        all_cli_vendor.broadcast_week,
        temp_flat3.""" + variable_name + """

        from (select
        bud_temp.master_vendor_id,
        bud_temp.client_id,
        cal_day.broadcast_week
        from (

        SELECT
        master_vendor_id as master_vendor_id,
        adjusted_client_id as client_id,
        1 as joiner

        FROM """ + source_table  + """

        where master_vendor_id is not null
        and adjusted_client_id is not null

        group by
        master_vendor_id,
        adjusted_client_id
        ) bud_temp

        right outer join (
        select broadcast_week,
        1 as joiner
        from production.public.broadcast_calendar
        where broadcast_year = """ +  broadcast_year + """
        group by broadcast_week
        ) cal_day
        on bud_temp.joiner = cal_day.joiner
        group by
        bud_temp.master_vendor_id,
        bud_temp.client_id,
        cal_day.broadcast_week
        ) all_cli_vendor


        left join (select
        temp_flat2.master_vendor_id,
        temp_flat2.client_id,
        temp_flat2.broadcast_week,
        temp_flat2.""" + variable_name + """
        from (select
        temp_flat.master_vendor_id,
        temp_flat.client_id,
        temp_flat.broadcast_week,
        case
        when temp_flat.counter >= 2 then 'Various'
        else temp_flat.""" + variable_name + """ end
        as """ + variable_name + """
        from (select
        flat.master_vendor_id as master_vendor_id,
        flat.adjusted_client_id as client_id,
        bcal.broadcast_week as broadcast_week,
        flat.""" + variable_name + """,
        count(flat.""" + variable_name + """) over (partition by flat.adjusted_client_id, flat.master_vendor_id, bcal.broadcast_week) as counter
        from """ + source_table + """ flat

        left join production.public.broadcast_calendar bcal
        on flat.date = bcal.broadcast_date


        group by
        flat.master_vendor_id,
        flat.adjusted_client_id,
        bcal.broadcast_week,
        flat.""" + variable_name + """
        )temp_flat
        group by
        temp_flat.master_vendor_id,
        temp_flat.client_id,
        temp_flat.broadcast_week,
        case
        when temp_flat.counter >= 2 then 'Various'
        else temp_flat.""" + variable_name + """ end
        ) temp_flat2
        group by
        temp_flat2.master_vendor_id,
        temp_flat2.client_id,
        temp_flat2.broadcast_week,
        temp_flat2.""" + variable_name + """
        ) temp_flat3
        on
        all_cli_Vendor.client_id =  temp_flat3.client_id
        and all_cli_Vendor.master_vendor_id =  temp_flat3.master_vendor_id
        and all_cli_Vendor.broadcast_week =  to_date(temp_flat3.broadcast_week, 'YYYY-MM-DD')

        group by
        all_cli_vendor.master_vendor_id,
        all_cli_vendor.client_id,
        all_cli_vendor.broadcast_week,
        temp_flat3.""" + variable_name + """
        ) cat_join1
        where
        cat_join1.""" + variable_name + """ is not null
        group by
        cat_join1.master_vendor_id,
        cat_join1.client_id,
        cat_join1.broadcast_week,
        cat_join1.""" + variable_name + """
        ) cat_join2

        order by
        cat_join2.client_id,
        cat_join2.master_vendor_id,

        cat_join2.""" + variable_name + ";"

    elif string_flag ==2:
        query = """
        DROP TABLE IF EXISTS """  + table_name + """;

        CREATE TABLE """ + table_name + """ AS
        select
        cat_join2.master_vendor_id,
        cat_join2.client_id,
        case
        when min(cat_join2.start_date) over (partition by cat_join2.client_id, cat_join2.master_vendor_id) = cat_join2.start_date
        then (select min(broadcast_week) from production.public.broadcast_calendar where broadcast_year = """ + broadcast_year + """)
        else
        cat_join2.start_date
        end as start_date,
        cat_join2.""" + variable_name + """,
        isnull(cat_join2.end_date, (select max(broadcast_week) from production.public.broadcast_calendar where broadcast_year = """ + broadcast_year + """)) as end_date
        from (select
        cat_join1.master_vendor_id,
        cat_join1.client_id,
        cat_join1.broadcast_week as start_date,
        cat_join1.""" + variable_name + """,
        lead(cat_join1.broadcast_week,1) over (partition by cat_join1.client_id, cat_join1.master_vendor_id order by cat_join1.client_id, cat_join1.master_vendor_id, cat_join1.broadcast_week) - 1
        as end_date

        from (
        select
        all_cli_vendor.master_vendor_id,
        all_cli_vendor.client_id,
        all_cli_vendor.broadcast_week,
        temp_flat3.""" + variable_name + """

        from (select
        bud_temp.master_vendor_id,
        bud_temp.client_id,
        cal_day.broadcast_week
        from (

        SELECT
        master_vendor_id as master_vendor_id,
        adjusted_client_id as client_id,
        1 as joiner

        FROM """ + source_table  + """

        where master_vendor_id is not null
        and adjusted_client_id is not null

        group by
        master_vendor_id,
        adjusted_client_id
        ) bud_temp

        right outer join (
        select broadcast_week,
        1 as joiner
        from production.public.broadcast_calendar
        where broadcast_year = """ +  broadcast_year + """
        group by broadcast_week
        ) cal_day
        on bud_temp.joiner = cal_day.joiner
        group by
        bud_temp.master_vendor_id,
        bud_temp.client_id,
        cal_day.broadcast_week
        ) all_cli_vendor


        left join (select
        temp_flat2.master_vendor_id,
        temp_flat2.client_id,
        temp_flat2.broadcast_week,
        temp_flat2.""" + variable_name + """
        from (select
        temp_flat.master_vendor_id,
        temp_flat.client_id,
        temp_flat.broadcast_week,
        case
        when temp_flat.counter >= 2 then -99
        else temp_flat.""" + variable_name + """ end
        as """ + variable_name + """
        from (select
        flat.master_vendor_id as master_vendor_id,
        flat.adjusted_client_id as client_id,
        bcal.broadcast_week as broadcast_week,
        flat.""" + variable_name + """,
        count(flat.""" + variable_name + """) over (partition by flat.adjusted_client_id, flat.master_vendor_id, bcal.broadcast_week) as counter
        from """ + source_table + """ flat

        left join production.public.broadcast_calendar bcal
        on flat.date = bcal.broadcast_date


        group by
        flat.master_vendor_id,
        flat.adjusted_client_id,
        bcal.broadcast_week,
        flat.""" + variable_name + """
        )temp_flat
        group by
        temp_flat.master_vendor_id,
        temp_flat.client_id,
        temp_flat.broadcast_week,
        case
        when temp_flat.counter >= 2 then -99
        else temp_flat.""" + variable_name + """ end
        ) temp_flat2
        group by
        temp_flat2.master_vendor_id,
        temp_flat2.client_id,
        temp_flat2.broadcast_week,
        temp_flat2.""" + variable_name + """
        ) temp_flat3
        on
        all_cli_Vendor.client_id =  temp_flat3.client_id
        and all_cli_Vendor.master_vendor_id =  temp_flat3.master_vendor_id
        and all_cli_Vendor.broadcast_week =  to_date(temp_flat3.broadcast_week, 'YYYY-MM-DD')

        group by
        all_cli_vendor.master_vendor_id,
        all_cli_vendor.client_id,
        all_cli_vendor.broadcast_week,
        temp_flat3.""" + variable_name + """
        ) cat_join1
        where
        cat_join1.""" + variable_name + """ is not null
        group by
        cat_join1.master_vendor_id,
        cat_join1.client_id,
        cat_join1.broadcast_week,
        cat_join1.""" + variable_name + """
        ) cat_join2

        order by
        cat_join2.client_id,
        cat_join2.master_vendor_id,

        cat_join2.""" + variable_name + ";"

    engine = create_engine(post)
    conn = engine.connect()
    conn.execute(text(query).execution_options(autocommit=True))
    conn.close()

    print('done with table: ' + table_name)





def combine_gsheet_budget_tables(final_table, table_1,table_2, variable_name, string_flag):

    if string_flag == 1:
        query = """
        DROP TABLE IF EXISTS """  + final_table + """;

        CREATE TABLE """ + final_table + """ AS
        (select
        cast(master_vendor_id as float),
		cast(client_id as float),
		start_date,
		""" + variable_name + """,
		end_date
        from """ + table_1 + """
        )

        union all

        (select
        cast(master_vendor_id as float),
		cast(client_id as float),
		start_date,
		""" + variable_name + """,
		end_date

        from """ + table_2 + """

        );"""

    elif string_flag == 2:

        query = """
        DROP TABLE IF EXISTS """  + final_table + """;

        CREATE TABLE """ + final_table + """ AS
        (select
        cast(master_vendor_id as float),
		cast(client_id as float),
		start_date,
		cast(""" + variable_name + """ as float),
		end_date
        from """ + table_1 + """
        )

        union all

        (select
        cast(master_vendor_id as float),
		cast(client_id as float),
		start_date,
		cast(""" + variable_name + """ as float),
		end_date

        from """ + table_2 + """

        );"""
    engine = create_engine(post)
    conn = engine.connect()
    conn.execute(text(query).execution_options(autocommit=True))
    conn.close()

    print('created combined table: ' + final_table)



def update_change_logs(table_name, variable_name ,source_schema, primary_key, number_vars, number_tables):

    #Check for deleted values and append if necessary
    if number_vars == 1 and number_tables == 1:
        schema = "change_logs_1_var_1_table"
        change_table_name = """production."""  + schema + """.""" + source_schema + """_""" + table_name + """_""" + variable_name
        source_table_name = """production."""  + source_schema + """.""" + table_name

        query = """
        set timezone = 'America/Los_Angeles';

        INSERT INTO """  + change_table_name + """
        select

        prior_status.var_1,
        current_timestamp ,
        'DELETED' as state,
        prior_status.primary_key,
        1 as current_status


        from  (select
        alias_1.""" + variable_name + """ as var_1,
        alias_1.primary_key,
        alias_1.state
        from """  + change_table_name + """ alias_1

        where
        alias_1.current_status = 1 and upper(alias_1.state) <> 'DELETED'
        ) prior_status

        left join (select
        alias."""+ variable_name + """ as var_1,
        alias."""+ primary_key + """ as primary_key
        from """  + source_table_name + """ alias

        ) curr_status


        on prior_status.primary_key = curr_status.primary_key


        where
        curr_status.primary_key is null and prior_status.primary_key is not null
        group by
        prior_status.var_1,
        current_timestamp ,
        case when curr_status.primary_key is null and prior_status.primary_key is not null then 'DELETED'
        else '' end ,
        prior_status.primary_key;"""

    elif number_vars == 1 and number_tables == 2:
        schema = "change_logs_1_var_1_table"
        change_table_name = """production."""  + schema + """.""" + source_schema + """_""" + table_name + """_""" + variable_name
        source_table_name = """production."""  + source_schema + """.""" + table_name


        query = """
        set timezone = 'America/Los_Angeles';

        INSERT INTO TABLE """  + change_table_name + """
        select

        else '' end ,
        prior_status.primary_key;"""

    #print(query)
    engine = create_engine(post)
    conn = engine.connect()
    conn.execute(text(query).execution_options(autocommit=True))
    conn.close()


    print(change_table_name + """: Updated for Deletes""")

    #Check for new values and append if necessary
    if number_vars == 1 and number_tables == 1:
        schema = "change_logs_1_var_1_table"
        change_table_name = """production."""  + schema + """.""" + source_schema + """_""" + table_name + """_""" + variable_name
        source_table_name = """production."""  + source_schema + """.""" + table_name


        query_1 = """
        set timezone = 'America/Los_Angeles';

        INSERT INTO """  + change_table_name + """
        select

        curr_status.var_1,
        current_timestamp ,
        'ADDED' as state,
        curr_status.primary_key,
        1 as current_status


        from

        (select
        alias."""+ variable_name + """ as var_1,
        alias."""+ primary_key + """ as primary_key
        from """  + source_table_name + """ alias

        ) curr_status

        left join (select
        alias_1.""" + variable_name + """ as var_1,
        alias_1.primary_key,
        alias_1.state
        from """  + change_table_name + """ alias_1

        where
        alias_1.current_status = 1
        ) prior_status

        on prior_status.primary_key = curr_status.primary_key


        where
        curr_status.primary_key is not null and prior_status.primary_key is null

        group by
        curr_status.var_1,
        current_timestamp ,
        curr_status.primary_key;"""

    elif number_vars == 1 and number_tables == 2:
        schema = "change_logs_1_var_1_table"
        change_table_name = """production."""  + schema + """.""" + source_schema + """_""" + table_name + """_""" + variable_name
        source_table_name = """production."""  + source_schema + """.""" + table_name


        query_1 = """
        set timezone = 'America/Los_Angeles';

        INSERT INTO TABLE """  + change_table_name + """
        select

        else '' end ,
        prior_status.primary_key;"""

    #print(query)
    engine = create_engine(post)
    conn = engine.connect()
    conn.execute(text(query_1).execution_options(autocommit=True))
    conn.close()


    print(change_table_name + """: Updated for Appends""")

    #Check for changed values
    if number_vars == 1 and number_tables == 1:
        schema = "change_logs_1_var_1_table"
        change_table_name = """production."""  + schema + """.""" + source_schema + """_""" + table_name + """_""" + variable_name
        source_table_name = """production."""  + source_schema + """.""" + table_name

        query_2 = """
        set timezone = 'America/Los_Angeles';

        INSERT INTO """  + change_table_name + """
        select

        curr_status.var_1,
        current_timestamp ,
        'CHANGED' as state,
        curr_status.primary_key,
        1 as current_status


        from  (select
        alias_1.""" + variable_name + """ as var_1,
        alias_1.primary_key,
        alias_1.state
        from """  + change_table_name + """ alias_1

        where
        alias_1.current_status = 1 and upper(alias_1.state) <> 'DELETED'
        ) prior_status

        left join (select
        alias."""+ variable_name + """ as var_1,
        alias."""+ primary_key + """ as primary_key
        from """  + source_table_name + """ alias

        ) curr_status


        on prior_status.primary_key = curr_status.primary_key


        where
        curr_status.primary_key is not null and prior_status.primary_key is not null
        and curr_status.var_1 <> prior_status.var_1
        group by
        curr_status.var_1,
        current_timestamp ,

        curr_status.primary_key;"""

    elif number_vars == 1 and number_tables == 2:
        schema = "change_logs_1_var_1_table"
        change_table_name = """production."""  + schema + """.""" + source_schema + """_""" + table_name + """_""" + variable_name
        source_table_name = """production."""  + source_schema + """.""" + table_name

        query_2 = """
        set timezone = 'America/Los_Angeles';

        INSERT INTO TABLE """  + change_table_name + """
        select

        else '' end ,
        prior_status.primary_key;"""
    #print(query)
    engine = create_engine(post)
    conn = engine.connect()
    conn.execute(text(query_2).execution_options(autocommit=True))
    conn.close()


    print(change_table_name + """: Updated for Changes""")



    #Reset Current Status
    if number_vars == 1 and number_tables == 1:
        schema = "change_logs_1_var_1_table"
        change_table_name = """production."""  + schema + """.""" + source_schema + """_""" + table_name + """_""" + variable_name
        source_table_name = """production."""  + source_schema + """.""" + table_name

        query_3 = """
        UPDATE """  + change_table_name + """
        set current_status = 0;

        UPDATE """  + change_table_name + """
        set current_status = 1


        from (
                    select

                    temp.primary_key,
                    temp.max_date
                    from (
                    SELECT

                    primary_key,
                    max(_synced_at) over (partition by primary_key) as max_date
                    from  """  + change_table_name + """
                    group by primary_key, _synced_at)

                    temp
                    group by temp.primary_key, temp.max_date

             ) t1
        where """  + change_table_name + """.primary_key = t1.primary_key
                    and """  + change_table_name + """._synced_at = t1.max_date
                    ;"""

    elif number_vars == 1 and number_tables == 2:
        schema = "change_logs_1_var_1_table"
        change_table_name = """production."""  + schema + """.""" + source_schema + """_""" + table_name + """_""" + variable_name
        source_table_name = """production."""  + source_schema + """.""" + table_name

        query_3 = """
        set timezone = 'America/Los_Angeles';

        INSERT INTO """  + change_table_name + """
        select

        else '' end ,
        prior_status.primary_key;"""
    #print(query_3)
    engine = create_engine(post)
    conn = engine.connect()
    conn.execute(text(query_3).execution_options(autocommit=True))
    conn.close()

    print(change_table_name + """: Current_Status Present""")
